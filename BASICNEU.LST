
ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Cross Assembler   A S E M - 5 1   V 1.2
       =====================================================



	Source File:	BASICNEU.A51
	Object File:	BASICNEU.HEX
	List File:	BASICNEU.LST



 Line  I  Addr  Code            Source

    1:				;*****************************************************************************
    2:				;*                                                                           *
    3:				;*                    MCS-BASIC-52 V1.31 Source Listing                      *
    4:				;*                           12/1986 till 11/2001                            *
    5:				;*       The original source code of V1.1 (BASIC.SRC and FP52.SRC) by        *
    6:				;*            Intel Corporation, Embedded Controller Operations              *
    7:				;*                             is public donain                              *
    8:				;*                                                                           *
    9:				;*****************************************************************************
   10:				;
   11:				;*****************************************************************************
   12:				;* General alterations made by D. Wulf, 12/1999.                             *
   13:				;* e-mail: Detlef.Wulf@onlinehome.de                                         *
   14:				;*****************************************************************************
   15:				;
   16:				;  The following general alterations are made to the original source code:
   17:				;
   18:				;  - The original source code had 2 files BASIC.SRC and FP52.SRC those have
   19:				;    been incorporated into this file for easy of assembly.
   20:				;
   21:				;  - All absolute and relativ jumps and calls without labels were provided
   22:				;    with labels.
   23:				;
   24:				;  - All machine code in the original source, coded in databytes are replaced
   25:				;    by the menomics.
   26:				;
   27:				;  - One routine in the source was different to the ROM code and is replaced
   28:				;    by the ROM code.
   29:				;
   30:				;  - Some "ORG" statements between BASIC and floating point code are remarked
   31:				;    out.
   32:				;
   33:				;  - To get room for new code the "ego message" had to be disabled.
   34:				;    (Remarked with "Sorry")
   35:				;
   36:				;  - To get more room for new code the "FPROG" command had to be disabled.
   37:				;    (Remarked with "get room")
   38:				;
   39:				;*****************************************************************************
   40:				;* Bugfixes for MCS-52-BASIC from D. Karmann, 8/1993.                        *
   41:				;* e-mail: dankarmann@lucent.com                                             *
   42:				;*****************************************************************************
   43:				;

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:				;  - Corrected Intel bug to allow BASIC autoboot EPROM at 8000H with user
   45:				;    command extensions to work.
   46:				;    (Remarked as Karmann 1)
   47:				;
   48:				;  - Corrected Intel bug to that discarded the 'F' in any variable ending in
   49:				;    F, FP, FPR and FPRO and followed by a space.
   50:				;    (Remarked as Karmann 2)
   51:				;
   52:				;*****************************************************************************
   53:				;* Bugfix and performance for MCS-52-BASIC from                              *
   54:				;* D. Mudric and Z. Stojsavljevic descipt in                                 *
   55:				;* Elektor Electronics magazine german issue 3/1992.                         *
   56:				;*****************************************************************************
   57:				;
   58:				;  - Modifications to the unprocess a BASIC line routine.
   59:				;    (Remarked as Elektor 1)
   60:				;
   61:				;  - Modifications to the floating point subtraction routine.
   62:				;    (Remarked as Elektor 2)
   63:				;
   64:				;  - HEX to BIN performance improvements.
   65:				;    (Remarked as Elektor 3)
   66:				;
   67:				; The same article describes a fix for the multiplication underflow bug, but
   68:				; the fixes did not work.
   69:				;
   70:				; The multiplicaton underflow bug is now (V1.31) really fixed by D. Wulf!
   71:				;    (Remarked as Wulf 1)
   72:				;
   73:				;*****************************************************************************
   74:				;* Change UV-EPROM to EEPROM programming from R. Skowronek, 4/1996           *
   75:				;* e-mail: r.skowronek@kfa-juelich.de                                        *
   76:				;*****************************************************************************
   77:				;
   78:				; This altered section of code writes the ram resident Basic program to
   79:				; EEPROM just like the ROM resident Basic interpreter writes to UV-EPROMs.
   80:				; The EEPROM is connected just like a RAM, i.e. it uses /wr on pin 27
   81:				; and gets it's adresses from the real address lines, i.e. the only
   82:				; difference from the normal setup is the use of the /wr line instead of
   83:				; P1.4, which supplies the program pulse for UV-EPROMs. Now MCS-BASIC-52
   84:				; can be located in externally ROM and is non the less able to programm
   85:				; EEPROMs!
   86:				; (Remarked as Skowronek)
   87:				;
   88:				; The original code from R. Skowronek didn't support the "PGM" statement
   89:				; this feature is added by D. Wulf.
   90:				; Memory is now limited to 32K bytes RAM, because memory tests above it
   91:				; would change the EEPROM.
   92:				;
   93:				;*****************************************************************************
   94:				;* Change timer 0 from 13 bit to 16 bit counter mode to use XTAL up to 78MHz *
   95:				;* from D. Wulf 1/2000                                                       *
   96:				;*****************************************************************************
   97:				;
   98:				; The max. value for XTAL is now 78627473 Hz, for use BASIC-52 with
   99:				; Dallas 80C320 high speed / low power microcontroller (33 MHz).

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:				; The defaut crystal value is still 11059200 Hz. You can set it with
  101:				; XTAL or patch the souce code at
  102:				;
  103:				;	17F1H = 11
  104:				;	17F0H = 05
  105:				;	17EFH = 92
  106:				;	17EEH = 00
  107:				;
  108:				; with a new crystal value.
  109:				; (Remarket as Wulf 2)
  110:				;
  111:				;*****************************************************************************
  112:				;* New baudrate detection from D. Wulf 1/2000                                *
  113:				;*****************************************************************************
  114:				;
  115:				; The new baudrate detection uses timer 2 for time measurement in state of
  116:				; the code loop timing. So the Dallas 80C320 and other controllers can be
  117:				; used. Also at higher clock speeds the baudrate will detect automaticly.
  118:				; (Remarked as Wulf 3)
  119:				;
  120:				;*****************************************************************************
  121:				;* New processor type detection from D. Wulf 2/2000                          *
  122:				;*****************************************************************************
  123:				;
  124:				; A new reset routine detects the processor type. So BASIC-52 V1.3 can be
  125:				; used with the following controllers:
  126:				;
  127:				; 8032, 87C52#, Dallas 80C320, 80515*#, 80517*#, 80517A#, 80528, 80535*,
  128:				; 80537*, 80575 or similars.
  129:				;
  130:				; - On processor types marked with the "*" only two different autodetect
  131:				;   baudrates, depending on the crystal are possible.
  132:				; - The processor types marked with the "#" have internal ROM, so BASIC-52
  133:				;   V1.3 can be located there, because it is still only 8K bytes long!
  134:				;
  135:				; (Remarked as Wulf 4)
  136:				;
  137:				;*****************************************************************************
  138:				;* OPBYTE 43H for POP from H.-J. Boehling 1/2000                             *
  139:				;* e-mail: H-Boehling@gmx.de                                                 *
  140:				;*****************************************************************************
  141:				;
  142:				; A feature of BASIC-52 is the ability to add up to 16 custom keywords
  143:				; representing commands or instructions that you define with assembler
  144:				; routines. For using system routines in your assembler code there are
  145:				; operation bytes (for more information see Intels "MCS BASIC-52 MANUAL").
  146:				; In the original souce code is no OPCODE to put a value from argument
  147:				; stack and store in a variable.
  148:				; With BASIC-52 V1.3 you can use OPBYTE 43H which does the same than the
  149:				; "POP" statement.
  150:				; (Remarked as Boehling 1)
  151:				;
  152:				;*****************************************************************************
  153:				;* Reset millisecond counter on "TIME=" from H.-J. Boehling 2/2000           *
  154:				;*****************************************************************************
  155:				;

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:				; The command "TIME=0" now zeros the millisecond register so that TIME
  157:				; returns with zero.
  158:				; (Remarked as Boehling 2)
  159:				;
  160:				;*****************************************************************************
  161:				;* New command "ERASE" by H.-J. Boehling 2/2000                              *
  162:				;*****************************************************************************
  163:				;
  164:				; To erase an EEPROM (fill 16K byte up to 8000H with 0FFH) the new command
  165:				; "ERASE" is implemented. It takes 2 min. and 45 sec. to erase the 16K bytes!
  166:				; (Remarked as Boehling 3)
  167:				;
  168:				;*****************************************************************************
  169:				;* Correct "ASC(x)" bug by D. Wulf 2/2000                                    *
  170:				;*****************************************************************************
  171:				;
  172:				; BASIC-51 V1.1 gives erroneous results for the "ASC(x)" funktion if "x" is
  173:				; one of the following signs : *, +, -, /, <, =, > or ?.
  174:				; BASIC-51 V1.3 returns the correct values.
  175:				; (Remarked as Wulf 5)
  176:				;
  177:				;*****************************************************************************
  178:				;*****************************************************************************
  179:				; To indicate the new version the start message is changed from
  180:				; *MCS-51(tm) BASIC V1.1* to
  181:				; *MCS-BASIC-52 V1.31*
  182:				;
  183:				; H.-J. Boehling, D. Wulf 11/26/2001
  184:				;*****************************************************************************
  185:				;
  186:		N      00C8	T2CON	EQU	0C8H ; This three lines are necessary for MS-DOS freeware
  187:		N      00CC	TL2	EQU	0CCH ; MCS-51 Family Cross Assembler  ASEM-51 V1.2
  188:		N      00CD	TH2	EQU	0CDH ; from W.W. Heinz (e-mail: ww@andiunx.m.isar.de)
  189:				;
  190:					;**************************************************************
  191:					;
  192:					; TRAP VECTORS TO MONITOR
  193:					;
  194:					; RESET TAG (0AAH) ---------2001H
  195:					;
  196:					; TAG LOCATION (5AH) ------ 2002H
  197:					;
  198:					; EXTERNAL INTERRUPT 0 ---- 2040H
  199:					;
  200:					; COMMAND MODE ENTRY ------ 2048H
  201:					;
  202:					; SERIAL PORT ------------- 2050H
  203:					;
  204:					; MONITOR (BUBBLE) OUTPUT - 2058H
  205:					;
  206:					; MONITOR (BUBBLE) INPUT -- 2060H
  207:					;
  208:					; MONITOR (BUBBLE) CSTS --- 2068H
  209:					;
  210:					; GET USER JUMP VECTOR ---- 2070H
  211:					;

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  212:					; GET USER LOOKUP VECTOR -- 2078H
  213:					;
  214:					; PRINT AT VECTOR --------- 2080H
  215:					;
  216:					; INTERRUPT PWM ----------- 2088H
  217:					;
  218:					; EXTERNAL RESET ---------- 2090H
  219:					;
  220:					; USER OUTPUT-------------- 4030H
  221:					;
  222:					; USER INPUT -------------- 4033H
  223:					;
  224:					; USER CSTS --------------- 4036H
  225:					;
  226:					; USER RESET -------------- 4039H
  227:					;
  228:					; USER DEFINED PRINT @ ---  403CH
  229:					;
  230:					;***************************************************************
  231:					;
  232:					;***************************************************************
  233:					;
  234:					; MCS - 52  -  8K BASIC VERSION 1.3
  235:					;
  236:					;***************************************************************
  237:					;
  238:	  0000	61 8B			AJMP	CRST		;START THE PROGRAM
  239:	  0002	37			ADDC	A,@R1
  240:					;
  241:		N      0003		ORG	3H
  242:					;
  243:					;***************************************************************
  244:					;
  245:					;EXTERNAL INTERRUPT 0
  246:					;
  247:					;***************************************************************
  248:					;
  249:	  0003	20 31 2D		JB	DRQ,STQ 	;SEE IF DMA IS SET
  250:	  0006	C0 D0			PUSH	PSW		;SAVE THE STATUS
  251:	  0008	02 40 03		LJMP	4003H		;JUMP TO USER IF NOT SET
  252:					;
  253:		N      000B		ORG	0BH
  254:					;
  255:					;***************************************************************
  256:					;
  257:					;TIMER 0 OVERFLOW INTERRUPT
  258:					;
  259:					;***************************************************************
  260:					;
  261:	  000B	C0 D0			PUSH	PSW		;SAVE THE STATUS
  262:	  000D	20 2E 10		JB	C_BIT,STJ	;SEE IF USER WANTS INTERRUPT
  263:	  0010	02 40 0B		LJMP	400BH		;EXIT IF USER WANTS INTERRUPTS
  264:					;
  265:		N      0013		ORG	13H
  266:					;
  267:					;***************************************************************

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  268:					;
  269:					;EXTERNAL INTERRUPT 1
  270:					;
  271:					;***************************************************************
  272:					;
  273:	  0013	20 12 2B		JB	INTBIT,STK
  274:	  0016	C0 D0			PUSH	PSW
  275:	  0018	02 40 13		LJMP	4013H
  276:					;
  277:					;
  278:		N      001B		ORG	1BH
  279:					;
  280:					;***************************************************************
  281:					;
  282:					;TIMER 1 OVERFLOW INTERRUPT
  283:					;
  284:					;***************************************************************
  285:					;
  286:	  001B	C0 D0			PUSH	PSW
  287:	  001D	02 1F 78		LJMP	CKS_I
  288:					;
  289:	  0020	02 19 02	STJ:	LJMP	I_DR		;DO THE INTERRUPT
  290:					;
  291:					;***************************************************************
  292:					;
  293:					;SERIAL PORT INTERRUPT
  294:					;
  295:					;***************************************************************
  296:					;
  297:		N      0023		ORG	23H
  298:					;
  299:	  0023	C0 D0			PUSH	PSW
  300:	  0025	20 1F 1C		JB	SPINT,STU	;SEE IF MONITOR EANTS INTERRUPT
  301:	  0028	02 40 23		LJMP	4023H
  302:					;
  303:		N      002B		ORG	2BH
  304:					;
  305:					;**************************************************************
  306:					;
  307:					;TIMER 2 OVERFLOW INTERRUPT
  308:					;
  309:					;**************************************************************
  310:					;
  311:	  002B	C0 D0			PUSH	PSW
  312:	  002D	02 40 2B		LJMP	402BH
  313:					;
  314:					;**************************************************************
  315:					;
  316:					;USER ENTRY
  317:					;
  318:					;**************************************************************
  319:					;
  320:		N      0030		ORG	30H
  321:					;
  322:	  0030	02 19 3F		LJMP	IBLK		;LINK TO USER BLOCK
  323:					;

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  324:	  0033	20 26 08	STQ:	JB	I_T0,STS	;SEE IF MONITOR WANTS IT
  325:	  0036	C2 96			CLR	DACK
  326:	  0038	30 B2 FD		JNB	P3.2,$		;WAIT FOR DMA TO END
  327:	  003B	D2 96			SETB	DACK
  328:	  003D	32			RETI
  329:					;
  330:	  003E	02 20 40	STS:	LJMP	2040H		;GO TO THE MONITOR
  331:					;
  332:	  0041	D2 16		STK:	SETB	INTPEN		;TELL BASIC AN INTERRUPT WAS RECEIVED
  333:	  0043	32			RETI
  334:					;
  335:	  0044	02 20 50	STU:	LJMP	2050H		;SERIAL PORT INTERRUPT
  336:					;
  337:					;
  338:					;**************************************************************
  339:					;
  340:					; This is the equate table for 8052 basic.
  341:					;
  342:					;**************************************************************
  343:					;
  344:					; The register to direct equates for CJNE instructions.
  345:					;
  346:		N      0000	R0B0	EQU	0
  347:		N      0001	R1B0	EQU	1
  348:		N      0002	R2B0	EQU	2
  349:		N      0003	R3B0	EQU	3
  350:		N      0004	R4B0	EQU	4
  351:		N      0005	R5B0	EQU	5
  352:		N      0006	R6B0	EQU	6
  353:		N      0007	R7B0	EQU	7
  354:					;
  355:					; Register bank 1 contains the text pointer
  356:					; and the arg stack pointer.
  357:					;
  358:		N      0008	TXAL	EQU	8		;R0 BANK 1 = TEXT POINTER LOW
  359:		N      0009	ASTKA	EQU	9		;R1 BANK 1 = ARG STACK
  360:		N      000A	TXAH	EQU	10		;R2 BANK 1 = TEXT POINTER HIGH
  361:					;
  362:					; Now five temporary locations that are used by basic.
  363:					;
  364:		N      000B	TEMP1	EQU	11
  365:		N      000C	TEMP2	EQU	12
  366:		N      000D	TEMP3	EQU	13
  367:		N      000E	TEMP4	EQU	14
  368:		N      000F	TEMP5	EQU	15
  369:					;
  370:					; Register bank 2 contains the read text pointer
  371:					; and the control stack pointer.
  372:					;
  373:		N      0010	RTXAL	EQU	16		;R0 BANK 2 = READ TEXT POINTER LOW
  374:		N      0011	CSTKA	EQU	17		;R1 BANK 2 = CONTROL STACK POINTER
  375:		N      0012	RTXAH	EQU	18		;R2 BANK 2 = READ TEXT POINTER HIGH
  376:					;
  377:					; Now some internal system equates.
  378:					;
  379:		N      0013	BOFAH	EQU	19		;START OF THE BASIC PROGRAM, HIGH BYTE

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  380:		N      0014	BOFAL	EQU	20		;START OF THE BASIC PROGRAM, LOW BYTE
  381:		N      0015	NULLCT	EQU	21		;NULL COUNT
  382:		N      0016	PHEAD	EQU	22		;PRINT HEAD POSITION
  383:		N      0017	FORMAT	EQU	23
  384:					;
  385:					; Register bank 3 is for the user and can be loaded
  386:					; by basic
  387:					;
  388:					;
  389:					;
  390:					; Now everything else is used by basic.
  391:					; First the bit locations, these use bytes 34, 35, 36, 37 and 38
  392:					;
  393:		N	 10	OTS		BIT	16	;34.0-ON TIME INSTRUCTION EXECUTED
  394:		N	 11	INPROG		BIT	17	;34.1-INTERRUPT IN PROCESS
  395:		N	 12	INTBIT		BIT	18	;34.2-INTERRUPT SET BIT
  396:		N	 13	ON_ERR		BIT	19	;34.3-ON ERROR EXECUTED
  397:		N	 14	OTI		BIT	20	;34.4-ON TIME INTERRUPT IN PROGRESS
  398:		N	 15	LINEB		BIT	21	;34.5-LINE CHANGE OCCURED
  399:		N	 16	INTPEN		BIT	22	;34.6-INTERRUPT PENDING BIT
  400:		N	 17	CONB		BIT	23	;34.7-CAN CONTINUE IF SET
  401:		N	 18	GTRD		BIT	24	;35.0-READ GET LOCATION
  402:		N	 19	LPB		BIT	25	;35.1-PRINT TO LINE PRINTER PORT
  403:		N	 1A	CKS_B		BIT	26	;35.2-FOR PWM INTERRUPT
  404:		N	 1B	COB		BIT	27	;35.3-CONSOLE OUT BIT
  405:								;     0 = SERIAL PORT
  406:								;     1 = LINE PRINTER
  407:		N	 1C	COUB		BIT	28	;35.4-USER CONSOLE OUT BIT
  408:								;     0 = SERIAL PORT
  409:								;     1 = USER DRIVER
  410:		N	 1D	INBIT		BIT	29	;35.5-INITIALIZATION BIT
  411:		N	 1E	CIUB		BIT	30	;35.6-USER CONSOLE IN BIT
  412:								;     0 = SERIAL PORT
  413:								;     1 = USER ROUTINE
  414:		N	 1F	SPINT		BIT	31	;35.7-SERIAL PORT INTERRUPT
  415:		N	 20	STOPBIT 	BIT	32	;36.0-PROGRAM STOP ENCOUNTERED
  416:		N	 21	U_IDL		BIT	33	;36.1-USER IDLE BREAK
  417:		N	 22	INP_B		BIT	34	;36.2-SET DURING INPUT INSTRUCTION
  418:				;DCMPXZ 	BIT	35	;36.3-DCMPX ZERO FLAG
  419:		N	 24	ARGF		BIT	36	;36.4-ARG STACK HAS A VALUE
  420:		N	 25	RETBIT		BIT	37	;36.5-RET FROM INTERRUPT EXECUTED
  421:		N	 26	I_T0		BIT	38	;36.6-TRAP INTERRUPT ZERO TO MON
  422:		N	 27	UPB		BIT	39	;36.7-SET WHEN @ IS VALID
  423:
  424:				;
  425:				;*****************************************************************************
  426:				;****** Sorry - but the ego message had to be disabled ***********************
  427:				;
  428:				;JKBIT		BIT	40	;37.0-WB TRIGGER We use the bit for detect
  429:				;
  430:		N	 28	mul_underflow	BIT	40	;37.0-mul_limit_case
  431:				;
  432:				;*****************************************************************************
  433:				;
  434:		N	 29	ENDBIT		BIT	41	;37.1-GET END OF PROGRAM
  435:		N	 2A	UBIT		BIT	42	;37.2-FOR DIM STATEMENT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  436:		N	 2B	ISAV		BIT	43	;37.3-SAVE INTERRUPT STATUS
  437:		N	 2C	BO		BIT	44	;37.4-BUBBLE OUTPUT
  438:		N	 2D	XBIT		BIT	45	;37.5-EXTERNAL PROGRAM PRESENT
  439:		N	 2E	C_BIT		BIT	46	;37.6-SET WHEN CLOCK RUNNING
  440:		N	 2F	DIRF		BIT	47	;37.7-DIRECT INPUT MODE
  441:		N	 30	NO_C		BIT	48	;38.0-NO CONTROL C
  442:		N	 31	DRQ		BIT	49	;38.1-DMA ENABLED
  443:		N	 32	BI		BIT	50	;38.2-BUBBLE INPUT
  444:				;
  445:				;*****************************************************************************
  446:				;****** Disable Intel programming for to get room ****************************
  447:				;
  448:				;INTELB 	BIT	51	;38.3-INTELLIGENT PROM PROGRAMMING
  449:				;
  450:				;*****************************************************************************
  451:				;
  452:		N	 34	C0ORX1		BIT	52	;38.4-PRINT FROM ROM OR RAM
  453:		N	 35	CNT_S		BIT	53	;38.5-CONTROL S ENCOUNTERED
  454:		N	 36	ZSURP		BIT	54	;38.6-ZERO SUPRESS
  455:		N	 37	HMODE		BIT	55	;38.7-HEX MODE PRINT
  456:		B	 97	LP		BIT	P1.7	;SOFTWARE LINE PRINTER
  457:		B	 96	DACK		BIT	P1.6	;DMA ACK
  458:				;*****************************************************************************
  459:				;
  460:				;PROMV		BIT	P1.5	;TURN ON PROM VOLTAGE
  461:				;PROMP		BIT	P1.4	;PROM PULSE
  462:				;ALED		BIT	P1.3	;ALE DISABLE
  463:				;
  464:				;*****************************************************************************
  465:		B	 92	T_BIT		BIT	P1.2	;I/O TOGGLE BIT
  466:		N	 DF	BD		BIT	0DFH	;Baudrategenerator 805x7,x5
  467:					;
  468:					;
  469:					; The next location is a bit addressable byte counter
  470:					;
  471:		N      0027	BABC	EQU	39
  472:					;
  473:					; Now floating point and the other temps
  474:					;
  475:					; FP Uses to locations 03CH
  476:					;
  477:					; Now the stack designators.
  478:					;
  479:		N      003E	SPSAV	EQU	3EH
  480:		N      003F	S_LEN	EQU	3FH
  481:		N      0040	T_HH	EQU	40H
  482:		N      0041	T_LL	EQU	41H
  483:		N      0042	INTXAH	EQU	42H
  484:		N      0043	INTXAL	EQU	43H
  485:		N      0045	MT1	EQU	45H
  486:		N      0046	MT2	EQU	46H
  487:		N      0047	MILLIV	EQU	47H		;Real Time Clock 5 millisec.
  488:		N      0048	TVH	EQU	48H		;Real Time Clock high byte
  489:		N      0049	TVL	EQU	49H		;Real Time Clock low byte
  490:		N      004A	SAVE_T	EQU	4AH
  491:		N      004B	SP_H	EQU	4BH		;SERIAL PORT TIME OUT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  492:		N      004C	SP_L	EQU	4CH
  493:		N      004D	CMNDSP	EQU	4DH		;SYSTEM STACK POINTER
  494:		N      0087	PCON0	EQU	87H		;PCON SFR
  495:		N      00AA	S0RELL	EQU	0AAH		;S0RELL 805x7A SFR
  496:		N      00BA	S0RELH	EQU	0BAH		;S0RELH 805x7A SFR
  497:		N      00CB	RCAPH2	EQU	0CBH		;RCAPH2 8052 SFR
  498:		N      00CA	RCAPL2	EQU	0CAH		;RCAPL2 8052 SFR
  499:		N      00D8	ADCON	EQU	0D8H		;ADCON 805xx SFR
  500:		N      00DA	DAPR	EQU	0DAH		;DAPR 805xx SFR
  501:		N      00FF	IRAMTOP EQU	0FFH		;TOP OF RAM
  502:		N      00FE	STACKTP EQU	0FEH		;ARG AND CONTROL STACK TOPS
  503:					;
  504:					; The character equates
  505:					;
  506:		N      000D	CR	EQU	0DH		;CARRIAGE RETURN
  507:		N      000A	LF	EQU	0AH		;LINE FEED
  508:		N      0007	BELL	EQU	07H		;BELL CHARACTER
  509:		N      0008	BS	EQU	08H		;BACK SPACE
  510:		N      0003	CNTRLC	EQU	03H		;CONTROL C
  511:		N      0004	CNTRLD	EQU	04H		;CONTROL D
  512:		N      0000	NULL	EQU	00H		;NULL
  513:					;
  514:					; The new baud rate constants
  515:					;
  516:		N      00B2	B4800	EQU	0B2H		;Timervalue for 4800 baud
  517:		N      00D9	B9600	EQU	0D9H		;Timervalue for 9600 baud
  518:					;
  519:					;
  520:					; The internal system equates
  521:					;
  522:		N      0049	LINLEN	EQU	73		;THE LENGTH OF AN INPUT LINE
  523:		N      0001	EOF	EQU	01		;END OF FILE CHARACTER
  524:		N      0001	ASTKAH	EQU	01		;ASTKA IS IN PAGE 1 OF RAM
  525:		N      0000	CSTKAH	EQU	00		;CSTKA IS IN PAGE 0 OF RAM
  526:		N      0001	FTYPE	EQU	01		;CONTROL STACK "FOR"
  527:		N      0002	GTYPE	EQU	02		;CONTROL STACK "GOSUB"
  528:		N      0003	DTYPE	EQU	03		;DO-WHILE/UNTIL TYPE
  529:		N      8000	ROMADR	EQU	8000H		;LOCATION OF ROM
  530:					;
  531:					; The floating point equates
  532:					;
  533:		N      0006	FPSIZ	EQU	6		;NO. OF BYTES IN A FLOATING NUM
  534:		N      0004	DIGIT	EQU	FPSIZ-2 	;THE MANTISSA OF A FLOATING NUM
  535:		N      0009	STESIZ	EQU	FPSIZ+3 	;SIZE OF SYMBOL ADJUSTED TABLE ELEMENT
  536:				;FP_BASE EQU	 1993H		 ;BASE OF FLOATING POINT ROUTINES
  537:		N      0200	PSTART	EQU	512		;START OF A PROGRAM IN RAM
  538:		N      0011	FSIZE	EQU	FPSIZ+FPSIZ+2+2+1
  539:					;
  540:					;**************************************************************
  541:					;
  542:	  0047			USENT:	; User entry jump table
  543:					;
  544:					;**************************************************************
  545:					;
  546:	  0047	17 87			DW	CMND1		;(00, 00H)COMMAND MODE JUMP
  547:	  0049	12 23			DW	IFIX		;(01, 01H)CONVERT FP TO INT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

  548:	  004B	0F DD			DW	PUSHAS		;(02, 02H)PUSH VALUE ONTO ARG STACK
  549:	  004D	0F D3			DW	POPAS		;(03, 03H)POP VALUE OFF ARG STACK
  550:	  004F	04 BD			DW	PG1		;(04, 04H)PROGRAM A PROM
  551:	  0051	06 D8			DW	INLINE		;(05, 05H)INPUT A LINE
  552:	  0053	06 BF			DW	UPRNT		;(06, 06H)PRINT A LINR
  553:	  0055	06 A5			DW	CRLF		;(07, 07H)OUTPUT A CRLF
  554:					;
  555:					;**************************************************************
  556:					;
  557:					; This is the operation jump table for arithmetics
  558:					;
  559:					;**************************************************************
  560:					;
  561:	  0057	13 AC		OPTAB:	DW	ALPAR		;(08, 08H)LEFT PAREN
  562:	  0059	13 2B			DW	AEXP		;(09, 09H)EXPONENTAION
  563:	  005B	11 B0			DW	AMUL		;(10, 0AH)FP MUL
  564:	  005D	17 41			DW	AADD		;(11, 0BH)FLOATING POINT ADD
  565:	  005F	14 0A			DW	ADIV		;(12, 0CH)FLOATING POINT DIVIDE
  566:	  0061	17 1C			DW	ASUB		;(13, 0DH)FLOATING POINT SUBTRACTION
  567:	  0063	14 98			DW	AXRL		;(14, 0EH)XOR
  568:	  0065	14 84			DW	AANL		;(15, 0FH)AND
  569:	  0067	14 8D			DW	AORL		;(16, 10H)OR
  570:	  0069	13 A1			DW	ANEG		;(17, 11H)NEGATE
  571:	  006B	13 DB			DW	AEQ		;(18, 12H)EQUAL
  572:	  006D	13 E7			DW	AGE		;(19, 13H)GREATER THAN OR EQUAL
  573:	  006F	13 EB			DW	ALE		;(20, 14H)LESS THAN OR EQUAL
  574:	  0071	13 E1			DW	ANE		;(21, 15H)NOT EQUAL
  575:	  0073	13 D6			DW	ALT		;(22, 16H)LESS THAN
  576:	  0075	13 C5			DW	AGT		;(23, 17H)GREATER THAN
  577:					;
  578:					;***************************************************************
  579:					;
  580:					; This is the jump table for unary operators
  581:					;
  582:					;***************************************************************
  583:					;
  584:	  0077	13 8F			DW	AABS		;(24, 18H)ABSOLUTE VALUE
  585:	  0079	13 6D			DW	AINT		;(25, 19H)INTEGER OPERATOR
  586:	  007B	13 95			DW	ASGN		;(26, 1AH)SIGN OPERATOR
  587:	  007D	14 96			DW	ANOT		;(27, 1BH)ONE'S COMPLEMENT
  588:	  007F	11 6D			DW	ACOS		;(28, 1CH)COSINE
  589:	  0081	11 D0			DW	ATAN		;(29, 1DH)TANGENT
  590:	  0083	11 71			DW	ASIN		;(30, 1EH)SINE
  591:	  0085	12 8D			DW	ASQR		;(31, 1FH)SQUARE ROOT
  592:	  0087	13 AD			DW	ACBYTE		;(32, 20H)READ CODE
  593:	  0089	13 27			DW	AETOX		;(33, 21H)E TO THE X
  594:	  008B	11 E0			DW	AATAN		;(34, 22H)ARC TANGENT
  595:	  008D	12 C0			DW	ALN		;(35, 23H)NATURAL LOG
  596:	  008F	13 B6			DW	ADBYTE		;(36, 24H)READ DATA MEMORY
  597:	  0091	13 BE			DW	AXBYTE		;(37, 25H)READ EXTERNAL MEMORY
  598:	  0093	14 7F			DW	PIPI		;(38, 26H)PI
  599:	  0095	13 F1			DW	ARND		;(39, 27H)RANDOM NUMBER
  600:	  0097	14 A9			DW	AGET		;(40, 28H)GET INPUT CHARACTER
  601:	  0099	17 11			DW	AFREE		;(41, 29H)COMPUTE #BYTES FREE
  602:	  009B	17 21			DW	ALEN		;(42, 2AH) COMPUTE LEN OF PORGRAM
  603:	  009D	0F D9			DW	AXTAL		;(43, 2BH) CRYSTAL

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 12



 Line  I  Addr  Code            Source

  604:	  009F	16 4F			DW	PMTOP		;(44, 2CH)TOP OF MEMORY
  605:	  00A1	17 29			DW	ATIME		;(45, 2DH) TIME
  606:	  00A3	14 B9			DW	A_IE		;(46, 2EH) IE
  607:	  00A5	14 BD			DW	A_IP		;(47, 2FH) IP
  608:	  00A7	14 C1			DW	ATIM0		;(48, 30H) TIMER 0
  609:	  00A9	14 C7			DW	ATIM1		;(49, 31H) TIMER 1
  610:	  00AB	14 CD			DW	ATIM2		;(50, 32H) TIMER 2
  611:	  00AD	14 D3			DW	AT2CON		;(51, 33H) T2CON
  612:	  00AF	14 D7			DW	ATCON		;(52, 34H) TCON
  613:	  00B1	14 DB			DW	ATMOD		;(53, 35H) ATMOD
  614:	  00B3	14 DF			DW	ARCAP2		;(54, 36H) RCAP2
  615:	  00B5	14 E5			DW	AP1		;(55, 37H) P1
  616:	  00B7	14 E9			DW	APCON		;(56, 38H) PCON
  617:	  00B9	0F 43			DW	EXPRB		;(57, 39H) EVALUATE AN EXPRESSION
  618:	  00BB	16 5C			DW	AXTAL1		;(58, 3AH) CALCULATE CRYSTAL
  619:	  00BD	14 F0			DW	LINE		;(59, 3BH) EDIT A LINE
  620:	  00BF	15 BA			DW	PP		;(60, 3CH) PROCESS A LINE
  621:	  00C1	10 A0			DW	UPPL0		;(61, 3DH) UNPROCESS A LINE
  622:	  00C3	0D 65			DW	VAR		;(62, 3EH) FIND A VARIABLE
  623:	  00C5	0E CD			DW	GC		;(63, 3FH) GET A CHARACTER
  624:	  00C7	0E D5			DW	GCI		;(64, 40H) GET CHARACTER AND INCREMENT
  625:	  00C9	07 91			DW	INCHAR		;(65, 41H) INPUT A CHARACTER
  626:	  00CB	08 02			DW	CRUN		;(66, 42H) RUN A PROGRAM
  627:				;
  628:				;*****************************************************************************
  629:				;****** OPBYTE 43H for POP ***************************************************
  630:				;****** Boehling 1 ***********************************************************
  631:				;
  632:	  00CD	0A 7D			dw	SPOP		;(67, 43H) POP a value to a variable
  633:				;
  634:				;*****************************************************************************
  635:				;
  636:
  637:	  00CF	01		OPBOL:	DB	1		;
  638:					;
  639:	  00D0	0F			DB	15		;LEFT PAREN
  640:	  00D1	0E			DB	14		;EXPONENTIAN **
  641:	  00D2	0A			DB	10		;MUL
  642:	  00D3	08			DB	8		;ADD
  643:	  00D4	0A			DB	10		;DIVIDE
  644:	  00D5	08			DB	8		;SUB
  645:	  00D6	03			DB	3		;XOR
  646:	  00D7	05			DB	5		;AND
  647:	  00D8	04			DB	4		;OR
  648:	  00D9	0C			DB	12		;NEGATE
  649:	  00DA	06			DB	6		;EQ
  650:	  00DB	06			DB	6		;GT
  651:	  00DC	06			DB	6		;LT
  652:	  00DD	06			DB	6		;NE
  653:	  00DE	06			DB	6		;LE
  654:	  00DF	06			DB	6		;GE
  655:					;
  656:	  00E0	0F		UOPBOL: DB	15		;AABS
  657:	  00E1	0F			DB	15		;AAINT
  658:	  00E2	0F			DB	15		;ASGN
  659:	  00E3	0F			DB	15		;ANOT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 13



 Line  I  Addr  Code            Source

  660:	  00E4	0F			DB	15		;ACOS
  661:	  00E5	0F			DB	15		;ATAN
  662:	  00E6	0F			DB	15		;ASIN
  663:	  00E7	0F			DB	15		;ASQR
  664:	  00E8	0F			DB	15		;ACBYTE
  665:	  00E9	0F			DB	15		;E TO THE X
  666:	  00EA	0F			DB	15		;AATAN
  667:	  00EB	0F			DB	15		;NATURAL LOG
  668:	  00EC	0F			DB	15		;DBYTE
  669:	  00ED	0F			DB	15		;XBYTE
  670:					;
  671:					;***************************************************************
  672:					;
  673:					; The ASCII printed messages.
  674:					;
  675:					;***************************************************************
  676:					;
  677:	  00EE	53 54 4F 50	STP:	DB	'STOP"'
	  00F2	22
  678:					;
  679:	  00F3	54 52 59 20	IAN:	DB	'TRY AGAIN"'
	  00F7	41 47 41 49
	  00FB	4E 22
  680:					;
  681:	  00FD	52 45 41 44	RDYS:	DB	'READY"'
	  0101	59 22
  682:					;
  683:	  0103	20 2D 20 49	INS:	DB	' - IN LINE "'
	  0107	4E 20 4C 49
	  010B	4E 45 20 22
  684:					;
  685:					;**************************************************************
  686:					;
  687:					; This is the command jump table
  688:					;
  689:					;**************************************************************
  690:					;
  691:	  010F	08 02		CMNDD:	DW	CRUN		;RUN
  692:	  0111	10 4E			DW	CLIST		;LIST
  693:	  0113	0B 08			DW	CNULL		;NULL
  694:	  0115	06 5C			DW	CNEW		;NEW
  695:	  0117	18 3E			DW	CCONT		;CONTINUE
  696:	  0119	04 8A			DW	CPROG		;PROGRAM A PROM
  697:	  011B	17 73			DW	CXFER		;TRANSFER FROM ROM TO RAM
  698:	  011D	17 7F			DW	CRAM		;RAM MODE
  699:	  011F	05 3C			DW	CROM		;ROM MODE
  700:				;
  701:				;*****************************************************************************
  702:				;****** Disable Intel programming for to get room ****************************
  703:				;
  704:				;	DW	CIPROG		;INTELLIGENT PROM PROGRAMMING
  705:				;
  706:				;*****************************************************************************
  707:				;
  708:	  0121	05 00			dw	CERASE		;Erase an EEPROM
  709:				;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 14



 Line  I  Addr  Code            Source

  710:					;***************************************************************
  711:					;
  712:					; This is the statement jump table.
  713:					;
  714:					;**************************************************************
  715:					;
  716:	  0123			STATD:	;
  717:	  0123	09 6E			DW	SLET		;LET		80H
  718:	  0125	06 8F			DW	SCLR		;CLEAR		81H
  719:	  0127	0A 76			DW	SPUSH		;PUSH VAR	82H
  720:	  0129	0A AA			DW	SGOTO		;GO TO		83H
  721:	  012B	16 86			DW	STONE		;TONE		84H
  722:	  012D	0C 29			DW	SPH0		;PRINT MODE 0	85H
  723:	  012F	19 2E			DW	SUI		;USER INPUT	86H
  724:	  0131	19 33			DW	SUO		;USER OUTPUT	87H
  725:	  0133	0A 7D			DW	SPOP		;POP VAR	88H
  726:	  0135	0C 2D			DW	SPRINT		;PRINT		89H
  727:	  0137	0E 63			DW	SCALL		;CALL		8AH
  728:	  0139	0D 61			DW	SDIMX		;DIMENSION	8BH
  729:	  013B	06 0C			DW	STRING		;STRING ALLO	8CH
  730:	  013D	16 F9			DW	SBAUD		;SET BAUD	8DH
  731:	  013F	19 18			DW	SCLOCK		;CLOCK		8EH
  732:	  0141	0C 2B			DW	SPH1		;PRINT MODE 1	8FH
  733:					;
  734:					; No direct mode from here on
  735:					;
  736:	  0143	08 58			DW	SSTOP		;STOP		90H
  737:	  0145	0E 56			DW	SOT		;ON TIME	91H
  738:	  0147	14 19			DW	SONEXT		;ON EXT INT	92H
  739:	  0149	0B 0E			DW	SRETI		;RET FROM INT	93H
  740:	  014B	0F 05			DW	S_DO		;DO		94H
  741:	  014D	0B CE			DW	SRESTR		;RESTOR 	95H
  742:	  014F	0E FC			DW	WCR		;REM		96H
  743:	  0151	0B 5F			DW	SNEXT		;NEXT		97H
  744:	  0153	14 0F			DW	SONERR		;ON ERROR	98H
  745:	  0155	0C EB			DW	S_ON		;ON		99H
  746:	  0157	0D F5			DW	SINPUT		;INPUT		9AH
  747:	  0159	0B E3			DW	SREAD		;READ		9BH
  748:	  015B	0E EC			DW	FINDCR		;DATA		9CH
  749:	  015D	0B 10			DW	SRETRN		;RETURN 	9DH
  750:	  015F	0A 86			DW	SIF		;IF		9EH
  751:	  0161	0B 2D			DW	SGOSUB		;GOSUB		9FH
  752:	  0163	0A 3C			DW	SFOR		;FOR		A0H
  753:	  0165	0A FC			DW	SWHILE		;WHILE		A1H
  754:	  0167	0B 01			DW	SUNTIL		;UNTIL		A2H
  755:	  0169	17 87			DW	CMND1		;END		A3H
  756:	  016B	18 5B			DW	I_DL		;IDLE		A4H
  757:	  016D	0F E5			DW	ST_A		;STORE AT	A5H
  758:	  016F	0F E9			DW	LD_A		;LOAD AT	A6H
  759:	  0171	04 F8			DW	PGU		;PGM		A7H
  760:	  0173	07 C0			DW	RROM		;RUN A ROM	A9H
  761:					;
  762:					;**************************************************************
  763:					;
  764:	  0175			TOKTAB: ; This is the basic token table
  765:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 15



 Line  I  Addr  Code            Source

  766:					;**************************************************************
  767:					;
  768:					; First the tokens for statements
  769:					;
  770:	  0175	80			DB	80H		;LET TOKEN
  771:	  0176	4C 45 54		DB	'LET'
  772:					;
  773:	  0179	81			DB	81H		;CLEAR TOKEN
  774:	  017A	43 4C 45 41		DB	'CLEAR'
	  017E	52
  775:					;
  776:	  017F	82			DB	82H		;PUSH TOKEN
  777:	  0180	50 55 53 48		DB	'PUSH'
  778:					;
  779:		N      0083	T_GOTO	EQU	83H
  780:					;
  781:	  0184	83			DB	83H		;GO TO TOKEN
  782:	  0185	47 4F 54 4F		DB	'GOTO'
  783:					;
  784:	  0189	84			DB	84H		;TOGGLE TOKEN
  785:	  018A	50 57 4D		DB	'PWM'
  786:					;
  787:	  018D	85			DB	85H		;PRINT HEX MODE 0
  788:	  018E	50 48 30 2E		DB	'PH0.'
  789:					;
  790:	  0192	86			DB	86H		;USER IN TOKEN
  791:	  0193	55 49			DB	'UI'
  792:					;
  793:	  0195	87			DB	87H		;USER OUT TOKEN
  794:	  0196	55 4F			DB	'UO'
  795:					;
  796:	  0198	88			DB	88H		;POP TOKEN
  797:	  0199	50 4F 50		DB	'POP'
  798:					;
  799:	  019C	89			DB	89H		;PRINT TOKEN
  800:	  019D	50 52 49 4E		DB	'PRINT'
	  01A1	54
  801:	  01A2	89			DB	89H
  802:	  01A3	50 2E			DB	'P.'            ;P. ALSO MEANS PRINT
  803:	  01A5	89			DB	89H		;? ALSO
  804:	  01A6	3F			DB	'?'
  805:					;
  806:	  01A7	8A			DB	8AH		;CALL TOKEN
  807:	  01A8	43 41 4C 4C		DB	'CALL'
  808:					;
  809:	  01AC	8B			DB	8BH		;DIMENSION TOKEN
  810:	  01AD	44 49 4D		DB	'DIM'
  811:					;
  812:	  01B0	8C			DB	8CH		;STRING TOKEN
  813:	  01B1	53 54 52 49		DB	'STRING'
	  01B5	4E 47
  814:					;
  815:	  01B7	8D			DB	8DH		;SET BAUD RATE
  816:	  01B8	42 41 55 44		DB	'BAUD'
  817:					;
  818:	  01BC	8E			DB	8EH		;CLOCK

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 16



 Line  I  Addr  Code            Source

  819:	  01BD	43 4C 4F 43		DB	'CLOCK'
	  01C1	4B
  820:					;
  821:	  01C2	8F			DB	8FH		;PRINT HEX MODE 1
  822:	  01C3	50 48 31 2E		DB	'PH1.'
  823:					;
  824:		N      0090	T_STOP	EQU	90H		;STOP TOKEN
  825:	  01C7	90			DB	T_STOP
  826:	  01C8	53 54 4F 50		DB	'STOP'
  827:					;
  828:		N      0090	T_DIR	EQU	T_STOP		;NO DIRECT FROM HERE ON
  829:					;
  830:	  01CC	91			DB	T_STOP+1	;ON TIMER INTERRUPT
  831:	  01CD	4F 4E 54 49		DB	'ONTIME'
	  01D1	4D 45
  832:					;
  833:	  01D3	92			DB	T_STOP+2	;ON EXTERNAL INTERRUPT
  834:	  01D4	4F 4E 45 58		DB	'ONEX1'
	  01D8	31
  835:					;
  836:	  01D9	93			DB	T_STOP+3	;RETURN FROM INTERRUPT
  837:	  01DA	52 45 54 49		DB	'RETI'
  838:					;
  839:	  01DE	94			DB	T_STOP+4	;DO TOKEN
  840:	  01DF	44 4F			DB	'DO'
  841:					;
  842:	  01E1	95			DB	T_STOP+5	;RESTORE TOKEN
  843:	  01E2	52 45 53 54		DB	'RESTORE'
	  01E6	4F 52 45
  844:					;
  845:		N      0096	T_REM	EQU	T_STOP+6	;REMARK TOKEN
  846:	  01E9	96			DB	T_REM
  847:	  01EA	52 45 4D		DB	'REM'
  848:					;
  849:	  01ED	97			DB	T_REM+1 	;NEXT TOKEN
  850:	  01EE	4E 45 58 54		DB	'NEXT'
  851:					;
  852:	  01F2	98			DB	T_REM+2 	;ON ERROR TOKEN
  853:	  01F3	4F 4E 45 52		DB	'ONERR'
	  01F7	52
  854:					;
  855:	  01F8	99			DB	T_REM+3 	;ON TOKEN
  856:	  01F9	4F 4E			DB	'ON'
  857:					;
  858:	  01FB	9A			DB	T_REM+4 	;INPUT
  859:	  01FC	49 4E 50 55		DB	'INPUT'
	  0200	54
  860:					;
  861:	  0201	9B			DB	T_REM+5 	;READ
  862:	  0202	52 45 41 44		DB	'READ'
  863:					;
  864:		N      009C	T_DATA	EQU	T_REM+6 	;DATA
  865:	  0206	9C			DB	T_DATA
  866:	  0207	44 41 54 41		DB	'DATA'
  867:					;
  868:	  020B	9D			DB	T_DATA+1	;RETURN

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 17



 Line  I  Addr  Code            Source

  869:	  020C	52 45 54 55		DB	'RETURN'
	  0210	52 4E
  870:					;
  871:	  0212	9E			DB	T_DATA+2	;IF
  872:	  0213	49 46			DB	'IF'
  873:					;
  874:		N      009F	T_GOSB	EQU	T_DATA+3	;GOSUB
  875:	  0215	9F			DB	T_GOSB
  876:	  0216	47 4F 53 55		DB	'GOSUB'
	  021A	42
  877:					;
  878:	  021B	A0			DB	T_GOSB+1	;FOR
  879:	  021C	46 4F 52		DB	'FOR'
  880:					;
  881:	  021F	A1			DB	T_GOSB+2	;WHILE
  882:	  0220	57 48 49 4C		DB	'WHILE'
	  0224	45
  883:					;
  884:	  0225	A2			DB	T_GOSB+3	;UNTIL
  885:	  0226	55 4E 54 49		DB	'UNTIL'
	  022A	4C
  886:					;
  887:	  022B	A3			DB	T_GOSB+4	;END
  888:	  022C	45 4E 44		DB	'END'
  889:					;
  890:		N      00A4	T_LAST	EQU	T_GOSB+5	;LAST INITIAL TOKEN
  891:					;
  892:		N      00A4	T_TAB	EQU	T_LAST		;TAB TOKEN
  893:	  022F	A4			DB	T_TAB
  894:	  0230	54 41 42		DB	'TAB'
  895:					;
  896:		N      00A5	T_THEN	EQU	T_LAST+1	;THEN TOKEN
  897:	  0233	A5			DB	T_THEN
  898:	  0234	54 48 45 4E		DB	'THEN'
  899:					;
  900:		N      00A6	T_TO	EQU	T_LAST+2	;TO TOKEN
  901:	  0238	A6			DB	T_TO
  902:	  0239	54 4F			DB	'TO'
  903:					;
  904:		N      00A7	T_STEP	EQU	T_LAST+3	;STEP TOKEN
  905:	  023B	A7			DB	T_STEP
  906:	  023C	53 54 45 50		DB	'STEP'
  907:					;
  908:		N      00A8	T_ELSE	EQU	T_LAST+4	;ELSE TOKEN
  909:	  0240	A8			DB	T_ELSE
  910:	  0241	45 4C 53 45		DB	'ELSE'
  911:					;
  912:		N      00A9	T_SPC	EQU	T_LAST+5	;SPACE TOKEN
  913:	  0245	A9			DB	T_SPC
  914:	  0246	53 50 43		DB	'SPC'
  915:					;
  916:		N      00AA	T_CR	EQU	T_LAST+6
  917:	  0249	AA			DB	T_CR
  918:	  024A	43 52			DB	'CR'
  919:					;
  920:	  024C	AB			DB	T_CR+1

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 18



 Line  I  Addr  Code            Source

  921:	  024D	49 44 4C 45		DB	'IDLE'
  922:					;
  923:	  0251	AC			DB	T_CR+2
  924:	  0252	53 54 40		DB	'ST@'
  925:					;
  926:	  0255	AD			DB	T_CR+3
  927:	  0256	4C 44 40		DB	'LD@'
  928:					;
  929:	  0259	AE			DB	T_CR+4
  930:	  025A	50 47 4D		DB	'PGM'
  931:					;
  932:	  025D	AF			DB	T_CR+5
  933:	  025E	52 52 4F 4D		DB	'RROM'
  934:					;
  935:					; Operator tokens
  936:					;
  937:		N      00E0	T_LPAR	EQU	0E0H		;LEFT PAREN
  938:	  0262	E0			DB	T_LPAR
  939:	  0263	28			DB	'('
  940:					;
  941:	  0264	E1			DB	T_LPAR+1	;EXPONENTIAN
  942:	  0265	2A 2A			DB	'**'
  943:					;
  944:	  0267	E2			DB	T_LPAR+2	;FP MULTIPLY
  945:	  0268	2A			DB	'*'
  946:					;
  947:		N      00E3	T_ADD	EQU	T_LPAR+3
  948:	  0269	E3			DB	T_LPAR+3	;ADD TOKEN
  949:	  026A	2B			DB	'+'
  950:					;
  951:	  026B	E4			DB	T_LPAR+4	;DIVIDE TOKEN
  952:	  026C	2F			DB	'/'
  953:					;
  954:		N      00E5	T_SUB	EQU	T_LPAR+5	;SUBTRACT TOKEN
  955:	  026D	E5			DB	T_SUB
  956:	  026E	2D			DB	'-'
  957:					;
  958:	  026F	E6			DB	T_LPAR+6	;LOGICAL EXCLUSIVE OR
  959:	  0270	2E 58 4F 52		DB	'.XOR.'
	  0274	2E
  960:					;
  961:	  0275	E7			DB	T_LPAR+7	;LOGICAL AND
  962:	  0276	2E 41 4E 44		DB	'.AND.'
	  027A	2E
  963:					;
  964:	  027B	E8			DB	T_LPAR+8	;LOGICAL OR
  965:	  027C	2E 4F 52 2E		DB	'.OR.'
  966:					;
  967:		N      00E9	T_NEG	EQU	T_LPAR+9
  968:					;
  969:		N      00EA	T_EQU	EQU	T_LPAR+10	;EQUAL
  970:	  0280	EA			DB	T_EQU
  971:	  0281	3D			DB	'='
  972:					;
  973:	  0282	EB			DB	T_LPAR+11	;GREATER THAN OR EQUAL
  974:	  0283	3E 3D			DB	'>='

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 19



 Line  I  Addr  Code            Source

  975:					;
  976:	  0285	EC			DB	T_LPAR+12	;LESS THAN OR EQUAL
  977:	  0286	3C 3D			DB	'<='
  978:					;
  979:	  0288	ED			DB	T_LPAR+13	;NOT EQUAL
  980:	  0289	3C 3E			DB	'<>'
  981:					;
  982:	  028B	EE			DB	T_LPAR+14	;LESS THAN
  983:	  028C	3C			DB	'<'
  984:					;
  985:	  028D	EF			DB	T_LPAR+15	;GREATER THAN
  986:	  028E	3E			DB	'>'
  987:					;
  988:					;
  989:		N      00B0	T_UOP	EQU	0B0H		;UNARY OP BASE TOKEN
  990:					;
  991:	  028F	B0			DB	T_UOP		;ABS TOKEN
  992:	  0290	41 42 53		DB	'ABS'
  993:					;
  994:	  0293	B1			DB	T_UOP+1 	;INTEGER TOKEN
  995:	  0294	49 4E 54		DB	'INT'
  996:					;
  997:	  0297	B2			DB	T_UOP+2 	;SIGN TOKEN
  998:	  0298	53 47 4E		DB	'SGN'
  999:					;
 1000:	  029B	B3			DB	T_UOP+3 	;GET TOKEN
 1001:	  029C	4E 4F 54		DB	'NOT'
 1002:					;
 1003:	  029F	B4			DB	T_UOP+4 	;COSINE TOKEN
 1004:	  02A0	43 4F 53		DB	'COS'
 1005:					;
 1006:	  02A3	B5			DB	T_UOP+5 	;TANGENT TOKEN
 1007:	  02A4	54 41 4E		DB	'TAN'
 1008:					;
 1009:	  02A7	B6			DB	T_UOP+6 	;SINE TOKEN
 1010:	  02A8	53 49 4E		DB	'SIN'
 1011:					;
 1012:	  02AB	B7			DB	T_UOP+7 	;SQUARE ROOT TOKEN
 1013:	  02AC	53 51 52		DB	'SQR'
 1014:					;
 1015:	  02AF	B8			DB	T_UOP+8 	;CBYTE TOKEN
 1016:	  02B0	43 42 59		DB	'CBY'
 1017:					;
 1018:	  02B3	B9			DB	T_UOP+9 	;EXP (E TO THE X) TOKEN
 1019:	  02B4	45 58 50		DB	'EXP'
 1020:					;
 1021:	  02B7	BA			DB	T_UOP+10
 1022:	  02B8	41 54 4E		DB	'ATN'
 1023:					;
 1024:	  02BB	BB			DB	T_UOP+11
 1025:	  02BC	4C 4F 47		DB	'LOG'
 1026:					;
 1027:	  02BF	BC			DB	T_UOP+12	;DBYTE TOKEN
 1028:	  02C0	44 42 59		DB	'DBY'
 1029:					;
 1030:	  02C3	BD			DB	T_UOP+13	;XBYTE TOKEN

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 20



 Line  I  Addr  Code            Source

 1031:	  02C4	58 42 59		DB	'XBY'
 1032:					;
 1033:		N      00BE	T_ULAST EQU	T_UOP+14	;LAST OPERATOR NEEDING PARENS
 1034:					;
 1035:	  02C7	BE			DB	T_ULAST
 1036:	  02C8	50 49			DB	'PI'
 1037:					;
 1038:	  02CA	BF			DB	T_ULAST+1	;RND TOKEN
 1039:	  02CB	52 4E 44		DB	'RND'
 1040:					;
 1041:	  02CE	C0			DB	T_ULAST+2	;GET TOKEN
 1042:	  02CF	47 45 54		DB	'GET'
 1043:					;
 1044:	  02D2	C1			DB	T_ULAST+3	;FREE TOKEN
 1045:	  02D3	46 52 45 45		DB	'FREE'
 1046:					;
 1047:	  02D7	C2			DB	T_ULAST+4	;LEN TOKEN
 1048:	  02D8	4C 45 4E		DB	'LEN'
 1049:					;
 1050:		N      00C3	T_XTAL	EQU	T_ULAST+5	;CRYSTAL TOKEN
 1051:	  02DB	C3			DB	T_XTAL
 1052:	  02DC	58 54 41 4C		DB	'XTAL'
 1053:					;
 1054:		N      00C4	T_MTOP	EQU	T_ULAST+6	;MTOP
 1055:	  02E0	C4			DB	T_MTOP
 1056:	  02E1	4D 54 4F 50		DB	'MTOP'
 1057:					;
 1058:		N      00C6	T_IE	EQU	T_ULAST+8	;IE REGISTER
 1059:	  02E5	C6			DB	T_IE
 1060:	  02E6	49 45			DB	'IE'
 1061:					;
 1062:		N      00C7	T_IP	EQU	T_ULAST+9	;IP REGISTER
 1063:	  02E8	C7			DB	T_IP
 1064:	  02E9	49 50			DB	'IP'
 1065:					;
 1066:		N      00C8	TMR0	EQU	T_ULAST+10	;TIMER 0
 1067:	  02EB	C8			DB	TMR0
 1068:	  02EC	54 49 4D 45		DB	'TIMER0'
	  02F0	52 30
 1069:					;
 1070:		N      00C9	TMR1	EQU	T_ULAST+11	;TIMER 1
 1071:	  02F2	C9			DB	TMR1
 1072:	  02F3	54 49 4D 45		DB	'TIMER1'
	  02F7	52 31
 1073:					;
 1074:		N      00CA	TMR2	EQU	T_ULAST+12	;TIMER 2
 1075:	  02F9	CA			DB	TMR2
 1076:	  02FA	54 49 4D 45		DB	'TIMER2'
	  02FE	52 32
 1077:					;
 1078:		N      00C5	T_TIME	EQU	T_ULAST+7	;TIME
 1079:	  0300	C5			DB	T_TIME
 1080:	  0301	54 49 4D 45		DB	'TIME'
 1081:					;
 1082:		N      00CB	TT2C	EQU	T_ULAST+13	;T2CON
 1083:	  0305	CB			DB	TT2C

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 21



 Line  I  Addr  Code            Source

 1084:	  0306	54 32 43 4F		DB	'T2CON'
	  030A	4E
 1085:					;
 1086:		N      00CC	TTC	EQU	T_ULAST+14	;TCON
 1087:	  030B	CC			DB	TTC
 1088:	  030C	54 43 4F 4E		DB	'TCON'
 1089:					;
 1090:		N      00CD	TTM	EQU	T_ULAST+15	;TMOD
 1091:	  0310	CD			DB	TTM
 1092:	  0311	54 4D 4F 44		DB	'TMOD'
 1093:					;
 1094:		N      00CE	TRC2	EQU	T_ULAST+16	;RCAP2
 1095:	  0315	CE			DB	TRC2
 1096:	  0316	52 43 41 50		DB	'RCAP2'
	  031A	32
 1097:					;
 1098:		N      00CF	T_P1	EQU	T_ULAST+17	;P1
 1099:	  031B	CF			DB	T_P1
 1100:	  031C	50 4F 52 54		DB	'PORT1'
	  0320	31
 1101:					;
 1102:		N      00D0	T_PC	EQU	T_ULAST+18	;PCON
 1103:	  0321	D0			DB	T_PC
 1104:	  0322	50 43 4F 4E		DB	'PCON'
 1105:					;
 1106:		N      00D1	T_ASC	EQU	T_ULAST+19	;ASC TOKEN
 1107:	  0326	D1			DB	T_ASC
 1108:	  0327	41 53 43 28		DB	'ASC('
 1109:					;
 1110:		N      00D2	T_USE	EQU	T_ULAST+20	;USING TOKEN
 1111:	  032B	D2			DB	T_USE
 1112:	  032C	55 53 49 4E		DB	'USING('
	  0330	47 28
 1113:	  0332	D2			DB	T_USE
 1114:	  0333	55 2E 28		DB	'U.('
 1115:					;
 1116:		N      00D3	T_CHR	EQU	T_ULAST+21	;CHR TOKEN
 1117:	  0336	D3			DB	T_CHR
 1118:	  0337	43 48 52 28		DB	'CHR('
 1119:					;
 1120:		N      00F0	T_CMND	EQU	0F0H		;COMMAND BASE
 1121:					;
 1122:	  033B	F0			DB	0F0H		;RUN TOKEN
 1123:	  033C	52 55 4E		DB	'RUN'
 1124:					;
 1125:	  033F	F1			DB	0F1H		;LIST TOKEN
 1126:	  0340	4C 49 53 54		DB	'LIST'
 1127:					;
 1128:	  0344	F2			DB	0F2H		;NULL TOKEN
 1129:	  0345	4E 55 4C 4C		DB	'NULL'
 1130:					;
 1131:	  0349	F3			DB	0F3H		;NEW TOKEN
 1132:	  034A	4E 45 57		DB	'NEW'
 1133:					;
 1134:	  034D	F4			DB	0F4H		;CONTINUE TOKEN
 1135:	  034E	43 4F 4E 54		DB	'CONT'

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 22



 Line  I  Addr  Code            Source

 1136:					;
 1137:	  0352	F5			DB	0F5H		;PROGRAM TOKEN
 1138:	  0353	50 52 4F 47		DB	'PROG'
 1139:					;
 1140:	  0357	F6			DB	0F6H		;TRANSFER TOKEN
 1141:	  0358	58 46 45 52		DB	'XFER'
 1142:					;
 1143:	  035C	F7			DB	0F7H		;RAM MODE
 1144:	  035D	52 41 4D		DB	'RAM'
 1145:					;
 1146:	  0360	F8			DB	0F8H		;ROM MODE
 1147:	  0361	52 4F 4D		DB	'ROM'
 1148:				;
 1149:				;
 1150:				;*****************************************************************************
 1151:				;****** Disable Intel programming for to get room ****************************
 1152:				;
 1153:				;	DB	0F9H		;INTELLIGENT PROM PROGRAMMING
 1154:				;	DB	'FPROG'
 1155:				;
 1156:				;*****************************************************************************
 1157:				;****** New command "ERASE" to fill an EEPROM with 0FFH  *********************
 1158:				;****** Boehling 3 ***********************************************************
 1159:				;
 1160:	  0364	F9			db	0F9H		;Erase an EEPROM
 1161:	  0365	45 52 41 53		db	'ERASE'
	  0369	45
 1162:				;
 1163:				;*****************************************************************************
 1164:				;****** Karmann 2 Bugfix *****************************************************
 1165:				;
 1166:	  036A	FE			db	0feh		;dummy token and
 1167:	  036B	7F			db	07fh		;unused dummy char
 1168:				;
 1169:				;****** continue with original code: *****************************************
 1170:				;
 1171:	  036C	FF			DB	0FFH		;END OF TABLE
 1172:					;
 1173:	  036D	45 58 54 52	EIG:	DB	'EXTRA IGNORED"'
	  0371	41 20 49 47
	  0375	4E 4F 52 45
	  0379	44 22
 1174:					;
 1175:	  037B	41 2D 53 54	EXA:	DB	'A-STACK"'
	  037F	41 43 4B 22
 1176:					;
 1177:	  0383	43 2D 53 54	EXC:	DB	'C-STACK"'
	  0387	41 43 4B 22
 1178:					;
 1179:					;**************************************************************
 1180:					;
 1181:	  038B			CRST:	; This performs system initialzation, it was moved here so the
 1182:					; new power on reset functions could be tested in an 8751.
 1183:					;
 1184:					;**************************************************************
 1185:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 23



 Line  I  Addr  Code            Source

 1186:					; First, initialize SFR's
 1187:					;
 1188:	  038B	75 98 5A		MOV	SCON,#5AH	;INITIALIZE SFR'S
 1189:				;
 1190:				;*****************************************************************************
 1191:				;****** Use XTAL up to 47 MHz ************************************************
 1192:				;****** Wulf 2 ***************************************************************
 1193:				;
 1194:				;	MOV	TMOD,#10H
 1195:				;
 1196:	  038E	75 89 11		mov	TMOD,#11H	;Use 16 bit mode of timer 0
 1197:				;
 1198:				;*****************************************************************************
 1199:				;
 1200:	  0391	75 88 54		MOV	TCON,#54H
 1201:	  0394	75 C8 34		MOV	T2CON,#34H
 1202:				;	DB	75H		;MOV DIRECT, # OP CODE
 1203:				;	DB	0C8H		;T2CON LOCATION
 1204:				;	DB	34H		;CONFIGURATION BYTE
 1205:					;
 1206:	  0397	90 20 01		MOV	DPTR,#2001H	;READ CODE AT 2001H
 1207:	  039A	E4			CLR	A
 1208:	  039B	93			MOVC	A,@A+DPTR
 1209:	  039C	B4 AA 03		CJNE	A,#0AAH,CRST1	;IF IT IS AN AAH, DO USER RESET
 1210:	  039F	12 20 90		LCALL	2090H
 1211:					;
 1212:	  03A2	78 FF		CRST1:	MOV	R0,#IRAMTOP	;PUT THE TOP OF RAM IN R0
 1213:	  03A4	E4			CLR	A		;ZERO THE ACC
 1214:					;
 1215:	  03A5	F6		CRST2:	MOV	@R0,A		;CLEAR INTERNAL MEMORY
 1216:	  03A6	D8 FD			DJNZ	R0,CRST2	;LOOP TIL DONE
 1217:					;
 1218:					; Now, test the external memory
 1219:					;
 1220:	  03A8	75 3E 4D		MOV	SPSAV,#CMNDSP	;SET UP THE STACK
 1221:	  03AB	85 3E 81		MOV	SP,SPSAV
 1222:				;
 1223:				;*****************************************************************************
 1224:				;****** Karmann 1 Bugfix *****************************************************
 1225:				;
 1226:	  03AE	12 17 E0		lcall	TEST_USER	;chek for user command extensions
 1227:				;
 1228:				;****** continue with original code: *****************************************
 1229:				;
 1230:	  03B1	75 13 80		MOV	BOFAH,#HIGH ROMADR
 1231:	  03B4	75 14 11		MOV	BOFAL,#LOW ROMADR+17
 1232:	  03B7	90 80 00		MOV	DPTR,#ROMADR	;GET THE BYTE AT 8000H
 1233:	  03BA	E0			MOVX	A,@DPTR
 1234:	  03BB	C3			CLR	C
 1235:	  03BC	94 31			SUBB	A,#31H		;FOR BIAS
 1236:	  03BE	F5 45			MOV	MT1,A		;SAVE IN DIRECT MATH LOC
 1237:	  03C0	C2 E2			CLR	ACC.2		;SAVE FOR RESET
 1238:	  03C2	FF			MOV	R7,A		;SAVE IT IN R7
 1239:	  03C3	A3			INC	DPTR
 1240:	  03C4	B1 BA			ACALL	L31DPI		;SAVE BAUD RATE
 1241:	  03C6	12 08 85		LCALL	RCL

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 24



 Line  I  Addr  Code            Source

 1242:	  03C9	A3			INC	DPTR		;GET MEMTOP
 1243:	  03CA	B1 BA			ACALL	L31DPI
 1244:	  03CC	90 00 5F		MOV	DPTR,#5FH	;READ THE EXTERNAL BYTE
 1245:	  03CF	E0			MOVX	A,@DPTR
 1246:	  03D0	90 00 00		MOV	DPTR,#0 	;ESTABLISH BASE FOR CLEAR
 1247:	  03D3	B4 A5 08		CJNE	A,#0A5H,CRS	;Erase the memory
 1248:	  03D6	E5 45			MOV	A,MT1
 1249:	  03D8	C2 E0			CLR	ACC.0		;CLEAR BIT ONE
 1250:	  03DA	64 04			XRL	A,#4H
 1251:	  03DC	60 2C			JZ	CR2
 1252:					;
 1253:	  03DE	BF 02 02	CRS:	CJNE	R7,#2,CRS1
 1254:	  03E1	80 03			SJMP	CRS2
 1255:	  03E3	BF 03 04	CRS1:	CJNE	R7,#3,CR0
 1256:	  03E6	D1 7D		CRS2:	ACALL	CL_1
 1257:	  03E8	80 14			SJMP	CR1
 1258:					;
 1259:	  03EA	AB 83		CR0:	MOV	R3,DPH		;SAVE THE DPTR
 1260:	  03EC	A9 82			MOV	R1,DPL
 1261:	  03EE	A3			INC	DPTR
 1262:	  03EF	74 5A			MOV	A,#5AH
 1263:	  03F1	F0			MOVX	@DPTR,A 	;Test external memory
 1264:	  03F2	E0			MOVX	A,@DPTR
 1265:	  03F3	B4 5A 08		CJNE	A,#5AH,CR1
 1266:	  03F6	E4			CLR	A
 1267:	  03F7	F0			MOVX	@DPTR,A
 1268:				;
 1269:				;*****************************************************************************
 1270:				;******* Skowronek alterations to programm EEPROM's in state of UV-EPROM's ***
 1271:				;
 1272:				;	CJNE	R3,#0E0H,CR0
 1273:				;
 1274:	  03F8	BB 7F EF		CJNE	R3,#HIGH ROMADR-1,CR0	;Stop the test at 8000H because
 1275:	  03FB	B9 FE EC		CJNE	R1,#LOW ROMADR-2,CR0	;EEPROM starts here
 1276:				;
 1277:				;*****************************************************************************
 1278:				;
 1279:	  03FE	BB 03 00	CR1:	CJNE	R3,#03H,CR11	;NEED THIS MUCH RAM
 1280:	  0401	40 88		CR11:	JC	CRST
 1281:	  0403	90 01 0A		MOV	DPTR,#MEMTOP	;SAVE MEMTOP
 1282:	  0406	D1 03			ACALL	S31DP2		;SAVE MEMTOP AND SEED RCELL
 1283:	  0408	D1 5C			ACALL	CNEW		;CLEAR THE MEMORY AND SET UP POINTERS
 1284:					;
 1285:	  040A	D1 6F		CR2:	ACALL	RC1		;SET UP STACKS IF NOT DONE
 1286:					;
 1287:	  040C	12 16 57		LCALL	AXTAL0		;DO THE CRYSTAL
 1288:	  040F	E5 45			MOV	A,MT1		;GET THE RESET BYTE
 1289:	  0411	B4 05 03		CJNE	A,#5,CR20
 1290:	  0414	12 40 39		LCALL	4039H
 1291:	  0417	50 0D		CR20:	JNC	BG1		;CHECK FOR 0,1,2,3, OR 4
 1292:	  0419	30 E0 4B		JNB	ACC.0,BG3	;NO RUN IF WRONG TYPE
 1293:	  041C	90 80 10		MOV	DPTR,#ROMADR+16
 1294:	  041F	E0			MOVX	A,@DPTR 	;READ THE BYTE
 1295:	  0420	B4 55 44		CJNE	A,#55H,BG3
 1296:	  0423	02 08 02		LJMP	CRUN
 1297:				;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 25



 Line  I  Addr  Code            Source

 1298:				;*****************************************************************************
 1299:				;******* New baudrate detection **********************************************
 1300:				;******* Wulf 3 alteration 1 *************************************************
 1301:				;
 1302:				;BG1:	 CLR	 A		 ;DO BAUD RATE
 1303:				;	 MOV	 R3,A
 1304:				;	 MOV	 R1,A
 1305:				;	 MOV	 R0,#4
 1306:				;	 JB	 RXD,$		 ;LOOP UNTIL A CHARACTER IS RECEIVED
 1307:				;	;
 1308:				;BG2:	 DJNZ	 R0,$		 ;FOUR CLOCKS, IN LOOP
 1309:				;	 CALL	 DEC3211	 ;NINE CLOCKS
 1310:				;	 MOV	 R0,#2		 ;ONE CLOCK
 1311:				;	 JNB	 RXD,BG2	 ;TWO CLOCKS, LOOP UNTIL DONE
 1312:				;	 JB	 RXD,$		 ;WAIT FOR STOP CHARACTER TO END
 1313:				;	 JNB	 RXD,$
 1314:				;
 1315:				;*****************************************************************************
 1316:				;******* New processor type detection ****************************************
 1317:				;******* Wulf 4 **************************************************************
 1318:				;
 1319:	  0426	E4		BG1:	clr	a
 1320:	  0427	F5 C8			mov	t2con,a
 1321:	  0429	75 CD FF		mov	TH2,#0FFh
 1322:	  042C	75 CC F8		mov	TL2,#0F8h
 1323:	  042F	20 B0 FD		jb	rxd,$
 1324:	  0432	75 C8 05		mov	t2con,#5	;Timer2 start
 1325:	  0435	30 B0 FD		jnb	rxd,$
 1326:	  0438	F5 C8			mov	t2con,a 	;Timer2 stop
 1327:	  043A	20 B0 FD		jb	rxd,$
 1328:	  043D	30 B0 FD		jnb	rxd,$
 1329:	  0440	12 1F 5C		call	sercalc 	;r3=timer2 MSB default
 1330:					;
 1331:	  0443	B5 D8 0C		cjne	a,ADCON,BG10	;jump if A/D processor like 805x5
 1332:	  0446	E5 AA		BG14:	mov	a,S0RELL
 1333:	  0448	B4 D9 16		cjne	a,#B9600,BG2	;jump if not 805x7A
 1334:	  044B	EB			mov	a,r3
 1335:	  044C	52 BA			anl	S0RELH,a
 1336:	  044E	89 AA			mov	S0RELL,r1	;start Baudratetimer 805X7A
 1337:	  0450	80 03			sjmp	BG11
 1338:					;
 1339:	  0452	B9 D9 05	BG10:	cjne	r1,#B9600,BG12	;jump if wrong fast baud rate
 1340:	  0455	43 87 80	BG11:	orl	PCON0,#080h	;setb smod for fast mode
 1341:	  0458	80 03			sjmp	BG13
 1342:					;
 1343:	  045A	B9 B2 E9	BG12:	cjne	r1,#B4800,BG14	;jump if wrong slow baudrate
 1344:	  045D	D2 DF		BG13:	setb	BD		;enable baudrategenerator
 1345:	  045F	80 03			sjmp	BG15
 1346:					;
 1347:	  0461	75 C8 34	BG2:	mov	t2con,#34h	;configure Timer2 as baudrate generator
 1348:	  0464	12 08 85	BG15:	CALL	RCL		;LOAD THE TIMER
 1349:				;
 1350:				;****** Original code from here **********************************************
 1351:				;
 1352:	  0467	90 1F D3	BG3:	MOV	DPTR,#S_N	;GET THE MESSAGE
 1353:	  046A	D1 AD			ACALL	CRP		;PRINT IT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 26



 Line  I  Addr  Code            Source

 1354:	  046C	02 17 7F		LJMP	CRAM
 1355:					;
 1356:					;***************************************************************
 1357:					;
 1358:					; CIPROG AND CPROG - Program a prom
 1359:					;
 1360:					;***************************************************************
 1361:					;
 1362:	  046F	7F 00		PG8:	MOV	R7,#00H 	;PROGRAM ONE BYTE AT A TIME
 1363:	  0471	7E 01			MOV	R6,#01H
 1364:	  0473	7A 7F			MOV	R2,#HIGH ROMADR-1
 1365:	  0475	78 FF			MOV	R0,#LOW ROMADR-1;LOAD PROM ADDRESS
 1366:	  0477	91 B5			ACALL	PG101
 1367:	  0479	0E			INC	R6
 1368:	  047A	E5 CB			MOV	A,RCAPH2
 1369:				;	DB	0E5H		;MOV A DIRECT OP CODE
 1370:				;	DB	0CBH		;ADDRESS OF R2CAP HIGH
 1371:	  047C	91 B5			ACALL	PG101
 1372:	  047E	E5 CA			MOV	A,RCAPL2
 1373:				;	DB	0E5H		;MOV A, DIRECT OP CODE
 1374:				;	DB	0CAH		;R2CAP LOW
 1375:	  0480	7E 03			MOV	R6,#3
 1376:	  0482	79 09			MOV	R1,#LOW MEMTOP-1
 1377:	  0484	7B 01			MOV	R3,#HIGH MEMTOP
 1378:	  0486	91 B5			ACALL	PG101		;SAVE MEMTOP
 1379:	  0488	80 29			SJMP	PGR
 1380:				;
 1381:				;
 1382:				;*****************************************************************************
 1383:				;****** Skowronek alterations to programm EEPROM's in state of UV-EPROM's ****
 1384:				;****** Support the "PGM" statement was added by D. Wulf *********************
 1385:				;****** Disable Intel programming and code optimize by H.-J. Boehling ********
 1386:				;
 1387:				;CIPROG: MOV	DPTR,#IPROGS	;LOAD IPROG LOCATION
 1388:				;	SETB	INTELB
 1389:				;	SJMP	CPROG1		;GO DO PROG
 1390:				;	;
 1391:				;CPROG: MOV	DPTR,#PROGS	;LOAD PROG LOCATION
 1392:				;	CLR	INTELB
 1393:				;	;
 1394:				;CPROG1: ACALL	LD_T		;LOAD THE TIMER
 1395:				;	CLR	PROMV		;TURN ON THE PROM VOLTAGE
 1396:				;	CALL	DELTST		;SEE IF A CR
 1397:				;	JNZ	PG8		;SAVE TIMER IF SO
 1398:				;	MOV	R4,#0FEH
 1399:				;	SETB	INBIT
 1400:				;	ACALL	ROMFD		;GET THE ROM ADDRESS OF THE LAST LOCATION
 1401:				;	CALL	TEMPD		;SAVE THE ADDRESS
 1402:				;	MOV	A,R4		;GET COUNT
 1403:				;	CPL	A
 1404:				;	CALL	TWO_R2		;PUT IT ON THE STACK
 1405:				;	CALL	FP_BASE7	;OUTPUT IT
 1406:				;	ACALL	CCAL		;GET THE PROGRAM
 1407:				;	ACALL	CRLF		;DO CRLF
 1408:				;	MOV	R0,TEMP4	;GET ADDRESS
 1409:				;	MOV	R2,TEMP5

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 27



 Line  I  Addr  Code            Source

 1410:				;	MOV	A,#55H		;LOAD SIGNIFIER
 1411:				;	INC	R6		;LOAD LEN + 1
 1412:				;	CJNE	R6,#00,CPROG2
 1413:				;	INC	R7
 1414:				;CPROG2: ACALL	 PG102
 1415:				;
 1416:				;PGR:	SETB	PROMV
 1417:				;	AJMP	C_K
 1418:				;
 1419:				;PG1:	MOV	P2,R3		;GET THE BYTE TO PROGRAM
 1420:				;	MOVX	A,@R1
 1421:				;PG101:  LCALL	 INC3210	 ;BUMP POINTERS
 1422:				;PG102:  MOV	 R5,#1		 ;SET UP INTELLIGENT COUMTER
 1423:				;
 1424:				;PG2:	MOV	R4,A		;SAVE THE BYTE IN R4
 1425:				;	ACALL	PG7		;PROGRAM THE BYTE
 1426:				;	ACALL	PG9
 1427:				;	JB	INTELB,PG4	;SEE IF INTELLIGENT PROGRAMMING
 1428:				;
 1429:				;PG3:	XRL	A,R4
 1430:				;	JNZ	PG6		;ERROR IF NOT THE SAME
 1431:				;	CALL	DEC76		;BUMP THE COUNTERS
 1432:				;	JNZ	PG1		;LOOP IF NOT DONE
 1433:				;	ANL	PSW,#11100111B	;INSURE RB0
 1434:				;PG31:	 RET
 1435:				;
 1436:				;PG4:	XRL	A,R4		;SEE IF PROGRAMMED
 1437:				;	JNZ	PG5		;JUMP IF NOT
 1438:				;	MOV	A,R4		;GET THE DATA BACK
 1439:				;	ACALL	PG7		;PROGRAM THE LOCATION
 1440:				;PG41:	 ACALL	 ZRO		 ;AGAIN
 1441:				;	ACALL	ZRO		;AND AGAIN
 1442:				;	ACALL	ZRO		;AND AGAIN
 1443:				;	DJNZ	R5,PG41 	;KEEP DOING IT
 1444:				;	ACALL	PG9		;RESET PROG
 1445:				;	SJMP	PG3		;FINISH THE LOOP
 1446:				;
 1447:				;PG5:	INC	R5		;BUMP THE COUNTER
 1448:				;	MOV	A,R4		;GET THE BYTE
 1449:				;	CJNE	R5,#25,PG2	;SEE IF TRIED 25 TIMES
 1450:				;
 1451:				;PG6:	SETB	PROMV		;TURN OFF PROM VOLTAGE
 1452:				;	MOV	PSW,#0		;INSURE RB0
 1453:				;	JNB	DIRF,PG31	;EXIT IF IN RUN MODE
 1454:				;	MOV	DPTR,#E16X	;PROGRAMMING ERROR
 1455:				;
 1456:				;ERRLK: LJMP	ERROR		;PROCESS THE ERROR
 1457:				;
 1458:				;PG7:	MOV	P0,R0		;SET UP THE PORTS
 1459:				;	MOV	P2,R2		;LATCH LOW ORDER ADDRESS
 1460:				;	ACALL	PG11		;DELAY FOR 8748/9
 1461:				;	CLR	ALED
 1462:				;	MOV	P0,A		;PUT DATA ON THE PORT
 1463:				;	;
 1464:				;ZRO:	NOP			;SETTLEING TIME + FP ZERO
 1465:				;	NOP

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 28



 Line  I  Addr  Code            Source

 1466:				;	NOP
 1467:				;	NOP
 1468:				;	NOP
 1469:				;	NOP
 1470:				;	ACALL	PG11		;DELAY A WHILE
 1471:				;	CLR	PROMP		;START PROGRAMMING
 1472:				;	ACALL	TIMER_LOAD	;START THE TIMER
 1473:				;	JNB	TF1,$		;WAIT FOR PART TO PROGRAM
 1474:				;	RET			;EXIT
 1475:				;
 1476:				;PG9:	SETB	PROMP
 1477:				;	ACALL	PG11		;DELAY FOR A WHILE
 1478:				;	JNB	P3.2,$		;LOOP FOR EEPROMS
 1479:				;	MOV	P0,#0FFH
 1480:				;	CLR	P3.7		;LOWER READ
 1481:				;	ACALL	PG11
 1482:				;	MOV	A,P0		;READ THE PORT
 1483:				;	SETB	P3.7
 1484:				;	SETB	ALED
 1485:				;	RET
 1486:				;
 1487:				;PG11:	MOV	TEMP5,#12	;DELAY 30uS AT 12 MHZ
 1488:				;	DJNZ	TEMP5,$
 1489:				;	RET
 1490:				;
 1491:				;	;**************************************************************
 1492:				;	;
 1493:				;PGU:	;PROGRAM A PROM FOR THE USER
 1494:				;	;
 1495:				;	;**************************************************************
 1496:				;
 1497:				;	CLR	PROMV		;TURN ON THE VOLTAGE
 1498:				;	MOV	PSW,#00011000B	;SELECT RB3
 1499:				;	ACALL	PG1		;DO IT
 1500:				;	SETB	PROMV		;TURN IT OFF
 1501:				;	RET
 1502:				;
 1503:				;****** alteredet code starts here: ******************************************
 1504:				;
 1505:	  048A	90 01 28	CPROG:	MOV	DPTR,#PROGS	;LOAD PROG LOCATION
 1506:					;
 1507:	  048D	B1 82		CPROG1: ACALL	LD_T		;LOAD THE TIMER
 1508:	  048F	12 0E E1		CALL	DELTST		;SEE IF A CR
 1509:	  0492	70 DB			JNZ	PG8		;SAVE TIMER IF SO
 1510:	  0494	7C FE			MOV	R4,#0FEH
 1511:	  0496	D2 1D			SETB	INBIT
 1512:	  0498	B1 5B			ACALL	ROMFD		;GET THE ROM ADDRESS OF THE LAST LOCATION
 1513:	  049A	12 18 54		CALL	TEMPD		;SAVE THE ADDRESS
 1514:	  049D	EC			MOV	A,R4		;GET COUNT
 1515:	  049E	F4			CPL	A
 1516:	  049F	12 14 B1		CALL	TWO_R2		;PUT IT ON THE STACK
 1517:	  04A2	12 19 7D		CALL	FP_BASE7	;OUTPUT IT
 1518:	  04A5	B1 1C			ACALL	CCAL		;GET THE PROGRAM
 1519:	  04A7	D1 A5			ACALL	CRLF		;DO CRLF
 1520:	  04A9	A8 0E			MOV	R0,TEMP4	;GET ADDRESS
 1521:	  04AB	AA 0F			MOV	R2,TEMP5

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 29



 Line  I  Addr  Code            Source

 1522:	  04AD	74 55			MOV	A,#55H		;LOAD SIGNIFIER
 1523:	  04AF	0E			INC	R6		;LOAD LEN + 1
 1524:	  04B0	0F			INC	R7
 1525:	  04B1	91 C3		CPROG2: ACALL	PG2
 1526:					;
 1527:	  04B3	A1 40		PGR:	AJMP	C_K		;Exit to command mode
 1528:					;
 1529:	  04B5	0F		PG101:	INC	R7
 1530:	  04B6	BE 00 07		CJNE	R6,#0,PG4
 1531:	  04B9	1F			DEC	R7
 1532:	  04BA	80 04			SJMP	PG4
 1533:					;
 1534:	  04BC	0F		PG10:	INC	R7
 1535:					;
 1536:	  04BD	8B A0		PG1:	MOV	P2,R3		;GET THE BYTE TO PROGRAM
 1537:	  04BF	E3			MOVX	A,@R1
 1538:	  04C0	12 15 76	PG4:	LCALL	INC3210 	;BUMP POINTERS
 1539:					;
 1540:	  04C3	91 D9		PG2:	ACALL	PG7		;Write the byte
 1541:	  04C5	70 04			JNZ	PG5		;exit if error
 1542:	  04C7	DE F4			DJNZ	R6,PG1
 1543:	  04C9	DF F2			DJNZ	R7,PG1		;LOOP IF NOT DONE
 1544:					;
 1545:	  04CB	53 D0 E7	PG5:	ANL	PSW,#11100111B	;INSURE RB0
 1546:	  04CE	60 27			JZ	PG31		;Jump if none error
 1547:					;
 1548:	  04D0	30 2F 24	PG6:	JNB	DIRF,PG31	;EXIT IF IN RUN MODE
 1549:	  04D3	90 1F 9A		MOV	DPTR,#E16X	;PROGRAMMING ERROR
 1550:	  04D6	02 18 8F	ERRLK:	LJMP	ERROR		;PROCESS THE ERROR
 1551:					;
 1552:					;
 1553:	  04D9	FC		PG7:	MOV	R4,A		;SAVE THE BYTE IN R4 for error detect
 1554:	  04DA	8A 83			mov	dph,r2		;load data pointer with eeprom address
 1555:	  04DC	88 82			mov	dpl,r0
 1556:	  04DE	F0			movx	@dptr,a 	;write the byte
 1557:	  04DF	7D			DB	07DH		;mov	 r5,#0
 1558:					;
 1559:	  04E0	00		ZRO:	NOP
 1560:	  04E1	00			NOP			;SETTLEING TIME + FP ZERO
 1561:	  04E2	00			NOP			;Atenttion. This 6 NOP's a not only
 1562:	  04E3	00			NOP			;for settleing time, it is also the
 1563:	  04E4	00			NOP			;floating point zero!
 1564:	  04E5	00			NOP
 1565:	  04E6	75 0F 0C		MOV	TEMP5,#12	;DELAY 30uS AT 12 MHZ
 1566:	  04E9	D5 0F FD		DJNZ	TEMP5,$
 1567:	  04EC	B1 2D			ACALL	TIMER_LOAD	;START THE TIMER
 1568:	  04EE	30 8F FD		JNB	TF1,$		;WAIT FOR PART TO PROGRAM
 1569:	  04F1	E0			movx	A,@DPTR 	;Read back for error detect
 1570:	  04F2	6C			xrl	A,R4		;Test for error
 1571:	  04F3	60 02			jz	PG31
 1572:	  04F5	DD E9			djnz	r5,ZRO
 1573:	  04F7	22		PG31:	RET
 1574:					;
 1575:					;**************************************************************
 1576:					;
 1577:	  04F8			PGU:	;PROGRAM A PROM FOR THE USER (statement 'PGM')

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 30



 Line  I  Addr  Code            Source

 1578:					;
 1579:					;**************************************************************
 1580:					;
 1581:	  04F8	75 D0 18		MOV	PSW,#00011000B	;SELECT RB3
 1582:	  04FB	BE 00 BE		CJNE	R6,#0,PG10
 1583:	  04FE	80 BD			SJMP	PG1
 1584:				;
 1585:				;*****************************************************************************
 1586:				;****** The new command "ERASE" to fill a EEPROM with 0FFH *******************
 1587:				;****** Boehling 3 ***********************************************************
 1588:				;
 1589:	  0500	7F 40		CERASE: mov	R7,#40H 		;Erase 16K byte
 1590:	  0502	7E 00			mov	R6,#00H
 1591:	  0504	7A 7F			mov	R2,#HIGH ROMADR-1	;Startaddress EEPROM
 1592:	  0506	78 FF			mov	R0,#LOW ROMADR-1
 1593:	  0508	90 01 28		mov	DPTR,#PROGS		;Point to EEPROM timeing
 1594:	  050B	B1 82			acall	LD_T			;Load the timer
 1595:					;
 1596:	  050D	12 15 76	ERA1:	lcall	INC3210 		;Bump pointers
 1597:	  0510	74 FF			mov	A,#0FFH 		;Fill the EEPROM with 0FFH
 1598:	  0512	91 D9			acall	PG7			;Write the byte
 1599:	  0514	70 BA			jnz	PG6			;Exit if error
 1600:	  0516	DE F5			DJNZ	R6,ERA1
 1601:	  0518	DF F3			DJNZ	R7,ERA1 		;Do the loop
 1602:	  051A	A1 40			ajmp	C_K			;Exit to command mode
 1603:				;
 1604:				;*****************************************************************************
 1605:				;
 1606:				;****** continue with original code: *****************************************
 1607:					;
 1608:					;*************************************************************
 1609:					;
 1610:	  051C			CCAL:	; Set up for prom moves
 1611:					; R3:R1 gets source
 1612:					; R7:R6 gets # of bytes
 1613:					;
 1614:					;*************************************************************
 1615:					;
 1616:	  051C	B1 8A			ACALL	GETEND		;GET THE LAST LOCATION
 1617:	  051E	A3			INC	DPTR		;BUMP TO LOAD EOF
 1618:	  051F	AB 13			MOV	R3,BOFAH
 1619:	  0521	A9 14			MOV	R1,BOFAL	;RESTORE START
 1620:	  0523	C3			CLR	C		;PREPARE FOR SUBB
 1621:	  0524	E5 82			MOV	A,DPL		;SUB DPTR - BOFA > R7:R6
 1622:	  0526	99			SUBB	A,R1
 1623:	  0527	FE			MOV	R6,A
 1624:	  0528	E5 83			MOV	A,DPH
 1625:	  052A	9B			SUBB	A,R3
 1626:	  052B	FF			MOV	R7,A
 1627:	  052C	22		CCAL1:	RET
 1628:					;
 1629:					;**************************************************************
 1630:					;
 1631:	  052D			TIMER_LOAD:; Load the timer
 1632:					;
 1633:					;*************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 31



 Line  I  Addr  Code            Source

 1634:					;
 1635:	  052D	B1 2C			ACALL	CCAL1		;DELAY FOUR CLOCKS
 1636:	  052F			TIMER_LOAD1:
 1637:	  052F	C2 8E			CLR	TR1		;STOP IT WHILE IT'S LOADED
 1638:	  0531	85 40 8D		MOV	TH1,T_HH
 1639:	  0534	85 41 8B		MOV	TL1,T_LL
 1640:	  0537	C2 8F			CLR	TF1		;CLEAR THE OVERFLOW FLAG
 1641:	  0539	D2 8E			SETB	TR1		;START IT NOW
 1642:	  053B	22			RET
 1643:					;
 1644:					;***************************************************************
 1645:					;
 1646:	  053C			CROM:	; The command action routine - ROM - Run out of rom
 1647:					;
 1648:					;***************************************************************
 1649:					;
 1650:	  053C	C2 17			CLR	CONB		;CAN'T CONTINUE IF MODE CHANGE
 1651:	  053E	B1 43			ACALL	RO1		;DO IT
 1652:					;
 1653:	  0540	02 10 92	C_K:	LJMP	CL3		;EXIT
 1654:					;
 1655:				;RO1:	 CALL	 INTGER 	;SEE IF INTGER PRESENT
 1656:				;	 MOV	 R4,R0B0	;SAVE THE NUMBER
 1657:				;	 JNC	 $+4
 1658:				;	 MOV	 R4,#01H	;ONE IF NO INTEGER PRESENT
 1659:				;	ACALL	ROMFD		;FIND THE PROGRAM
 1660:				;
 1661:	  0543	12 0E E1	RO1:	CALL	DELTST
 1662:	  0546	7C 01			MOV	R4,#1
 1663:	  0548	50 04			JNC	RO11
 1664:	  054A	12 0E 8E		CALL	ONE
 1665:	  054D	FC			MOV	R4,A
 1666:				;
 1667:	  054E	B1 5B		RO11:	ACALL	ROMFD
 1668:	  0550	BC 00 11		CJNE	R4,#0,RFX	;EXIT IF R4 <> 0
 1669:	  0553	A3			INC	DPTR		;BUMP PAST TAG
 1670:	  0554	85 83 13		MOV	BOFAH,DPH	;SAVE THE ADDRESS
 1671:	  0557	85 82 14		MOV	BOFAL,DPL
 1672:	  055A	22			RET
 1673:					;
 1674:	  055B	90 80 10	ROMFD:	MOV	DPTR,#ROMADR+16 ;START OF USER PROGRAM
 1675:					;
 1676:	  055E	E0		RF1:	MOVX	A,@DPTR 	;GET THE BYTE
 1677:	  055F	B4 55 09		CJNE	A,#55H,RF3	;SEE IF PROPER TAG
 1678:	  0562	DC 01			DJNZ	R4,RF2		;BUMP COUNTER
 1679:					;
 1680:	  0564	22		RFX:	RET			;DPTR HAS THE START ADDRESS
 1681:					;
 1682:	  0565	A3		RF2:	INC	DPTR		;BUMP PAST TAG
 1683:	  0566	B1 AC			ACALL	G5
 1684:	  0568	A3			INC	DPTR		;BUMP TO NEXT PROGRAM
 1685:	  0569	80 F3			SJMP	RF1		;DO IT AGAIN
 1686:					;
 1687:	  056B	10 1D F6	RF3:	JBC	INBIT,RFX	;EXIT IF SET
 1688:					;
 1689:	  056E	90 1F C9	NOGO:	MOV	DPTR,#NOROM

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 32



 Line  I  Addr  Code            Source

 1690:	  0571	81 D6			AJMP	ERRLK
 1691:					;
 1692:					;***************************************************************
 1693:					;
 1694:	  0573			L20DPI: ; load R2:R0 with the location the DPTR is pointing to
 1695:					;
 1696:					;***************************************************************
 1697:					;
 1698:	  0573	E0			MOVX	A,@DPTR
 1699:	  0574	FA			MOV	R2,A
 1700:	  0575	A3			INC	DPTR
 1701:	  0576	E0			MOVX	A,@DPTR
 1702:	  0577	F8			MOV	R0,A
 1703:	  0578	22			RET			;DON'T BUMP DPTR
 1704:					;
 1705:					;***************************************************************
 1706:					;
 1707:	  0579			X31DP:	; swap R3:R1 with DPTR
 1708:					;
 1709:					;***************************************************************
 1710:					;
 1711:	  0579	CB			XCH	A,R3
 1712:	  057A	C5 83			XCH	A,DPH
 1713:	  057C	CB			XCH	A,R3
 1714:	  057D	C9			XCH	A,R1
 1715:	  057E	C5 82			XCH	A,DPL
 1716:	  0580	C9			XCH	A,R1
 1717:	  0581	22			RET
 1718:					;
 1719:					;***************************************************************
 1720:					;
 1721:	  0582			LD_T:	; Load the timer save location with the value the DPTR is
 1722:					; pointing to.
 1723:					;
 1724:					;****************************************************************
 1725:					;
 1726:	  0582	E0			MOVX	A,@DPTR
 1727:	  0583	F5 40			MOV	T_HH,A
 1728:	  0585	A3			INC	DPTR
 1729:	  0586	E0			MOVX	A,@DPTR
 1730:	  0587	F5 41			MOV	T_LL,A
 1731:	  0589	22			RET
 1732:					;
 1733:					;
 1734:					;***************************************************************
 1735:					;
 1736:					;GETLIN - FIND THE LOCATION OF THE LINE NUMBER IN R3:R1
 1737:					;	  IF ACC = 0 THE LINE WAS NOT FOUND I.E. R3:R1
 1738:					;	  WAS TOO BIG, ELSE ACC <> 0 AND THE DPTR POINTS
 1739:					;	  AT THE LINE THAT IS GREATER THAN OR EQUAL TO THE
 1740:					;	  VALUE IN R3:R1.
 1741:					;
 1742:					;***************************************************************
 1743:					;
 1744:	  058A	D2 29		GETEND: SETB	ENDBIT		;GET THE END OF THE PROGRAM
 1745:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 33



 Line  I  Addr  Code            Source

 1746:	  058C	12 0E 9B	GETLIN: CALL	DP_B		;GET BEGINNING ADDRESS
 1747:					;
 1748:	  058F	12 0A A4	G1:	CALL	B_C
 1749:	  0592	60 12			JZ	G3		;EXIT WITH A ZERO IN A IF AT END
 1750:	  0594	A3			INC	DPTR		;POINT AT THE LINE NUMBER
 1751:	  0595	20 29 0A		JB	ENDBIT,G2	;SEE IF WE WANT TO FIND THE END
 1752:	  0598	B1 CC			ACALL	DCMPX		;SEE IF (DPTR) = R3:R1
 1753:	  059A	B1 C2			ACALL	DECDP		;POINT AT LINE COUNT
 1754:	  059C	E0			MOVX	A,@DPTR 	;PUT LINE LENGTH INTO ACC
 1755:	  059D	20 2A 06		JB	UBIT,G3 	;EXIT IF EQUAL
 1756:	  05A0	40 04			JC	G3		;SEE IF LESS THAN OR ZERO
 1757:					;
 1758:	  05A2	B1 DE		G2:	ACALL	ADDPTR		;ADD IT TO DPTR
 1759:	  05A4	80 E9			SJMP	G1		;LOOP
 1760:					;
 1761:	  05A6	C2 29		G3:	CLR	ENDBIT		;RESET ENDBIT
 1762:	  05A8	22			RET			;EXIT
 1763:					;
 1764:	  05A9	90 02 00	G4:	MOV	DPTR,#PSTART	;DO RAM
 1765:					;
 1766:	  05AC	D2 29		G5:	SETB	ENDBIT
 1767:	  05AE	80 DF			SJMP	G1		;NOW DO TEST
 1768:					;
 1769:					;***************************************************************
 1770:					;
 1771:					; LDPTRI - Load the DATA POINTER with the value it is pointing
 1772:					;	   to - DPH = (DPTR) , DPL = (DPTR+1)
 1773:					;
 1774:					; acc gets wasted
 1775:					;
 1776:					;***************************************************************
 1777:					;
 1778:	  05B0	E0		LDPTRI: MOVX	A,@DPTR 	;GET THE HIGH BYTE
 1779:	  05B1	C0 E0			PUSH	ACC		;SAVE IT
 1780:	  05B3	A3			INC	DPTR		;BUMP THE POINTER
 1781:	  05B4	E0			MOVX	A,@DPTR 	;GET THE LOW BYTE
 1782:	  05B5	F5 82			MOV	DPL,A		;PUT IT IN DPL
 1783:	  05B7	D0 83			POP	DPH		;GET THE HIGH BYTE
 1784:	  05B9	22			RET			;GO BACK
 1785:					;
 1786:					;***************************************************************
 1787:					;
 1788:					;L31DPI - LOAD R3 WITH (DPTR) AND R1 WITH (DPTR+1)
 1789:					;
 1790:					;ACC GETS CLOBBERED
 1791:					;
 1792:					;***************************************************************
 1793:					;
 1794:	  05BA	E0		L31DPI: MOVX	A,@DPTR 	;GET THE HIGH BYTE
 1795:	  05BB	FB			MOV	R3,A		;PUT IT IN THE REG
 1796:	  05BC	A3			INC	DPTR		;BUMP THE POINTER
 1797:	  05BD	E0			MOVX	A,@DPTR 	;GET THE NEXT BYTE
 1798:	  05BE	F9			MOV	R1,A		;SAVE IT
 1799:	  05BF	22			RET
 1800:					;
 1801:					;***************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 34



 Line  I  Addr  Code            Source

 1802:					;
 1803:					;DECDP - DECREMENT THE DATA POINTER - USED TO SAVE SPACE
 1804:					;
 1805:					;***************************************************************
 1806:					;
 1807:	  05C0	B1 C2		DECDP2: ACALL	DECDP
 1808:					;
 1809:	  05C2	C5 82		DECDP:	XCH	A,DPL		;GET DPL
 1810:	  05C4	70 02			JNZ	DECDP1		;BUMP IF ZERO
 1811:	  05C6	15 83			DEC	DPH
 1812:	  05C8	14		DECDP1: DEC	A		;DECREMENT IT
 1813:	  05C9	C5 82			XCH	A,DPL		;GET A BACK
 1814:	  05CB	22			RET			;EXIT
 1815:					;
 1816:					;***************************************************************
 1817:					;
 1818:					;DCMPX - DOUBLE COMPARE - COMPARE (DPTR) TO R3:R1
 1819:					;R3:R1 - (DPTR) = SET CARRY FLAG
 1820:					;
 1821:					;IF R3:R1 > (DPTR) THEN C = 0
 1822:					;IF R3:R1 < (DPTR) THEN C = 1
 1823:					;IF R3:R1 = (DPTR) THEN C = 0
 1824:					;
 1825:					;***************************************************************
 1826:					;
 1827:	  05CC	C2 2A		DCMPX:	CLR	UBIT		;ASSUME NOT EQUAL
 1828:	  05CE	E0			MOVX	A,@DPTR 	;GET THE BYTE
 1829:	  05CF	B5 03 0A		CJNE	A,R3B0,D1	;IF A IS GREATER THAN R3 THEN NO CARRY
 1830:								;WHICH IS R3<@DPTR = NO CARRY AND
 1831:								;R3>@DPTR CARRY IS SET
 1832:	  05D2	A3			INC	DPTR		;BUMP THE DATA POINTER
 1833:	  05D3	E0			MOVX	A,@DPTR 	;GET THE BYTE
 1834:	  05D4	B1 C2			ACALL	DECDP		;PUT DPTR BACK
 1835:	  05D6	B5 01 03		CJNE	A,R1B0,D1	;DO THE COMPARE
 1836:	  05D9	B3			CPL	C		;FLIP CARRY
 1837:					;
 1838:	  05DA	B2 2A			CPL	UBIT		;SET IT
 1839:	  05DC	B3		D1:	CPL	C		;GET THE CARRY RIGHT
 1840:	  05DD	22			RET			;EXIT
 1841:					;
 1842:					;***************************************************************
 1843:					;
 1844:					; ADDPTR - Add acc to the dptr
 1845:					;
 1846:					; acc gets wasted
 1847:					;
 1848:					;***************************************************************
 1849:					;
 1850:	  05DE	25 82		ADDPTR: ADD	A,DPL		;ADD THE ACC TO DPL
 1851:	  05E0	F5 82			MOV	DPL,A		;PUT IT IN DPL
 1852:	  05E2	50 02			JNC	ADDPTR1 	;JUMP IF NO CARRY
 1853:	  05E4	05 83			INC	DPH		;BUMP DPH
 1854:	  05E6	22		ADDPTR1:RET			;EXIT
 1855:					;
 1856:					;*************************************************************
 1857:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 35



 Line  I  Addr  Code            Source

 1858:	  05E7			LCLR:	; Set up the storage allocation
 1859:					;
 1860:					;*************************************************************
 1861:					;
 1862:	  05E7	D1 9A			ACALL	ICLR		;CLEAR THE INTERRUPTS
 1863:	  05E9	B1 A9			ACALL	G4		;PUT END ADDRESS INTO DPTR
 1864:	  05EB	74 06			MOV	A,#6		;ADJUST MATRIX SPACE
 1865:	  05ED	B1 DE			ACALL	ADDPTR		;ADD FOR PROPER BOUNDS
 1866:	  05EF	B1 79			ACALL	X31DP		;PUT MATRIX BOUNDS IN R3:R1
 1867:	  05F1	90 01 08		MOV	DPTR,#MT_ALL	;SAVE R3:R1 IN MATRIX FREE SPACE
 1868:	  05F4	D1 05			ACALL	S31DP		;DPTR POINTS TO MEMTOP
 1869:	  05F6	B1 BA			ACALL	L31DPI		;LOAD MEMTOP INTO R3:R1
 1870:	  05F8	90 01 22		MOV	DPTR,#STR_AL	;GET MEMORY ALLOCATED FOR STRINGS
 1871:	  05FB	B1 B0			ACALL	LDPTRI
 1872:	  05FD	12 0A 02		CALL	DUBSUB		;R3:R1 = MEMTOP - STRING ALLOCATION
 1873:	  0600	90 01 04		MOV	DPTR,#VARTOP	;SAVE R3:R1 IN VARTOP
 1874:					;
 1875:					; FALL THRU TO S31DP2
 1876:					;
 1877:					;***************************************************************
 1878:					;
 1879:					;S31DP - STORE R3 INTO (DPTR) AND R1 INTO (DPTR+1)
 1880:					;
 1881:					;ACC GETS CLOBBERED
 1882:					;
 1883:					;***************************************************************
 1884:					;
 1885:	  0603	D1 05		S31DP2: ACALL	S31DP		;DO IT TWICE
 1886:					;
 1887:	  0605	EB		S31DP:	MOV	A,R3		;GET R3 INTO ACC
 1888:	  0606	F0			MOVX	@DPTR,A 	;STORE IT
 1889:	  0607	A3			INC	DPTR		;BUMP DPTR
 1890:	  0608	E9			MOV	A,R1		;GET R1
 1891:	  0609	F0			MOVX	@DPTR,A 	;STORE IT
 1892:	  060A	A3			INC	DPTR		;BUMP IT AGAIN TO SAVE PROGRAM SPACE
 1893:	  060B	22			RET			;GO BACK
 1894:					;
 1895:					;
 1896:					;***************************************************************
 1897:					;
 1898:	  060C			STRING: ; Allocate memory for strings
 1899:					;
 1900:					;***************************************************************
 1901:					;
 1902:	  060C	12 0E 85		LCALL	TWO		;R3:R1 = NUMBER, R2:R0 = LEN
 1903:	  060F	90 01 22		MOV	DPTR,#STR_AL	;SAVE STRING ALLOCATION
 1904:	  0612	D1 05			ACALL	S31DP
 1905:	  0614	0E			INC	R6		;BUMP
 1906:	  0615	8E 3F			MOV	S_LEN,R6	;SAVE STRING LENGTH
 1907:	  0617	C1 64			AJMP	RCLEAR		;CLEAR AND SET IT UP
 1908:					;
 1909:					;***************************************************************
 1910:					;
 1911:					; F_VAR - Find	the variable in symbol table
 1912:					;	  R7:R6 contain the variable name
 1913:					;	  If not found create a zero entry and set the carry

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 36



 Line  I  Addr  Code            Source

 1914:					;	  R2:R0 has the address of variable on return
 1915:					;
 1916:					;***************************************************************
 1917:					;
 1918:	  0619	90 01 04	F_VAR:	MOV	DPTR,#VARTOP	;PUT VARTOP IN DPTR
 1919:	  061C	B1 B0			ACALL	LDPTRI
 1920:	  061E	B1 C0			ACALL	DECDP2		;ADJUST DPTR FOR LOOKUP
 1921:					;
 1922:	  0620	E0		F_VAR0: MOVX	A,@DPTR 	;LOAD THE VARIABLE
 1923:	  0621	60 20			JZ	F_VAR2		;TEST IF AT THE END OF THE TABLE
 1924:	  0623	A3			INC	DPTR		;BUMP FOR NEXT BYTE
 1925:	  0624	B5 07 0F		CJNE	A,R7B0,F_VAR1	;SEE IF MATCH
 1926:	  0627	E0			MOVX	A,@DPTR 	;LOAD THE NAME
 1927:	  0628	B5 06 0B		CJNE	A,R6B0,F_VAR1
 1928:					;
 1929:					; Found the variable now adjust and put in R2:R0
 1930:					;
 1931:	  062B	E5 82		DLD:	MOV	A,DPL		;R2:R0 = DPTR-2
 1932:	  062D	94 02			SUBB	A,#2
 1933:	  062F	F8			MOV	R0,A
 1934:	  0630	E5 83			MOV	A,DPH
 1935:	  0632	94 00			SUBB	A,#0		;CARRY IS CLEARED
 1936:	  0634	FA			MOV	R2,A
 1937:	  0635	22			RET
 1938:					;
 1939:	  0636	E5 82		F_VAR1: MOV	A,DPL		;SUBTRACT THE STACK SIZE+ADJUST
 1940:	  0638	C3			CLR	C
 1941:	  0639	94 09			SUBB	A,#STESIZ
 1942:	  063B	F5 82			MOV	DPL,A		;RESTORE DPL
 1943:	  063D	50 E1			JNC	F_VAR0
 1944:	  063F	15 83			DEC	DPH
 1945:	  0641	80 DD			SJMP	F_VAR0		;CONTINUE COMPARE
 1946:					;
 1947:					;
 1948:					; Add the entry to the symbol table
 1949:					;
 1950:	  0643	12 0D EF	F_VAR2: LCALL	R76S		;SAVE R7 AND R6
 1951:	  0646	C3			CLR	C
 1952:	  0647	D1 2B			ACALL	DLD		;BUMP THE POINTER TO GET ENTRY ADDRESS
 1953:					;
 1954:					; Adjust pointer and save storage allocation
 1955:					; and make sure we aren't wiping anything out
 1956:					; First calculate new storage allocation
 1957:					;
 1958:	  0649	E8			MOV	A,R0
 1959:	  064A	94 06			SUBB	A,#STESIZ-3	;NEED THIS MUCH RAM
 1960:	  064C	F9			MOV	R1,A
 1961:	  064D	EA			MOV	A,R2
 1962:	  064E	94 00			SUBB	A,#0
 1963:	  0650	FB			MOV	R3,A
 1964:					;
 1965:					; Now save the new storage allocation
 1966:					;
 1967:	  0651	90 01 06		MOV	DPTR,#ST_ALL
 1968:	  0654	D1 05			CALL	S31DP		;SAVE STORAGE ALLOCATION
 1969:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 37



 Line  I  Addr  Code            Source

 1970:					; Now make sure we didn't blow it, by wiping out MT_ALL
 1971:					;
 1972:	  0656	B1 CC			ACALL	DCMPX		;COMPARE STORAGE ALLOCATION
 1973:	  0658	40 32			JC	CCLR3		;ERROR IF CARRY
 1974:	  065A	D3			SETB	C		;DID NOT FIND ENTRY
 1975:	  065B	22			RET			;EXIT IF TEST IS OK
 1976:					;
 1977:					;***************************************************************
 1978:					;
 1979:					; Command action routine - NEW
 1980:					;
 1981:					;***************************************************************
 1982:					;
 1983:	  065C	90 02 00	CNEW:	MOV	DPTR,#PSTART	;SAVE THE START OF PROGRAM
 1984:	  065F	74 01			MOV	A,#EOF		;END OF FILE
 1985:	  0661	F0			MOVX	@DPTR,A 	;PUT IT IN MEMORY
 1986:					;
 1987:					; falls thru
 1988:					;
 1989:					;*****************************************************************
 1990:					;
 1991:					; The statement action routine - CLEAR
 1992:					;
 1993:					;*****************************************************************
 1994:					;
 1995:	  0662	C2 15		CNEW1:	CLR	LINEB		;SET UP FOR RUN AND GOTO
 1996:					;
 1997:	  0664	B1 E7		RCLEAR: ACALL	LCLR		;CLEAR THE INTERRUPTS, SET UP MATRICES
 1998:	  0666	90 01 0A		MOV	DPTR,#MEMTOP	;PUT MEMTOP IN R3:R1
 1999:	  0669	B1 BA			ACALL	L31DPI
 2000:	  066B	B1 A9			ACALL	G4		;DPTR GETS END ADDRESS
 2001:	  066D	D1 7D			ACALL	CL_1		;CLEAR THE MEMORY
 2002:					;
 2003:	  066F	90 00 FE	RC1:	MOV	DPTR,#STACKTP	;POINT AT CONTROL STACK TOP
 2004:	  0672	E4			CLR	A		;CONTROL UNDERFLOW
 2005:					;
 2006:	  0673	F0		RC2:	MOVX	@DPTR,A 	;SAVE IN MEMORY
 2007:	  0674	75 11 FE		MOV	CSTKA,#STACKTP
 2008:	  0677	75 09 FE		MOV	ASTKA,#STACKTP
 2009:	  067A	C2 17			CLR	CONB		;CAN'T CONTINUE
 2010:	  067C	22			RET
 2011:					;
 2012:					;***************************************************************
 2013:					;
 2014:					; Loop until the memory is cleared
 2015:					;
 2016:					;***************************************************************
 2017:					;
 2018:	  067D	A3		CL_1:	INC	DPTR		;BUMP MEMORY POINTER
 2019:	  067E	E4			CLR	A		;CLEAR THE MEMORY
 2020:	  067F	F0			MOVX	@DPTR,A 	;CLEAR THE RAM
 2021:	  0680	E0			MOVX	A,@DPTR 	;READ IT
 2022:	  0681	70 09			JNZ	CCLR3		;MAKE SURE IT IS CLEARED
 2023:	  0683	EB			MOV	A,R3		;GET POINTER FOR COMPARE
 2024:	  0684	B5 83 F6		CJNE	A,DPH,CL_1	;SEE TO LOOP
 2025:	  0687	E9			MOV	A,R1		;NOW TEST LOW BYTE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 38



 Line  I  Addr  Code            Source

 2026:	  0688	B5 82 F2		CJNE	A,DPL,CL_1
 2027:					;
 2028:	  068B	22		CL_2:	RET
 2029:					;
 2030:	  068C	02 15 B5	CCLR3:	JMP	TB		;ALLOCATED MEMORY DOESN'T EXSIST
 2031:					;
 2032:					;**************************************************************
 2033:					;
 2034:	  068F			SCLR:	;Entry point for clear return
 2035:					;
 2036:					;**************************************************************
 2037:					;
 2038:	  068F	12 0E E1		CALL	DELTST		;TEST FOR A CR
 2039:	  0692	50 D0			JNC	RCLEAR
 2040:	  0694	12 0E D7		CALL	GCI1		;BUMP THE TEST POINTER
 2041:	  0697	B4 49 D5		CJNE	A,#'I',RC1      ;SEE IF I, ELSE RESET THE STACK
 2042:					;
 2043:					;**************************************************************
 2044:					;
 2045:	  069A			ICLR:	; Clear interrupts and system garbage
 2046:					;
 2047:					;**************************************************************
 2048:					;
 2049:	  069A	30 12 02		JNB	INTBIT,ICLR1	;SEE IF BASIC HAS INTERRUPTS
 2050:	  069D	C2 AA			CLR	EX1		;IF SO, CLEAR INTERRUPTS
 2051:	  069F	53 22 20	ICLR1:	ANL	34,#00100000B	;SET INTERRUPTS + CONTINUE
 2052:	  06A2	32			RETI
 2053:					;
 2054:					;***************************************************************
 2055:					;
 2056:					;OUTPUT ROUTINES
 2057:					;
 2058:					;***************************************************************
 2059:					;
 2060:	  06A3	D1 A5		CRLF2:	ACALL	CRLF		;DO TWO CRLF'S
 2061:					;
 2062:	  06A5	7D 0D		CRLF:	MOV	R5,#CR		;LOAD THE CR
 2063:	  06A7	F1 11			ACALL	TEROT		;CALL TERMINAL OUT
 2064:	  06A9	7D 0A			MOV	R5,#LF		;LOAD THE LF
 2065:	  06AB	E1 11			AJMP	TEROT		;OUTPUT IT AND RETURN
 2066:					;
 2067:					;PRINT THE MESSAGE ADDRESSED IN ROM OR RAM BY THE DPTR
 2068:					;ENDS WITH THE CHARACTER IN R4
 2069:					;DPTR HAS THE ADDRESS OF THE TERMINATOR
 2070:					;
 2071:	  06AD	D1 A5		CRP:	ACALL	CRLF		;DO A CR THEN PRINT ROM
 2072:					;
 2073:	  06AF	E4		ROM_P:	CLR	A		;CLEAR A FOR LOOKUP
 2074:	  06B0	93			MOVC	A,@A+DPTR	;GET THE CHARACTER
 2075:	  06B1	C2 E7			CLR	ACC.7		;CLEAR MS BIT
 2076:	  06B3	B4 22 01		CJNE	A,#'"',ROM_P1   ;EXIT IF TERMINATOR
 2077:	  06B6	22			RET
 2078:	  06B7	D2 34		ROM_P1: SETB	C0ORX1
 2079:					;
 2080:	  06B9	FD		PN1:	MOV	R5,A		;OUTPUT THE CHARACTER
 2081:	  06BA	F1 11			ACALL	TEROT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 39



 Line  I  Addr  Code            Source

 2082:	  06BC	A3			INC	DPTR		;BUMP THE POINTER
 2083:	  06BD	80 04			SJMP	PN0
 2084:					;
 2085:	  06BF	B1 79		UPRNT:	ACALL	X31DP
 2086:					;
 2087:	  06C1	7C 0D		PRNTCR: MOV	R4,#CR		;OUTPUT UNTIL A CR
 2088:					;
 2089:	  06C3	10 34 E9	PN0:	JBC	C0ORX1,ROM_P
 2090:	  06C6	E0			MOVX	A,@DPTR 	;GET THE RAM BYTE
 2091:	  06C7	60 03			JZ	PN01
 2092:	  06C9	B5 04 01		CJNE	A,R4B0,PN02	;SEE IF THE SAME AS TERMINATOR
 2093:	  06CC	22		PN01:	RET			;EXIT IF THE SAME
 2094:	  06CD	B4 0D E9	PN02:	CJNE	A,#CR,PN1	;NEVER PRINT A CR IN THIS ROUTINE
 2095:	  06D0	02 18 85		LJMP	E1XX		;BAD SYNTAX
 2096:					;
 2097:					;***************************************************************
 2098:					;
 2099:					; INLINE - Input a line to IBUF, exit when a CR is received
 2100:					;
 2101:					;***************************************************************
 2102:					;
 2103:	  06D3	B4 04 16	INL2:	CJNE	A,#CNTRLD,INL2B ;SEE IF A CONTROL D
 2104:					;
 2105:	  06D6	D1 A5		INL0:	ACALL	CRLF		;DO A CR
 2106:					;
 2107:	  06D8	75 A0 00	INLINE: MOV	P2,#HIGH IBUF	;IBUF IS IN THE ZERO PAGE
 2108:	  06DB	78 07			MOV	R0,#LOW IBUF	;POINT AT THE INPUT BUFFER
 2109:					;
 2110:	  06DD	F1 91		INL1:	ACALL	INCHAR		;GET A CHARACTER
 2111:	  06DF	FD			MOV	R5,A		;SAVE IN R5 FOR OUTPUT
 2112:	  06E0	B4 7F F0		CJNE	A,#7FH,INL2	;SEE IF A DELETE CHARACTER
 2113:	  06E3	B8 07 18		CJNE	R0,#LOW IBUF,INL6
 2114:	  06E6	7D 07		INL11:	MOV	R5,#BELL	;OUTPUT A BELL
 2115:					;
 2116:	  06E8	F1 11		INLX:	ACALL	TEROT		;OUTPUT CHARACTER
 2117:	  06EA	80 F1			SJMP	INL1		;DO IT AGAIN
 2118:					;
 2119:	  06EC	F2		INL2B:	MOVX	@R0,A		;SAVE THE CHARACTER
 2120:	  06ED	B4 0D 02		CJNE	A,#CR,INL2B1	;IS IT A CR
 2121:	  06F0	C1 A5			AJMP	CRLF		;OUTPUT A CRLF AND EXIT
 2122:	  06F2	B4 20 00	INL2B1: CJNE	A,#20H,INL2B2
 2123:	  06F5	40 F1		INL2B2: JC	INLX		;ONLY ECHO CONTROL CHARACTERS
 2124:	  06F7	08			INC	R0		;BUMP THE POINTER
 2125:	  06F8	B8 56 ED		CJNE	R0,#IBUF+79,INLX
 2126:	  06FB	18			DEC	R0		;FORCE 79
 2127:	  06FC	80 E8			SJMP	INL11		;OUTPUT A BELL
 2128:					;
 2129:	  06FE	18		INL6:	DEC	R0		;DEC THE RAM POINTER
 2130:	  06FF	7D 08			MOV	R5,#BS		;OUTPUT A BACK SPACE
 2131:	  0701	F1 11			ACALL	TEROT
 2132:	  0703	F1 0F			ACALL	STEROT		;OUTPUT A SPACE
 2133:	  0705	7D 08			MOV	R5,#BS		;ANOTHER BACK SPACE
 2134:	  0707	80 DF			SJMP	INLX		;OUTPUT IT
 2135:				;
 2136:				;*****************************************************************************
 2137:				;****** Use XTAL up to 47 MHz ************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 40



 Line  I  Addr  Code            Source

 2138:				;****** Wulf 2 ***************************************************************
 2139:				;
 2140:				;PTIME: DB	128-2		;PROM PROGRAMMER TIMER
 2141:				;	DB	00H
 2142:				;	DB	00H
 2143:				;	DB	50H
 2144:				;	DB	67H
 2145:				;	DB	41H
 2146:				;
 2147:	  0709	7D		ptime:	db	128-3		;New programmer timer value is old value
 2148:	  070A	00			db	00H		;divide by 5
 2149:	  070B	00			db	00H		;(50ms EPROM timeing to 10ms for EEPROM)
 2150:	  070C	00			db	00H
 2151:	  070D	35			db	35H
 2152:	  070E	83			db	83H
 2153:				;
 2154:				;*****************************************************************************
 2155:				;
 2156:					;***************************************************************
 2157:					;
 2158:					; TEROT - Output a character to the system console
 2159:					;	  update PHEAD position.
 2160:					;
 2161:					;***************************************************************
 2162:					;
 2163:	  070F	7D 20		STEROT: MOV	R5,#' '         ;OUTPUT A SPACE
 2164:					;
 2165:	  0711	C0 E0		TEROT:	PUSH	ACC		;SAVE THE ACCUMULATOR
 2166:	  0713	C0 83			PUSH	DPH		;SAVE THE DPTR
 2167:	  0715	C0 82			PUSH	DPL
 2168:	  0717	30 35 04	TEROT01:JNB	CNT_S,TEROT02	;WAIT FOR A CONTROL Q
 2169:	  071A	F1 8D			ACALL	BCK		;GET SERIAL STATUS
 2170:	  071C	80 F9			SJMP	TEROT01
 2171:	  071E	ED		TEROT02:MOV	A,R5		;PUT OUTPUT BYTE IN A
 2172:	  071F	30 2C 05		JNB	BO,TEROT03	;CHECK FOR MONITOR
 2173:	  0722	12 20 40		LCALL	2040H		;DO THE MONITOR
 2174:	  0725	E1 66			AJMP	TEROT1		;CLEAN UP
 2175:	  0727	30 1C 05	TEROT03:JNB	COUB,TEROT04	;SEE IF USER WANTS OUTPUT
 2176:	  072A	12 40 30		LCALL	4030H
 2177:	  072D	E1 66			AJMP	TEROT1
 2178:	  072F	30 27 08	TEROT04:JNB	UPB,T_1 	;NO AT IF NO XBIT
 2179:	  0732	30 19 05		JNB	LPB,T_1 	;AT PRINT
 2180:	  0735	12 40 3C		LCALL	403CH		;CALL AT LOCATION
 2181:	  0738	E1 66			AJMP	TEROT1		;FINISH OFF OUTPUT
 2182:					;
 2183:	  073A	30 1B 22	T_1:	JNB	COB,TXX 	;SEE IF LIST SET
 2184:	  073D	90 01 24		MOV	DPTR,#SPV	;LOAD BAUD RATE
 2185:	  0740	B1 82			ACALL	LD_T
 2186:	  0742	C2 97			CLR	LP		;OUTPUT START BIT
 2187:	  0744	B1 2D			ACALL	TIMER_LOAD	;LOAD AND START THE TIMER
 2188:	  0746	ED			MOV	A,R5		;GET THE OUTPUT BYTE
 2189:	  0747	D3			SETB	C		;SET CARRY FOR LAST OUTPUT
 2190:	  0748	7D 09			MOV	R5,#9		;LOAD TIMER COUNTDOWN
 2191:					;
 2192:	  074A	13		LTOUT1: RRC	A		;ROTATE A
 2193:	  074B	30 8F FD		JNB	TF1,$		;WAIT TILL TIMER READY

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 41



 Line  I  Addr  Code            Source

 2194:	  074E	92 97			MOV	LP,C		;OUTPUT THE BIT
 2195:	  0750	B1 2D			ACALL	TIMER_LOAD	;DO THE NEXT BIT
 2196:	  0752	DD F6			DJNZ	R5,LTOUT1	;LOOP UNTIL DONE
 2197:	  0754	30 8F FD		JNB	TF1,$		;FIRST STOP BIT
 2198:	  0757	B1 2D			ACALL	TIMER_LOAD
 2199:	  0759	30 8F FD		JNB	TF1,$		;SECOND STOP BIT
 2200:	  075C	FD			MOV	R5,A		;RESTORE R5
 2201:	  075D	80 07			SJMP	TEROT1		;BACK TO TEROT
 2202:					;
 2203:	  075F	30 99 FD	TXX:	JNB	TI,$		;WAIT FOR TRANSMIT READY
 2204:	  0762	C2 99			CLR	TI
 2205:	  0764	8D 99			MOV	SBUF,R5 	;SEND OUT THE CHARACTER
 2206:					;
 2207:	  0766	BD 0D 03	TEROT1: CJNE	R5,#CR,TEROT11	;SEE IF A CR
 2208:	  0769	75 16 00		MOV	PHEAD,#00H	;IF A CR, RESET PHEAD AND
 2209:					;
 2210:	  076C	BD 0A 0B	TEROT11:CJNE	R5,#LF,NLC	;SEE IF A LF
 2211:	  076F	E5 15			MOV	A,NULLCT	;GET THE NULL COUNT
 2212:	  0771	60 07			JZ	NLC		;NO NULLS IF ZERO
 2213:					;
 2214:	  0773	7D 00		TEROT2: MOV	R5,#NULL	;PUT THE NULL IN THE OUTPUT REGISTER
 2215:	  0775	F1 11			ACALL	TEROT		;OUTPUT THE NULL
 2216:	  0777	14			DEC	A		;DECREMENT NULL COUNT
 2217:	  0778	70 F9			JNZ	TEROT2		;LOOP UNTIL DONE
 2218:					;
 2219:	  077A	BD 08 02	NLC:	CJNE	R5,#BS,NLC1	;DEC PHEAD IF A BACKSPACE
 2220:	  077D	15 16			DEC	PHEAD
 2221:	  077F	BD 20 00	NLC1:	CJNE	R5,#20H,NLC2	;IS IT A PRINTABLE CHARACTER?
 2222:	  0782	40 02		NLC2:	JC	NLC3		;DON'T INCREMENT PHEAD IF NOT PRINTABLE
 2223:	  0784	05 16			INC	PHEAD		;BUMP PRINT HEAD
 2224:	  0786	D0 82		NLC3:	POP	DPL		;RESTORE DPTR
 2225:	  0788	D0 83			POP	DPH
 2226:	  078A	D0 E0			POP	ACC		;RESTORE ACC
 2227:	  078C	22			RET			;EXIT
 2228:					;
 2229:	  078D	F1 C8		BCK:	ACALL	CSTS		;CHECK STATUS
 2230:	  078F	50 2E			JNC	CI_RET1 	;EXIT IF NO CHARACTER
 2231:					;
 2232:					;***************************************************************
 2233:					;
 2234:					;INPUTS A CHARACTER FROM THE SYSTEM CONSOLE.
 2235:					;
 2236:					;***************************************************************
 2237:					;
 2238:	  0791	30 32 05	INCHAR: JNB	BI,INCHAR1	;CHECK FOR MONITOR (BUBBLE)
 2239:	  0794	12 20 60		LCALL	2060H
 2240:	  0797	80 11			SJMP	INCH1
 2241:	  0799	30 1E 05	INCHAR1:JNB	CIUB,INCHAR2	;CHECK FOR USER
 2242:	  079C	12 40 33		LCALL	4033H
 2243:	  079F	80 09			SJMP	INCH1
 2244:	  07A1	30 98 FD	INCHAR2:JNB	RI,$		;WAIT FOR RECEIVER READY.
 2245:	  07A4	E5 99			MOV	A,SBUF
 2246:	  07A6	C2 98			CLR	RI		;RESET READY
 2247:	  07A8	C2 E7			CLR	ACC.7		;NO BIT 7
 2248:					;
 2249:	  07AA	B4 13 02	INCH1:	CJNE	A,#13H,INCH11

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 42



 Line  I  Addr  Code            Source

 2250:	  07AD	D2 35			SETB	CNT_S
 2251:	  07AF	B4 11 02	INCH11: CJNE	A,#11H,INCH12
 2252:	  07B2	C2 35			CLR	CNT_S
 2253:	  07B4	B4 03 04	INCH12: CJNE	A,#CNTRLC,INCH13
 2254:	  07B7	30 30 1D		JNB	NO_C,C_EX	;TRAP NO CONTROL C
 2255:	  07BA	22			RET
 2256:					;
 2257:				;
 2258:				;*****************************************************************************
 2259:				;****** Sorry - but the ego message had to be disabled ***********************
 2260:				;
 2261:	  07BB			INCH13:
 2262:				;	CLR	JKBIT
 2263:	  07BB	B4 17 00		CJNE	A,#17H,CI_RET	;CONTROL W
 2264:				;	SETB	JKBIT
 2265:				;
 2266:				;*****************************************************************************
 2267:					;
 2268:	  07BE	D3		CI_RET: SETB	C		;CARRY SET IF A CHARACTER
 2269:	  07BF	22		CI_RET1:RET			;EXIT
 2270:					;
 2271:					;*************************************************************
 2272:					;
 2273:					;RROM - The Statement Action Routine RROM
 2274:					;
 2275:					;*************************************************************
 2276:					;
 2277:	  07C0	D2 1D		RROM:	SETB	INBIT		;SO NO ERRORS
 2278:	  07C2	B1 43			ACALL	RO1		;FIND THE LINE NUMBER
 2279:	  07C4	10 1D 3B		JBC	INBIT,CRUN
 2280:	  07C7	22			RET			;EXIT
 2281:					;
 2282:					;***************************************************************
 2283:					;
 2284:	  07C8			CSTS:	;	RETURNS CARRY = 1 IF THERE IS A CHARACTER WAITING FROM
 2285:					;	THE SYSTEM CONSOLE. IF NO CHARACTER THE READY CHARACTER
 2286:					;	WILL BE CLEARED
 2287:					;
 2288:					;***************************************************************
 2289:					;
 2290:	  07C8	30 32 03		JNB	BI,CSTS1	;BUBBLE STATUS
 2291:	  07CB	02 20 68		LJMP	2068H
 2292:	  07CE	30 1E 03	CSTS1:	JNB	CIUB,CSTS2	;SEE IF EXTERNAL CONSOLE
 2293:	  07D1	02 40 36		LJMP	4036H
 2294:	  07D4	A2 98		CSTS2:	MOV	C,RI
 2295:	  07D6	22			RET
 2296:					;
 2297:				;
 2298:				;*****************************************************************************
 2299:				;****** Sorry - but the ego message had to be disabled ***********************
 2300:				;
 2301:				;C_EX0:  MOV	 DPTR,#WB	 ;EGO MESSAGE
 2302:				;	 ACALL	 ROM_P
 2303:				;
 2304:				;*****************************************************************************
 2305:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 43



 Line  I  Addr  Code            Source

 2306:	  07D7	C2 35		C_EX:	CLR	CNT_S		;NO OUTPUT STOP
 2307:	  07D9	12 0C 31		LCALL	SPRINT1 	;ASSURE CONSOLE
 2308:	  07DC	D1 A5			ACALL	CRLF
 2309:				;
 2310:				;*****************************************************************************
 2311:				;****** Sorry - but the ego message had to be disabled ***********************
 2312:				;
 2313:				;	 JBC	 JKBIT,C_EX0
 2314:				;
 2315:				;*****************************************************************************
 2316:				;
 2317:	  07DE	30 2F 7F		JNB	DIRF,SSTOP0
 2318:	  07E1	A1 40			AJMP	C_K		;CLEAR COB AND EXIT
 2319:					;
 2320:	  07E3	E5 48		T_CMP:	MOV	A,TVH		;COMPARE TIMER TO SP_H AND SP_L
 2321:	  07E5	A9 49			MOV	R1,TVL
 2322:	  07E7	B5 48 F9		CJNE	A,TVH,T_CMP
 2323:	  07EA	C9			XCH	A,R1
 2324:	  07EB	95 4C			SUBB	A,SP_L
 2325:	  07ED	E9			MOV	A,R1
 2326:	  07EE	95 4B			SUBB	A,SP_H
 2327:	  07F0	22			RET
 2328:					;
 2329:					;*************************************************************
 2330:					;
 2331:	  07F1			BR0:	; Trap the timer interrupt
 2332:					;
 2333:					;*************************************************************
 2334:					;
 2335:	  07F1	F1 E3			CALL	T_CMP		;COMPARE TIMER
 2336:	  07F3	40 40			JC	BCHR1		;EXIT IF TEST FAILS
 2337:	  07F5	D2 14			SETB	OTI		;DOING THE TIMER INTERRUPT
 2338:	  07F7	C2 10			CLR	OTS		;CLEAR TIMER BIT
 2339:	  07F9	A2 11			MOV	C,INPROG	;SAVE IN PROGRESS
 2340:	  07FB	92 2B			MOV	ISAV,C
 2341:	  07FD	90 01 26		MOV	DPTR,#TIV
 2342:	  0800	80 3C			SJMP	BR2
 2343:					;
 2344:					;***************************************************************
 2345:					;
 2346:					; The command action routine - RUN
 2347:					;
 2348:					;***************************************************************
 2349:					;
 2350:	  0802	12 06 62	CRUN:	LCALL	CNEW1		;CLEAR THE STORAGE ARRAYS
 2351:	  0805	71 D0			ACALL	SRESTR1 	;GET THE STARTING ADDRESS
 2352:	  0807	51 A4			ACALL	B_C
 2353:	  0809	60 4A			JZ	CMNDLK		;IF NULL GO TO COMMAND MODE
 2354:					;
 2355:	  080B	D1 B8			ACALL	T_DP
 2356:	  080D	F1 23			ACALL	B_TXA		;BUMP TO STARTING LINE
 2357:					;
 2358:	  080F	91 3C		CILOOP: ACALL	SP0		;DO A CR AND A LF
 2359:	  0811	C2 2F		CILOOP1:CLR	DIRF		;NOT IN DIRECT MODE
 2360:					;
 2361:					;INTERPERTER DRIVER

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 44



 Line  I  Addr  Code            Source

 2362:					;
 2363:	  0813	85 3E 81	ILOOP:	MOV	SP,SPSAV	;RESTORE THE STACK EACH TIME
 2364:	  0816	20 2F 06		JB	DIRF,ILOOP1	;NO INTERRUPTS IF IN DIRECT MODE
 2365:	  0819	85 0A 42		MOV	INTXAH,TXAH	;SAVE THE TEXT POINTER
 2366:	  081C	85 08 43		MOV	INTXAL,TXAL
 2367:	  081F	12 07 8D	ILOOP1: LCALL	BCK		;GET CONSOLE STATUS
 2368:	  0822	20 2F 24		JB	DIRF,I_L	;DIRECT MODE
 2369:	  0825	B0 18			ANL	C,/GTRD 	;SEE IF CHARACTER READY
 2370:	  0827	50 06			JNC	BCHR		;NO CHARACTER = NO CARRY
 2371:					;
 2372:					; DO TRAP OPERATION
 2373:					;
 2374:	  0829	90 01 00		MOV	DPTR,#GTB	;SAVE TRAP CHARACTER
 2375:	  082C	F0			MOVX	@DPTR,A
 2376:	  082D	D2 18			SETB	GTRD		;SAYS READ A BYTE
 2377:					;
 2378:	  082F	20 14 17	BCHR:	JB	OTI,I_L 	;EXIT IF TIMER INTERRUPT IN PROGRESS
 2379:	  0832	20 10 BC		JB	OTS,BR0 	;TEST TIMER VALUE IF SET
 2380:	  0835	30 16 11	BCHR1:	JNB	INTPEN,I_L	;SEE IF INTERRUPT PENDING
 2381:	  0838	20 11 0E		JB	INPROG,I_L	;DON'T DO IT AGAIN IF IN PROGRESS
 2382:	  083B	90 01 20		MOV	DPTR,#INTLOC	;POINT AT INTERRUPT LOCATION
 2383:					;
 2384:	  083E	7C 02		BR2:	MOV	R4,#GTYPE	;SETUP FOR A FORCED GOSUB
 2385:	  0840	71 35			ACALL	SGS1		;PUT TXA ON STACK
 2386:	  0842	D2 11			SETB	INPROG		;INTERRUPT IN PROGRESS
 2387:					;
 2388:	  0844	12 05 73	ERL4:	CALL	L20DPI
 2389:	  0847	41 F8			AJMP	D_L1		;GET THE LINE NUMBER
 2390:					;
 2391:	  0849	11 F8		I_L:	ACALL	ISTAT		;LOOP
 2392:	  084B	F1 17			ACALL	CLN_UP		;FINISH IT OFF
 2393:	  084D	50 C4			JNC	ILOOP		;LOOP ON THE DRIVER
 2394:	  084F	30 2F 03		JNB	DIRF,CMNDLK	;CMND1 IF IN RUN MODE
 2395:	  0852	02 17 94		LJMP	CMNDR		;DON'T PRINT READY
 2396:					;
 2397:	  0855	02 17 87	CMNDLK: JMP	CMND1		;DONE
 2398:					;**************************************************************
 2399:					;
 2400:					; The Statement Action Routine - STOP
 2401:					;
 2402:					;**************************************************************
 2403:					;
 2404:	  0858	F1 17		SSTOP:	ACALL	CLN_UP		;FINISH OFF THIS LINE
 2405:	  085A	85 0A 42		MOV	INTXAH,TXAH	;SAVE TEXT POINTER FOR CONT
 2406:	  085D	85 08 43		MOV	INTXAL,TXAL
 2407:					;
 2408:	  0860	D2 17		SSTOP0: SETB	CONB		;CONTINUE WILL WORK
 2409:	  0862	90 00 EE		MOV	DPTR,#STP	;PRINT THE STOP MESSAGE
 2410:	  0865	D2 20			SETB	STOPBIT 	;SET FOR ERROR ROUTINE
 2411:	  0867	02 18 AD		JMP	ERRS		;JUMP TO ERROR ROUTINE
 2412:					;
 2413:					;**************************************************************
 2414:					;
 2415:					; ITRAP - Trap special function register operators
 2416:					;
 2417:					;**************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 45



 Line  I  Addr  Code            Source

 2418:					;
 2419:	  086A	B4 C8 05	ITRAP:	CJNE	A,#TMR0,ITRAP1	;TIMER 0
 2420:	  086D	8B 8C			MOV	TH0,R3
 2421:	  086F	89 8A			MOV	TL0,R1
 2422:	  0871	22			RET
 2423:					;
 2424:	  0872	B4 C9 05	ITRAP1: CJNE	A,#TMR1,ITRAP2	;TIMER 1
 2425:	  0875	8B 8D			MOV	TH1,R3
 2426:	  0877	89 8B			MOV	TL1,R1
 2427:	  0879	22			RET
 2428:					;
 2429:	  087A	B4 CA 05	ITRAP2: CJNE	A,#TMR2,ITRAP3	;TIMER 2
 2430:	  087D	8B CD		ITRAP21:MOV	TH2,R3
 2431:	  087F	89 CC			MOV	TL2,R1
 2432:				;	DB	8BH		;MOV R3 DIRECT OP CODE
 2433:				;	DB	0CDH		;T2H LOCATION
 2434:				;	DB	89H		;MOV R1 DIRECT OP CODE
 2435:				;	DB	0CCH		;T2L LOCATION
 2436:	  0881	22			RET
 2437:					;
 2438:	  0882	B4 CE 05	ITRAP3: CJNE	A,#TRC2,RCL1	;RCAP2 TOKEN
 2439:	  0885	8B CB		RCL:	MOV	RCAPH2,R3
 2440:	  0887	89 CA			MOV	RCAPL2,R1
 2441:				;	DB	8BH		;MOV R3 DIRECT OP CODE
 2442:				;	DB	0CBH		;RCAP2H LOCATION
 2443:				;	DB	89H		;MOV R1 DIRECT OP CODE
 2444:				;	DB	0CAH		;RCAP2L LOCATION
 2445:	  0889	22			RET
 2446:					;
 2447:	  088A	31 D5		RCL1:	ACALL	R3CK		;MAKE SURE THAT R3 IS ZERO
 2448:	  088C	B4 CB 03		CJNE	A,#TT2C,RCL2
 2449:	  088F	89 C8			MOV	T2CON,R1
 2450:				;	DB	89H		;MOV R1 DIRECT OP CODE
 2451:				;	DB	0C8H		;T2CON LOCATION
 2452:	  0891	22			RET
 2453:					;
 2454:	  0892	B4 C6 03	RCL2:	CJNE	A,#T_IE,RCL3	;IE TOKEN
 2455:	  0895	89 A8			MOV	IE,R1
 2456:	  0897	22			RET
 2457:					;
 2458:	  0898	B4 C7 03	RCL3:	CJNE	A,#T_IP,RCL4	;IP TOKEN
 2459:	  089B	89 B8			MOV	IP,R1
 2460:	  089D	22			RET
 2461:					;
 2462:	  089E	B4 CC 03	RCL4:	CJNE	A,#TTC,RCL5	;TCON TOKEN
 2463:	  08A1	89 88			MOV	TCON,R1
 2464:	  08A3	22			RET
 2465:					;
 2466:	  08A4	B4 CD 03	RCL5:	CJNE	A,#TTM,RCL6	;TMOD TOKEN
 2467:	  08A7	89 89			MOV	TMOD,R1
 2468:	  08A9	22			RET
 2469:					;
 2470:	  08AA	B4 CF 32	RCL6:	CJNE	A,#T_P1,T_T2	;P1 TOKEN
 2471:	  08AD	89 90			MOV	P1,R1
 2472:	  08AF	22			RET
 2473:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 46



 Line  I  Addr  Code            Source

 2474:					;***************************************************************
 2475:					;
 2476:					; T_TRAP - Trap special operators
 2477:					;
 2478:					;***************************************************************
 2479:					;
 2480:	  08B0	F5 0F		T_T:	MOV	TEMP5,A 	;SAVE THE TOKEN
 2481:	  08B2	D1 D7			ACALL	GCI1		;BUMP POINTER
 2482:	  08B4	31 C8			ACALL	SLET2		;EVALUATE AFTER =
 2483:	  08B6	E5 0F			MOV	A,TEMP5 	;GET THE TOKEN BACK
 2484:	  08B8	B4 C3 03		CJNE	A,#T_XTAL,T_T01
 2485:	  08BB	02 16 5C		LJMP	AXTAL1		;SET UP CRYSTAL
 2486:					;
 2487:	  08BE	D1 90		T_T01:	ACALL	IFIXL		;R3:R1 HAS THE TOS
 2488:	  08C0	E5 0F			MOV	A,TEMP5 	;GET THE TOKEN AGAIN
 2489:	  08C2	B4 C4 09		CJNE	A,#T_MTOP,T_T1	;SEE IF MTOP TOKEN
 2490:	  08C5	90 01 0A		MOV	DPTR,#MEMTOP
 2491:	  08C8	12 06 05		CALL	S31DP
 2492:	  08CB	02 06 64		JMP	RCLEAR		;CLEAR THE MEMORY
 2493:					;
 2494:	  08CE	B4 C5 99	T_T1:	CJNE	A,#T_TIME,ITRAP ;SEE IF A TIME TOKEN
 2495:	  08D1	A2 AF			MOV	C,EA		;SAVE INTERRUPTS
 2496:	  08D3	C2 AF			CLR	EA		;NO TIMER 0 INTERRUPTS DURING LOAD
 2497:	  08D5	8B 48			MOV	TVH,R3		;SAVE THE TIME
 2498:	  08D7	89 49			MOV	TVL,R1
 2499:				;
 2500:				;*****************************************************************************
 2501:				;****** Reset millisecond counter on "TIME=" *********************************
 2502:				;****** Boehling 2 ***********************************************************
 2503:				;
 2504:	  08D9	75 47 00		mov	MILLIV,#0	;Reset millisecond counter
 2505:				;
 2506:				;*****************************************************************************
 2507:				;
 2508:	  08DC	92 AF			MOV	EA,C		;RESTORE INTERRUPTS
 2509:	  08DE	22			RET			;EXIT
 2510:					;
 2511:	  08DF	B4 D0 56	T_T2:	CJNE	A,#T_PC,INTERX	;PCON TOKEN
 2512:	  08E2	89 87			MOV	PCON,R1
 2513:				;	DB	89H		;MOV DIRECT, R1 OP CODE
 2514:				;	DB	87H		;ADDRESS OF PCON
 2515:	  08E4	22			RET			;EXIT
 2516:					;
 2517:	  08E5	B4 D1 C8	T_TRAP: CJNE	A,#T_ASC,T_T	;SEE IF ASC TOKEN
 2518:	  08E8	D1 CB			ACALL	IGC		;EAT IT AND GET THE NEXT CHARACTER
 2519:	  08EA	B4 24 4B		CJNE	A,#'$',INTERX   ;ERROR IF NOT A STRING
 2520:	  08ED	51 1E			ACALL	CSY		;CALCULATE ADDRESS
 2521:	  08EF	B1 AD			ACALL	X3120
 2522:	  08F1	12 14 B4		CALL	TWO_EY
 2523:	  08F4	31 DD			ACALL	SPEOP1		;EVALUATE AFTER EQUALS
 2524:	  08F6	21 21			AJMP	ISTAX1		;SAVE THE CHARACTER
 2525:					;
 2526:					;**************************************************************
 2527:					;
 2528:					;INTERPERT THE STATEMENT POINTED TO BY TXAL AND TXAH
 2529:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 47



 Line  I  Addr  Code            Source

 2530:					;**************************************************************
 2531:					;
 2532:	  08F8	D1 CD		ISTAT:	ACALL	GC		;GET THR FIRST CHARACTER
 2533:	  08FA	30 2D 0E		JNB	XBIT,IAT	;TRAP TO EXTERNAL RUN PACKAGE
 2534:	  08FD	B4 20 00		CJNE	A,#20H,ISTAT1
 2535:	  0900	50 09		ISTAT1: JNC	IAT
 2536:	  0902	12 20 70		LCALL	2070H		;LET THE USER SET UP THE DPTR
 2537:	  0905	D1 D7			ACALL	GCI1
 2538:	  0907	54 0F			ANL	A,#0FH		;STRIP OFF BIAS
 2539:	  0909	80 51			SJMP	ISTA1
 2540:					;
 2541:	  090B	B4 C3 00	IAT:	CJNE	A,#T_XTAL,IAT1
 2542:	  090E	50 D5		IAT1:	JNC	T_TRAP
 2543:	  0910	30 E7 5B		JNB	ACC.7,SLET	;IMPLIED LET IF BIT 7 NOT SET
 2544:	  0913	B4 BC 06		CJNE	A,#T_UOP+12,ISTAX	;DBYTE TOKEN
 2545:	  0916	31 D9			ACALL	SPEOP		;EVALUATE SPECIAL OPERATOR
 2546:	  0918	31 D5			ACALL	R3CK		;CHECK LOCATION
 2547:	  091A	F7			MOV	@R1,A		;SAVE IT
 2548:	  091B	22			RET
 2549:					;
 2550:	  091C	B4 BD 06	ISTAX:	CJNE	A,#T_UOP+13,ISTAY	;XBYTE TOKEN
 2551:	  091F	31 D9			ACALL	SPEOP
 2552:					;
 2553:	  0921	8B A0		ISTAX1: MOV	P2,R3
 2554:	  0923	F3			MOVX	@R1,A
 2555:	  0924	22			RET
 2556:					;
 2557:	  0925	B4 AB 00	ISTAY:	CJNE	A,#T_CR+1,ISTAY1;TRAP NEW OPERATORS
 2558:	  0928	40 09		ISTAY1: JC	I_S
 2559:	  092A	B4 B0 00		CJNE	A,#0B0H,ISTAY2	;SEE IF TOO BIG
 2560:	  092D	50 09		ISTAY2: JNC	INTERX
 2561:	  092F	24 F9			ADD	A,#0F9H 	;BIAS FOR LOOKUP TABLE
 2562:	  0931	80 1D			SJMP	ISTA0		;DO THE OPERATION
 2563:					;
 2564:	  0933	B4 A4 00	I_S:	CJNE	A,#T_LAST,I_S1	;MAKE SURE AN INITIAL RESERVED WORD
 2565:	  0936	40 03		I_S1:	JC	INTERX1 	;ERROR IF NOT
 2566:					;
 2567:	  0938	02 18 85	INTERX: LJMP	E1XX		;SYNTAX ERROR
 2568:					;
 2569:	  093B	30 2F 12	INTERX1:JNB	DIRF,ISTA0	;EXECUTE ALL STATEMENTS IF IN RUN MODE
 2570:	  093E	B4 90 00		CJNE	A,#T_DIR,INTERX2;SEE IF ON TOKEN
 2571:	  0941	40 0D		INTERX2:JC	ISTA0		;OK IF DIRECT
 2572:	  0943	B4 A0 02		CJNE	A,#T_GOSB+1,INTERX3;SEE IF FOR
 2573:	  0946	80 08			SJMP	ISTA0		;FOR IS OK
 2574:	  0948	B4 97 02	INTERX3:CJNE	A,#T_REM+1,INTERX4	;NEXT IS OK
 2575:	  094B	80 03			SJMP	ISTA0
 2576:	  094D	B4 96 E8	INTERX4:CJNE	A,#T_STOP+6,INTERX	;SO IS REM
 2577:					;
 2578:	  0950	D1 D7		ISTA0:	ACALL	GCI1		;ADVANCE THE TEXT POINTER
 2579:	  0952	90 01 23		MOV	DPTR,#STATD	;POINT DPTR TO LOOKUP TABLE
 2580:	  0955	B4 80 02		CJNE	A,#T_GOTO-3,ISTA01;SEE IF LET TOKEN
 2581:	  0958	80 9E			SJMP	ISTAT		;WASTE LET TOKEN
 2582:	  095A	54 3F		ISTA01: ANL	A,#3FH		;STRIP OFF THE GARBAGE
 2583:					;
 2584:	  095C	23		ISTA1:	RL	A		;ROTATE FOR OFFSET
 2585:	  095D	25 82			ADD	A,DPL		;BUMP

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 48



 Line  I  Addr  Code            Source

 2586:	  095F	F5 82			MOV	DPL,A		;SAVE IT
 2587:	  0961	E4			CLR	A
 2588:	  0962	93			MOVC	A,@A+DPTR	;GET HIGH BYTE
 2589:	  0963	C0 E0			PUSH	ACC		;SAVE IT
 2590:	  0965	A3			INC	DPTR
 2591:	  0966	E4			CLR	A
 2592:	  0967	93			MOVC	A,@A+DPTR	;GET LOW BYTE
 2593:	  0968	D0 83			POP	DPH
 2594:	  096A	F5 82			MOV	DPL,A
 2595:					;
 2596:	  096C	E4		AC1:	CLR	A
 2597:	  096D	73			JMP	@A+DPTR 	;GO DO IT
 2598:					;
 2599:					;***************************************************************
 2600:					;
 2601:					; The statement action routine - LET
 2602:					;
 2603:					;***************************************************************
 2604:					;
 2605:	  096E	D1 BF		SLET:	ACALL	S_C		;CHECK FOR POSSIBLE STRING
 2606:	  0970	40 50			JC	SLET0		;NO STRING
 2607:	  0972	C2 15			CLR	LINEB		;USED STRINGS
 2608:					;
 2609:	  0974	12 05 79		CALL	X31DP		;PUT ADDRESS IN DPTR
 2610:	  0977	7F EA			MOV	R7,#T_EQU	;WASTE =
 2611:	  0979	91 E5			ACALL	EATC
 2612:	  097B	D1 CD			ACALL	GC		;GET THE NEXT CHARACTER
 2613:	  097D	B4 22 11		CJNE	A,#'"',S_3      ;CHECK FOR A "
 2614:	  0980	AF 3F			MOV	R7,S_LEN	;GET THE STRING LENGTH
 2615:					;
 2616:	  0982	D1 D7		S_0:	ACALL	GCI1		;BUMP PAST "
 2617:	  0984	D1 E1			ACALL	DELTST		;CHECK FOR DELIMITER
 2618:	  0986	60 B0			JZ	INTERX		;EXIT IF CARRIAGE RETURN
 2619:	  0988	F0			MOVX	@DPTR,A 	;SAVE THE CHARACTER
 2620:	  0989	B4 22 26		CJNE	A,#'"',S_1      ;SEE IF DONE
 2621:					;
 2622:	  098C	74 0D		S_E:	MOV	A,#CR		;PUT A CR IN A
 2623:	  098E	F0			MOVX	@DPTR,A 	;SAVE CR
 2624:	  098F	C1 D7			AJMP	GCI1
 2625:					;
 2626:	  0991	C0 83		S_3:	PUSH	DPH
 2627:	  0993	C0 82			PUSH	DPL		;SAVE DESTINATION
 2628:	  0995	D1 BF			ACALL	S_C		;CALCULATE SOURCE
 2629:	  0997	40 9F			JC	INTERX		;ERROR IF CARRY
 2630:	  0999	D0 00			POP	R0B0		;GET DESTINATION BACK
 2631:	  099B	D0 02			POP	R2B0
 2632:					;
 2633:	  099D	AF 3F		SSOOP:	MOV	R7,S_LEN	;SET UP COUNTER
 2634:					;
 2635:	  099F	12 15 96	S_4:	CALL	TBYTE		;TRANSFER THE BYTE
 2636:	  09A2	B4 0D 01		CJNE	A,#CR,S_41	;EXIT IF A CR
 2637:	  09A5	22			RET
 2638:	  09A6	DF 05		S_41:	DJNZ	R7,S_5		;BUMP COUNTER
 2639:	  09A8	74 0D			MOV	A,#CR		;SAVE A CR
 2640:	  09AA	F2			MOVX	@R0,A
 2641:	  09AB	C1 4E			AJMP	EIGP		;PRINT EXTRA IGNORED

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 49



 Line  I  Addr  Code            Source

 2642:					;
 2643:					;
 2644:	  09AD	12 15 76	S_5:	CALL	INC3210 	;BUMP POINTERS
 2645:	  09B0	80 ED			SJMP	S_4		;LOOP
 2646:					;
 2647:	  09B2	DF 06		S_1:	DJNZ	R7,S_11 	;SEE IF DONE
 2648:	  09B4	31 8C			ACALL	S_E
 2649:	  09B6	D1 4E			ACALL	EIGP		;PRINT EXTRA IGNORED
 2650:	  09B8	C1 EC			AJMP	FINDCR		;GO FIND THE END
 2651:	  09BA	A3		S_11:	INC	DPTR		;BUMP THE STORE POINTER
 2652:	  09BB	80 C5			SJMP	S_0		;CONTINUE TO LOOP
 2653:					;
 2654:	  09BD	90 18 28	E3XX:	MOV	DPTR,#E3X	;BAD ARG ERROR
 2655:	  09C0	81 0E			AJMP	EK
 2656:					;
 2657:	  09C2	31 C6		SLET0:	ACALL	SLET1
 2658:	  09C4	E1 D3			AJMP	POPAS		;COPY EXPRESSION TO VARIABLE
 2659:					;
 2660:	  09C6	F1 01		SLET1:	ACALL	VAR_ER		;CHECK FOR A"VARIABLE"
 2661:					;
 2662:	  09C8	C0 02		SLET2:	PUSH	R2B0		;SAVE THE VARIABLE ADDRESS
 2663:	  09CA	C0 00			PUSH	R0B0
 2664:	  09CC	7F EA			MOV	R7,#T_EQU	;GET EQUAL TOKEN
 2665:	  09CE	F1 41			ACALL	WE
 2666:	  09D0	D0 01			POP	R1B0		;POP VARIABLE TO R3:R1
 2667:	  09D2	D0 03			POP	R3B0
 2668:	  09D4	22			RET			;EXIT
 2669:					;
 2670:	  09D5	BB 00 E5	R3CK:	CJNE	R3,#00H,E3XX	;CHECK TO SEE IF R3 IS ZERO
 2671:	  09D8	22			RET
 2672:					;
 2673:	  09D9	D1 D7		SPEOP:	ACALL	GCI1		;BUMP TXA
 2674:	  09DB	91 DF			ACALL	P_E		;EVALUATE PAREN
 2675:	  09DD	31 C8		SPEOP1: ACALL	SLET2		;EVALUATE AFTER =
 2676:	  09DF	12 14 A1		CALL	TWOL		;R7:R6 GETS VALUE, R3:R1 GETS LOCATION
 2677:	  09E2	EE			MOV	A,R6		;SAVE THE VALUE
 2678:					;
 2679:	  09E3	BF 00 D7		CJNE	R7,#00H,E3XX	;R2 MUST BE = 0
 2680:	  09E6	22			RET
 2681:					;
 2682:					;**************************************************************
 2683:					;
 2684:					; ST_CAL - Calculate string Address
 2685:					;
 2686:					;**************************************************************
 2687:					;
 2688:	  09E7			IST_CAL:;
 2689:					;
 2690:	  09E7	D1 95			ACALL	I_PI		;BUMP TEXT, THEN EVALUATE
 2691:	  09E9	31 D5			ACALL	R3CK		;ERROR IF R3 <> 0
 2692:	  09EB	09			INC	R1		;BUMP FOR OFFSET
 2693:	  09EC	E9			MOV	A,R1		;ERROR IF R1 = 255
 2694:	  09ED	60 CE			JZ	E3XX
 2695:	  09EF	90 01 04		MOV	DPTR,#VARTOP	;GET TOP OF VARIABLE STORAGE
 2696:	  09F2	85 3F F0		MOV	B,S_LEN 	;MULTIPLY FOR LOCATION
 2697:	  09F5	51 10			ACALL	VARD		;CALCULATE THE LOCATION

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 50



 Line  I  Addr  Code            Source

 2698:	  09F7	90 01 0A		MOV	DPTR,#MEMTOP	;SEE IF BLEW IT
 2699:	  09FA	12 15 B0		CALL	FUL1
 2700:	  09FD	85 3F 82		MOV	DPL,S_LEN	;GET STRING LENGTH, DPH = 00H
 2701:	  0A00	15 83			DEC	DPH		;DPH = 0
 2702:					;
 2703:	  0A02	C3		DUBSUB: CLR	C
 2704:	  0A03	E9			MOV	A,R1
 2705:	  0A04	95 82			SUBB	A,DPL
 2706:	  0A06	F9			MOV	R1,A
 2707:	  0A07	EB			MOV	A,R3
 2708:	  0A08	95 83			SUBB	A,DPH
 2709:	  0A0A	FB			MOV	R3,A
 2710:	  0A0B	49			ORL	A,R1
 2711:	  0A0C	22			RET
 2712:					;
 2713:					;***************************************************************
 2714:					;
 2715:					;VARD - Calculate the offset base
 2716:					;
 2717:					;***************************************************************
 2718:					;
 2719:	  0A0D	75 F0 06	VARB:	MOV	B,#FPSIZ	;SET UP FOR OPERATION
 2720:					;
 2721:	  0A10	12 05 B0	VARD:	CALL	LDPTRI		;LOAD DPTR
 2722:	  0A13	E9			MOV	A,R1		;MULTIPLY BASE
 2723:	  0A14	A4			MUL	AB
 2724:	  0A15	25 82			ADD	A,DPL
 2725:	  0A17	F9			MOV	R1,A
 2726:	  0A18	E5 F0			MOV	A,B
 2727:	  0A1A	35 83			ADDC	A,DPH
 2728:	  0A1C	FB			MOV	R3,A
 2729:	  0A1D	22			RET
 2730:					;
 2731:					;*************************************************************
 2732:					;
 2733:	  0A1E			CSY:	; Calculate a biased string address and put in R3:R1
 2734:					;
 2735:					;*************************************************************
 2736:					;
 2737:	  0A1E	31 E7			ACALL	IST_CAL 	;CALCULATE IT
 2738:	  0A20	C0 03			PUSH	R3B0		;SAVE IT
 2739:	  0A22	C0 01			PUSH	R1B0
 2740:	  0A24	7F 2C			MOV	R7,#','         ;WASTE THE COMMA
 2741:	  0A26	91 E5			ACALL	EATC
 2742:	  0A28	D1 8E			ACALL	ONE		;GET THE NEXT EXPRESSION
 2743:	  0A2A	E9			MOV	A,R1		;CHECK FOR BOUNDS
 2744:	  0A2B	B5 3F 00		CJNE	A,S_LEN,CSY1
 2745:	  0A2E	50 8D		CSY1:	JNC	E3XX		;MUST HAVE A CARRY
 2746:	  0A30	19			DEC	R1		;BIAS THE POINTER
 2747:	  0A31	D0 E0			POP	ACC		;GET VALUE LOW
 2748:	  0A33	29			ADD	A,R1		;ADD IT TO BASE
 2749:	  0A34	F9			MOV	R1,A		;SAVE IT
 2750:	  0A35	D0 03			POP	R3B0		;GET HIGH ADDRESS
 2751:	  0A37	50 01			JNC	CSY2		;PROPAGATE THE CARRY
 2752:	  0A39	0B			INC	R3
 2753:	  0A3A	81 E3		CSY2:	AJMP	ERPAR		;WASTE THE RIGHT PAREN

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 51



 Line  I  Addr  Code            Source

 2754:					;
 2755:					;***************************************************************
 2756:					;
 2757:					; The statement action routine FOR
 2758:					;
 2759:					;***************************************************************
 2760:					;
 2761:	  0A3C	31 C6		SFOR:	ACALL	SLET1		;SET UP CONTROL VARIABLE
 2762:	  0A3E	C0 03			PUSH	R3B0		;SAVE THE CONTROL VARIABLE LOCATION
 2763:	  0A40	C0 01			PUSH	R1B0
 2764:	  0A42	F1 D3			ACALL	POPAS		;POP ARG STACK AND COPY CONTROL VAR
 2765:	  0A44	7F A6			MOV	R7,#T_TO	;GET TO TOKEN
 2766:	  0A46	F1 41			ACALL	WE
 2767:	  0A48	D1 CD			ACALL	GC		;GET NEXT CHARACTER
 2768:	  0A4A	B4 A7 06		CJNE	A,#T_STEP,SF2
 2769:	  0A4D	D1 D7			ACALL	GCI1		;EAT THE TOKEN
 2770:	  0A4F	F1 43			ACALL	EXPRB		;EVALUATE EXPRESSION
 2771:	  0A51	80 03			SJMP	SF21		;JUMP OVER
 2772:					;
 2773:	  0A53	12 14 43	SF2:	LCALL	PUSH_ONE	;PUT ONE ON THE STACK
 2774:					;
 2775:	  0A56	74 EF		SF21:	MOV	A,#-FSIZE	;ALLOCATE FSIZE BYTES ON THE CONTROL STACK
 2776:	  0A58	71 B1			ACALL	PUSHCS		;GET CS IN R0
 2777:	  0A5A	71 BD			ACALL	CSC		;CHECK CONTROL STACK
 2778:	  0A5C	7B 00			MOV	R3,#CSTKAH	;IN CONTROL STACK
 2779:	  0A5E	A9 00			MOV	R1,R0B0 	;STACK ADDRESS
 2780:	  0A60	F1 D3			ACALL	POPAS		;PUT STEP ON STACK
 2781:	  0A62	F1 D3			ACALL	POPAS		;PUT LIMIT ON STACK
 2782:	  0A64	D1 A2			ACALL	DP_T		;DPTR GETS TEXT
 2783:	  0A66	A8 01			MOV	R0,R1B0 	;GET THE POINTER
 2784:	  0A68	71 39			ACALL	T_X_S		;SAVE THE TEXT
 2785:	  0A6A	D0 08			POP	TXAL		;GET CONTROL VARIABLE
 2786:	  0A6C	D0 0A			POP	TXAH
 2787:	  0A6E	7C 01			MOV	R4,#FTYPE	;AND THE TYPE
 2788:	  0A70	71 39			ACALL	T_X_S		;SAVE IT
 2789:					;
 2790:	  0A72	D1 B8		SF3:	ACALL	T_DP		;GET THE TEXT POINTER
 2791:	  0A74	01 13			AJMP	ILOOP		;CONTINUE TO PROCESS
 2792:					;
 2793:					;**************************************************************
 2794:					;
 2795:					; The statement action routines - PUSH and POP
 2796:					;
 2797:					;**************************************************************
 2798:					;
 2799:	  0A76	F1 43		SPUSH:	ACALL	EXPRB		;PUT EXPRESSION ON STACK
 2800:	  0A78	D1 C6			ACALL	C_TST		;SEE IF MORE TO DO
 2801:	  0A7A	50 FA			JNC	SPUSH		;IF A COMMA PUSH ANOTHER
 2802:	  0A7C	22			RET
 2803:					;
 2804:					;
 2805:	  0A7D	F1 01		SPOP:	ACALL	VAR_ER		;GET VARIABLE
 2806:	  0A7F	F1 D1			ACALL	XPOP		;FLIP THE REGISTERS FOR POPAS
 2807:	  0A81	D1 C6			ACALL	C_TST		;SEE IF MORE TO DO
 2808:	  0A83	50 F8			JNC	SPOP
 2809:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 52



 Line  I  Addr  Code            Source

 2810:	  0A85	22		SPOP1:	RET
 2811:					;
 2812:					;***************************************************************
 2813:					;
 2814:					; The statement action routine - IF
 2815:					;
 2816:					;***************************************************************
 2817:					;
 2818:	  0A86	51 C7		SIF:	ACALL	RTST		;EVALUATE THE EXPRESSION
 2819:	  0A88	F9			MOV	R1,A		;SAVE THE RESULT
 2820:	  0A89	D1 CD			ACALL	GC		;GET THE CHARACTER AFTER EXPR
 2821:	  0A8B	B4 A5 02		CJNE	A,#T_THEN,SIF1	;SEE IF THEN TOKEN
 2822:	  0A8E	D1 D7			ACALL	GCI1		;WASTE THEN TOKEN
 2823:	  0A90	B9 00 0B	SIF1:	CJNE	R1,#0,T_F1	;CHECK R_OP RESULT
 2824:					;
 2825:	  0A93	7F A8		E_FIND: MOV	R7,#T_ELSE	;FIND ELSE TOKEN
 2826:	  0A95	D1 EE			ACALL	FINDC
 2827:	  0A97	60 EC			JZ	SPOP1		;EXIT IF A CR
 2828:	  0A99	D1 D7			ACALL	GCI1		;BUMP PAST TOKEN
 2829:	  0A9B	B4 A8 F5		CJNE	A,#T_ELSE,E_FIND;WASTE IF NO ELSE
 2830:					;
 2831:	  0A9E	F1 35		T_F1:	ACALL	INTGER		;SEE IF NUMBER
 2832:	  0AA0	50 56			JNC	D_L1		;EXECUTE LINE NUMBER
 2833:	  0AA2	01 F8			AJMP	ISTAT		;EXECUTE STATEMENT IN NOT
 2834:					;
 2835:	  0AA4	E0		B_C:	MOVX	A,@DPTR
 2836:	  0AA5	14			DEC	A
 2837:	  0AA6	20 E7 2E		JB	ACC.7,FL11
 2838:	  0AA9	22			RET
 2839:					;
 2840:					;***************************************************************
 2841:					;
 2842:					; The statement action routine - GOTO
 2843:					;
 2844:					;***************************************************************
 2845:					;
 2846:	  0AAA	51 F2		SGOTO:	ACALL	RLINE		;R2:R0 AND DPTR GET INTGER
 2847:					;
 2848:	  0AAC	D1 B8		SGT1:	ACALL	T_DP		;TEXT POINTER GETS DPTR
 2849:					;
 2850:	  0AAE	10 25 08		JBC	RETBIT,SGT2	;SEE IF RETI EXECUTED
 2851:					;
 2852:	  0AB1	30 15 03		JNB	LINEB,SGT11	;SEE IF A LINE WAS EDITED
 2853:	  0AB4	12 06 62		LCALL	CNEW1		;CLEAR THE MEMORY IF SET
 2854:	  0AB7	01 11		SGT11:	AJMP	CILOOP1 	;CLEAR DIRF AND LOOP
 2855:					;
 2856:	  0AB9	10 14 05	SGT2:	JBC	OTI,SGT21	;SEE IF TIMER INTERRUPT
 2857:	  0ABC	53 22 BD		ANL	34,#10111101B	;CLEAR INTERRUPTS
 2858:	  0ABF	01 13			AJMP	ILOOP		;EXECUTE
 2859:	  0AC1	A2 2B		SGT21:	MOV	C,ISAV
 2860:	  0AC3	92 11			MOV	INPROG,C
 2861:	  0AC5	01 13			AJMP	ILOOP		;RESTORE INTERRUPTS AND RET
 2862:					;
 2863:					;
 2864:					;*************************************************************
 2865:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 53



 Line  I  Addr  Code            Source

 2866:	  0AC7			RTST:	; Test for ZERO
 2867:					;
 2868:					;*************************************************************
 2869:					;
 2870:	  0AC7	F1 43			ACALL	EXPRB		;EVALUATE EXPRESSION
 2871:	  0AC9	12 12 4F		CALL	INC_ASTKA	;BUMP ARG STACK
 2872:	  0ACC	60 02			JZ	RTST1		;EXIT WITH ZERO OR 0FFH
 2873:	  0ACE	74 FF			MOV	A,#0FFH
 2874:	  0AD0	22		RTST1:	RET
 2875:					;
 2876:					;
 2877:					;**************************************************************
 2878:					;
 2879:					; GLN - get the line number in R2:R0, return in DPTR
 2880:					;
 2881:					;**************************************************************
 2882:					;
 2883:	  0AD1	D1 9B		GLN:	ACALL	DP_B		;GET THE BEGINNING ADDRESS
 2884:					;
 2885:	  0AD3	E0		FL1:	MOVX	A,@DPTR 	;GET THE LENGTH
 2886:	  0AD4	FF			MOV	R7,A		;SAVE THE LENGTH
 2887:	  0AD5	DF 05			DJNZ	R7,FL3		;SEE IF END OF FILE
 2888:					;
 2889:	  0AD7	90 1F B5	FL11:	MOV	DPTR,#E10X	;NO LINE NUMBER
 2890:	  0ADA	81 0E			AJMP	EK		;HANDLE THE ERROR
 2891:					;
 2892:	  0ADC	20 E7 F8	FL3:	JB	ACC.7,FL11	;CHECK FOR BIT 7
 2893:	  0ADF	A3			INC	DPTR		;POINT AT HIGH BYTE
 2894:	  0AE0	E0			MOVX	A,@DPTR 	;GET HIGH BYTE
 2895:	  0AE1	B5 02 08		CJNE	A,R2B0,FL2	;SEE IF MATCH
 2896:	  0AE4	A3			INC	DPTR		;BUMP TO LOW BYTE
 2897:	  0AE5	1F			DEC	R7		;ADJUST AGAIN
 2898:	  0AE6	E0			MOVX	A,@DPTR 	;GET THE LOW BYTE
 2899:	  0AE7	B5 00 02		CJNE	A,R0B0,FL2	;SEE IF LOW BYTE MATCH
 2900:	  0AEA	A3			INC	DPTR		;POINT AT FIRST CHARACTER
 2901:	  0AEB	22			RET			;FOUND IT
 2902:					;
 2903:	  0AEC	EF		FL2:	MOV	A,R7		;GET THE LENGTH COUNTER
 2904:	  0AED	12 05 DE		CALL	ADDPTR		;ADD A TO DATA POINTER
 2905:	  0AF0	80 E1			SJMP	FL1		;LOOP
 2906:					;
 2907:					;
 2908:					;*************************************************************
 2909:					;
 2910:					;RLINE - Read in ASCII string, get line, and clean it up
 2911:					;
 2912:					;*************************************************************
 2913:					;
 2914:	  0AF2	F1 30		RLINE:	ACALL	INTERR		;GET THE INTEGER
 2915:					;
 2916:	  0AF4	51 D1		RL1:	ACALL	GLN
 2917:	  0AF6	E1 17			AJMP	CLN_UP
 2918:					;
 2919:					;
 2920:	  0AF8	51 D1		D_L1:	ACALL	GLN		;GET THE LINE
 2921:	  0AFA	41 AC			AJMP	SGT1		;EXECUTE THE LINE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 54



 Line  I  Addr  Code            Source

 2922:					;
 2923:					;***************************************************************
 2924:					;
 2925:					; The statement action routines WHILE and UNTIL
 2926:					;
 2927:					;***************************************************************
 2928:					;
 2929:	  0AFC	51 C7		SWHILE: ACALL	RTST		;EVALUATE RELATIONAL EXPRESSION
 2930:	  0AFE	F4			CPL	A
 2931:	  0AFF	80 02			SJMP	S_WU
 2932:					;
 2933:	  0B01	51 C7		SUNTIL: ACALL	RTST		;EVALUATE RELATIONAL EXPRESSION
 2934:					;
 2935:	  0B03	7C 03		S_WU:	MOV	R4,#DTYPE	;DO EXPECTED
 2936:	  0B05	FD			MOV	R5,A		;SAVE R_OP RESULT
 2937:	  0B06	80 0C			SJMP	SR0		;GO PROCESS
 2938:					;
 2939:					;
 2940:					;***************************************************************
 2941:					;
 2942:	  0B08			CNULL:	; The Command Action Routine - NULL
 2943:					;
 2944:					;***************************************************************
 2945:					;
 2946:	  0B08	F1 30			ACALL	INTERR		;GET AN INTEGER FOLLOWING NULL
 2947:	  0B0A	88 15			MOV	NULLCT,R0	;SAVE THE NULLCOUNT
 2948:	  0B0C	01 55			AJMP	CMNDLK		;JUMP TO COMMAND MODE
 2949:					;
 2950:					;***************************************************************
 2951:					;
 2952:					; The statement action routine - RETI
 2953:					;
 2954:					;***************************************************************
 2955:					;
 2956:	  0B0E	D2 25		SRETI:	SETB	RETBIT		;SAYS THAT RETI HAS BEEN EXECUTED
 2957:					;
 2958:					;***************************************************************
 2959:					;
 2960:					; The statement action routine - RETURN
 2961:					;
 2962:					;***************************************************************
 2963:					;
 2964:	  0B10	7C 02		SRETRN: MOV	R4,#GTYPE	;MAKE SURE OF GOSUB
 2965:	  0B12	7D 55			MOV	R5,#55H 	;TYPE RETURN TYPE
 2966:					;
 2967:	  0B14	71 4B		SR0:	ACALL	CSETUP		;SET UP CONTROL STACK
 2968:	  0B16	E2			MOVX	A,@R0		;GET RETURN TEXT ADDRESS
 2969:	  0B17	F5 83			MOV	DPH,A
 2970:	  0B19	08			INC	R0
 2971:	  0B1A	E2			MOVX	A,@R0
 2972:	  0B1B	F5 82			MOV	DPL,A
 2973:	  0B1D	08			INC	R0		;POP CONTROL STACK
 2974:	  0B1E	E0			MOVX	A,@DPTR 	;SEE IF GOSUB WAS THE LAST STATEMENT
 2975:	  0B1F	B4 01 02		CJNE	A,#EOF,SR01
 2976:	  0B22	01 55			AJMP	CMNDLK
 2977:	  0B24	ED		SR01:	MOV	A,R5		;GET TYPE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 55



 Line  I  Addr  Code            Source

 2978:	  0B25	60 85			JZ	SGT1		;EXIT IF ZERO
 2979:	  0B27	88 11			MOV	CSTKA,R0	;POP THE STACK
 2980:	  0B29	F4			CPL	A		;OPTION TEST, 00H, 55H, 0FFH, NOW 55H
 2981:	  0B2A	70 80			JNZ	SGT1		;MUST BE GOSUB
 2982:	  0B2C	22			RET			;NORMAL FALL THRU EXIT FOR NO MATCH
 2983:					;
 2984:					;***************************************************************
 2985:					;
 2986:					; The statement action routine - GOSUB
 2987:					;
 2988:					;***************************************************************
 2989:					;
 2990:	  0B2D	51 F2		SGOSUB: ACALL	RLINE		;NEW TXA IN DPTR
 2991:					;
 2992:	  0B2F	7C 02		SGS0:	MOV	R4,#GTYPE
 2993:	  0B31	71 35			ACALL	SGS1		;SET EVERYTHING UP
 2994:	  0B33	41 72			AJMP	SF3		;EXIT
 2995:					;
 2996:	  0B35	74 FD		SGS1:	MOV	A,#-3		;ALLOCATE 3 BYTES ON CONTROL STACK
 2997:	  0B37	71 B1			ACALL	PUSHCS
 2998:					;
 2999:	  0B39	75 A0 00	T_X_S:	MOV	P2,#CSTKAH	;SET UP PORT FOR CONTROL STACK
 3000:	  0B3C	E5 08			MOV	A,TXAL		;GET RETURN ADDRESS AND SAVE IT
 3001:	  0B3E	F2			MOVX	@R0,A
 3002:	  0B3F	18			DEC	R0
 3003:	  0B40	E5 0A			MOV	A,TXAH
 3004:	  0B42	F2			MOVX	@R0,A
 3005:	  0B43	18			DEC	R0
 3006:	  0B44	EC			MOV	A,R4		;GET TYPE
 3007:	  0B45	F2			MOVX	@R0,A		;SAVE TYPE
 3008:	  0B46	22			RET			;EXIT
 3009:					;
 3010:					;
 3011:	  0B47	74 03		CS1:	MOV	A,#3		;POP 3 BYTES
 3012:	  0B49	71 B1			ACALL	PUSHCS
 3013:					;
 3014:	  0B4B	A8 11		CSETUP: MOV	R0,CSTKA	;GET CONTROL STACK
 3015:	  0B4D	75 A0 00		MOV	P2,#CSTKAH
 3016:	  0B50	E2			MOVX	A,@R0		;GET BYTE
 3017:	  0B51	B5 04 02		CJNE	A,R4B0,CSETUP1	;SEE IF TYPE MATCH
 3018:	  0B54	08			INC	R0
 3019:	  0B55	22			RET
 3020:	  0B56	60 69		CSETUP1:JZ	E4XX		;EXIT IF STACK UNDERFLOW
 3021:	  0B58	B4 01 EC		CJNE	A,#FTYPE,CS1	;SEE IF FOR TYPE
 3022:	  0B5B	71 AF			ACALL	XXI3		;WASTE THE FOR TYPE
 3023:	  0B5D	80 EC			SJMP	CSETUP		;LOOP
 3024:					;
 3025:					;***************************************************************
 3026:					;
 3027:					; The statement action routine - NEXT
 3028:					;
 3029:					;***************************************************************
 3030:					;
 3031:	  0B5F	7C 01		SNEXT:	MOV	R4,#FTYPE	;FOR TYPE
 3032:	  0B61	71 4B			ACALL	CSETUP		;SETUP CONTROL STACK
 3033:	  0B63	88 0F			MOV	TEMP5,R0	;SAVE CONTROL VARIABLE ADDRESS

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 56



 Line  I  Addr  Code            Source

 3034:	  0B65	79 0B			MOV	R1,#TEMP1	;SAVE VAR + RETURN IN TEMP1-4
 3035:					;
 3036:	  0B67	E2		XXI:	MOVX	A,@R0		;LOOP UNTIL DONE
 3037:	  0B68	F7			MOV	@R1,A
 3038:	  0B69	09			INC	R1
 3039:	  0B6A	08			INC	R0
 3040:	  0B6B	B9 0F F9		CJNE	R1,#TEMP5,XXI
 3041:					;
 3042:	  0B6E	B1 65			ACALL	VAR		;SEE IF THE USER HAS A VARIABLE
 3043:	  0B70	50 04			JNC	XXI1
 3044:	  0B72	AA 0B			MOV	R2,TEMP1
 3045:	  0B74	A8 0C			MOV	R0,TEMP2
 3046:	  0B76	EA		XXI1:	MOV	A,R2		;SEE IF VAR'S AGREE
 3047:	  0B77	B5 0B 47		CJNE	A,TEMP1,E4XX
 3048:	  0B7A	E8			MOV	A,R0
 3049:	  0B7B	B5 0C 43		CJNE	A,TEMP2,E4XX
 3050:	  0B7E	F1 DD			ACALL	PUSHAS		;PUT CONTROL VARIABLE ON STACK
 3051:	  0B80	74 0E			MOV	A,#FPSIZ+FPSIZ+2;COMPUTE ADDRESS TO STEP VALUE SIGN
 3052:	  0B82	25 0F			ADD	A,TEMP5 	;ADD IT TO BASE OF STACK
 3053:	  0B84	F8			MOV	R0,A		;SAVE IN R0
 3054:	  0B85	7A 00			MOV	R2,#CSTKAH	;SET UP TO PUSH STEP VALUE
 3055:	  0B87	8A A0			MOV	P2,R2		;SET UP PORT
 3056:	  0B89	E2			MOVX	A,@R0		;GET SIGN
 3057:	  0B8A	08			INC	R0		;BACK TO EXPONENT
 3058:	  0B8B	C0 E0			PUSH	ACC		;SAVE SIGN OF STEP
 3059:	  0B8D	F1 DD			ACALL	PUSHAS		;PUT STEP VALUE ON STACK
 3060:	  0B8F	C0 00			PUSH	R0B0		;SAVE LIMIT VALUE LOCATION
 3061:	  0B91	12 17 41		CALL	AADD		;ADD STEP VALUE TO VARIABLE
 3062:	  0B94	12 14 2C		CALL	CSTAKA		;COPY STACK
 3063:	  0B97	AB 0B			MOV	R3,TEMP1	;GET CONTROL VARIABLE
 3064:	  0B99	A9 0C			MOV	R1,TEMP2
 3065:	  0B9B	F1 D3			ACALL	POPAS		;SAVE THE RESULT
 3066:	  0B9D	7A 00			MOV	R2,#CSTKAH	;RESTORE LIMIT LOCATION
 3067:	  0B9F	D0 00			POP	R0B0
 3068:	  0BA1	F1 DD			ACALL	PUSHAS		;PUT LIMIT ON STACK
 3069:	  0BA3	12 19 73		CALL	FP_BASE2	;DO THE COMPARE
 3070:	  0BA6	D0 E0			POP	ACC		;GET LIMIT SIGN BACK
 3071:	  0BA8	60 01			JZ	XXI2		;IF SIGN NEGATIVE, TEST "BACKWARDS"
 3072:	  0BAA	B3			CPL	C
 3073:	  0BAB	72 D5		XXI2:	ORL	C,F0		;SEE IF EQUAL
 3074:	  0BAD	40 17			JC	N4		;STILL SMALLER THAN LIMIT?
 3075:	  0BAF	74 11		XXI3:	MOV	A,#FSIZE	;REMOVE CONTROL STACK ENTRY
 3076:					;
 3077:					; Fall thru to PUSHCS
 3078:					;
 3079:					;***************************************************************
 3080:					;
 3081:					; PUSHCS - push frame onto control stack
 3082:					;	   acc has - number of bytes, also test for overflow
 3083:					;
 3084:					;***************************************************************
 3085:					;
 3086:	  0BB1	25 11		PUSHCS: ADD	A,CSTKA 	;BUMP CONTROL STACK
 3087:	  0BB3	B4 61 00		CJNE	A,#CONVT+17,PUSHCS1 ;SEE IF OVERFLOWED
 3088:	  0BB6	40 09		PUSHCS1:JC	E4XX		;EXIT IF STACK OVERFLOW
 3089:	  0BB8	C5 11			XCH	A,CSTKA 	;STORE NEW CONTROL STACK VALUE, GET OLD

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 57



 Line  I  Addr  Code            Source

 3090:	  0BBA	14			DEC	A		;BUMP OLD VALUE
 3091:	  0BBB	F8			MOV	R0,A		;PUT OLD-1 IN R0
 3092:					;
 3093:	  0BBC	22		PUSHCS2:RET			;EXIT
 3094:					;
 3095:	  0BBD	F1 17		CSC:	ACALL	CLN_UP		;FINISH OFF THE LINE
 3096:	  0BBF	50 FB			JNC	PUSHCS2 	;EXIT IF NO TERMINATOR
 3097:					;
 3098:	  0BC1	90 03 83	E4XX:	MOV	DPTR,#EXC	;CONTROL STACK ERROR
 3099:	  0BC4	81 0E			AJMP	EK		;STACK ERROR
 3100:					;
 3101:	  0BC6	85 0D 0A	N4:	MOV	TXAH,TEMP3	;GET TEXT POINTER
 3102:	  0BC9	85 0E 08		MOV	TXAL,TEMP4
 3103:	  0BCC	01 13			AJMP	ILOOP		;EXIT
 3104:					;
 3105:					;***************************************************************
 3106:					;
 3107:					; The statement action routine - RESTORE
 3108:					;
 3109:					;***************************************************************
 3110:					;
 3111:	  0BCE	71 D6		SRESTR: ACALL	X_TR		;SWAP POINTERS
 3112:	  0BD0	D1 9B		SRESTR1:ACALL	DP_B		;GET THE STARTING ADDRESS
 3113:	  0BD2	D1 B8			ACALL	T_DP		;PUT STARTING ADDRESS IN TEXT POINTER
 3114:	  0BD4	F1 23			ACALL	B_TXA		;BUMP TXA
 3115:					;
 3116:					; Fall thru
 3117:					;
 3118:	  0BD6			X_TR:	;swap txa and rtxa
 3119:					;
 3120:	  0BD6	C5 0A			XCH	A,TXAH
 3121:	  0BD8	C5 12			XCH	A,RTXAH
 3122:	  0BDA	C5 0A			XCH	A,TXAH
 3123:	  0BDC	C5 08			XCH	A,TXAL
 3124:	  0BDE	C5 10			XCH	A,RTXAL
 3125:	  0BE0	C5 08			XCH	A,TXAL
 3126:	  0BE2	22			RET			;EXIT
 3127:					;
 3128:					;***************************************************************
 3129:					;
 3130:					; The statement action routine - READ
 3131:					;
 3132:					;***************************************************************
 3133:					;
 3134:	  0BE3	71 D6		SREAD:	ACALL	X_TR		;SWAP POINTERS
 3135:					;
 3136:	  0BE5	D1 C6		SRD0:	ACALL	C_TST		;CHECK FOR COMMA
 3137:	  0BE7	40 16			JC	SRD4		;SEE WHAT IT IS
 3138:					;
 3139:	  0BE9	F1 43		SRD:	ACALL	EXPRB		;EVALUATE THE EXPRESSION
 3140:	  0BEB	D1 CD			ACALL	GC		;GET THE CHARACTER AFTER EXPRESSION
 3141:	  0BED	B4 2C 02		CJNE	A,#',',SRD1     ;SEE IF MORE DATA
 3142:	  0BF0	80 02			SJMP	SRD2		;BYBASS CLEAN UP IF A COMMA
 3143:					;
 3144:	  0BF2	F1 17		SRD1:	ACALL	CLN_UP		;FINISH OFF THE LINE, IF AT END
 3145:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 58



 Line  I  Addr  Code            Source

 3146:	  0BF4	71 D6		SRD2:	ACALL	X_TR		;RESTORE POINTERS
 3147:	  0BF6	F1 01			ACALL	VAR_ER		;GET VARIABLE ADDRESS
 3148:	  0BF8	F1 D1			ACALL	XPOP		;FLIP THE REGISTERS FOR POPAS
 3149:	  0BFA	D1 C6			ACALL	C_TST		;SEE IF A COMMA
 3150:	  0BFC	50 E5			JNC	SREAD		;READ AGAIN IF A COMMA
 3151:	  0BFE	22		SRD21:	RET			;EXIT IF NOT
 3152:					;
 3153:	  0BFF	B4 9C 04	SRD4:	CJNE	A,#T_DATA,SRD5	;SEE IF DATA
 3154:	  0C02	D1 D7			ACALL	GCI1		;BUMP POINTER
 3155:	  0C04	80 E3			SJMP	SRD
 3156:					;
 3157:	  0C06	B4 01 08	SRD5:	CJNE	A,#EOF,SRD6	;SEE IF YOU BLEW IT
 3158:	  0C09	71 D6		SRD51:	ACALL	X_TR		;GET THE TEXT POINTER BACK
 3159:	  0C0B	90 1F 81		MOV	DPTR,#E14X	;READ ERROR
 3160:					;
 3161:	  0C0E	02 18 8F	EK:	LJMP	ERROR
 3162:					;
 3163:	  0C11	D1 EC		SRD6:	ACALL	FINDCR		;WASTE THIS LINE
 3164:	  0C13	F1 17			ACALL	CLN_UP		;CLEAN IT UP
 3165:	  0C15	40 F2			JC	SRD51		;ERROR IF AT END
 3166:	  0C17	80 CC			SJMP	SRD0
 3167:					;
 3168:	  0C19	D1 CD		NUMC:	ACALL	GC		;GET A CHARACTER
 3169:	  0C1B	B4 23 04		CJNE	A,#'#',NUMC1    ;SEE IF A #
 3170:	  0C1E	D2 1B			SETB	COB		;VALID LINE PRINT
 3171:	  0C20	C1 CB			AJMP	IGC		;BUMP THE TEXT POINTER
 3172:					;
 3173:	  0C22	B4 40 D9	NUMC1:	CJNE	A,#'@',SRD21    ;EXIT IF NO GOOD
 3174:	  0C25	D2 19			SETB	LPB
 3175:	  0C27	C1 CB			AJMP	IGC
 3176:					;
 3177:					;***************************************************************
 3178:					;
 3179:					; The statement action routine - PRINT
 3180:					;
 3181:					;***************************************************************
 3182:					;
 3183:	  0C29	D2 36		SPH0:	SETB	ZSURP		;NO ZEROS
 3184:					;
 3185:	  0C2B	D2 37		SPH1:	SETB	HMODE		;HEX MODE
 3186:					;
 3187:	  0C2D	91 19		SPRINT: ACALL	NUMC		;TEST FOR A LINE PRINT
 3188:	  0C2F	91 38			ACALL	SPRINT2 	;PROCEED
 3189:	  0C31	53 23 F5	SPRINT1:ANL	35,#11110101B	;CLEAR COB AND LPB
 3190:	  0C34	53 26 3F		ANL	38,#00111111B	;NO HEX MODE
 3191:					;
 3192:	  0C37	22			RET
 3193:					;
 3194:	  0C38	D1 E1		SPRINT2:ACALL	DELTST		;CHECK FOR A DELIMITER
 3195:	  0C3A	40 07			JC	SP1
 3196:					;
 3197:	  0C3C	02 06 A5	SP0:	JMP	CRLF		;EXIT WITH A CR IF SO
 3198:					;
 3199:	  0C3F	D1 C6		SP2:	ACALL	C_TST		;CHECK FOR A COMMA
 3200:	  0C41	40 F9			JC	SP0		;EXIT IF NO COMMA
 3201:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 59



 Line  I  Addr  Code            Source

 3202:	  0C43	D1 A9		SP1:	ACALL	CPS		;SEE IF A STRING TO PRINT
 3203:	  0C45	50 F8			JNC	SP2		;IF A STRING, CHECK FOR A COMMA
 3204:					;
 3205:	  0C47	B4 A4 08	SP4:	CJNE	A,#T_TAB,SP6
 3206:	  0C4A	D1 95			ACALL	I_PI		;ALWAYS CLEARS CARRY
 3207:	  0C4C	95 16			SUBB	A,PHEAD 	;TAKE DELTA BETWEEN TAB AND PHEAD
 3208:	  0C4E	40 EF			JC	SP2		;EXIT IF PHEAD > TAB
 3209:	  0C50	80 05			SJMP	SP7		;OUTPUT SPACES
 3210:					;
 3211:	  0C52	B4 A9 0A	SP6:	CJNE	A,#T_SPC,SM
 3212:	  0C55	D1 95			ACALL	I_PI		;SET UP PAREN VALUE
 3213:					;
 3214:	  0C57	60 E6		SP7:	JZ	SP2
 3215:	  0C59	12 07 0F		LCALL	STEROT		;OUTPUT A SPACE
 3216:	  0C5C	14			DEC	A		;DECREMENT COUNTER
 3217:	  0C5D	80 F8			SJMP	SP7		;LOOP
 3218:					;
 3219:	  0C5F	B4 D3 13	SM:	CJNE	A,#T_CHR,SP8
 3220:	  0C62	D1 CB			ACALL	IGC
 3221:	  0C64	B4 24 06		CJNE	A,#'$',SM01
 3222:	  0C67	F1 F9			ACALL	CNX		;PUT THE CHARACTER ON THE STACK
 3223:	  0C69	D1 90			ACALL	IFIXL		;PUT THE CHARACTER IN R1
 3224:	  0C6B	80 04			SJMP	SM02
 3225:	  0C6D	D1 8E		SM01:	ACALL	ONE		;EVALUATE THE EXPRESSION, PUT IN R3:R1
 3226:	  0C6F	91 E3			ACALL	ERPAR
 3227:	  0C71	AD 01		SM02:	MOV	R5,R1B0 	;BYTE TO OUTPUT
 3228:	  0C73	80 07			SJMP	SQ
 3229:					;
 3230:	  0C75	B4 AA 09	SP8:	CJNE	A,#T_CR,SX
 3231:	  0C78	D1 D7			ACALL	GCI1		;EAT THE TOKEN
 3232:	  0C7A	7D 0D			MOV	R5,#CR
 3233:					;
 3234:	  0C7C	12 07 11	SQ:	CALL	TEROT
 3235:	  0C7F	80 BE			SJMP	SP2		;OUTPUT A CR AND DO IT AGAIN
 3236:					;
 3237:	  0C81	B4 D2 53	SX:	CJNE	A,#T_USE,SP9	;USING TOKEN
 3238:	  0C84	D1 CB			ACALL	IGC		;GE THE CHARACTER AFTER THE USING TOKEN
 3239:	  0C86	B4 46 16		CJNE	A,#'F',U4       ;SEE IF FLOATING
 3240:	  0C89	75 17 F0		MOV	FORMAT,#0F0H	;SET FLOATING
 3241:	  0C8C	D1 CB			ACALL	IGC		;BUMP THE POINTER AND GET THE CHARACTER
 3242:	  0C8E	D1 D7			ACALL	GCI1		;BUMP IT AGAIN
 3243:	  0C90	54 0F			ANL	A,#0FH		;STRIP OFF ASCII BIAS
 3244:	  0C92	60 07			JZ	U3		;EXIT IF ZERO
 3245:	  0C94	B4 03 00		CJNE	A,#3,SX1	;SEE IF AT LEAST A THREE
 3246:	  0C97	50 02		SX1:	JNC	U3		;FORCE A THREE IF NOT A THREE
 3247:	  0C99	74 03			MOV	A,#3
 3248:					;
 3249:	  0C9B	42 17		U3:	ORL	FORMAT,A	;PUT DIGIT IN FORMAT
 3250:	  0C9D	80 2A			SJMP	U8		;CLEAN UP END
 3251:					;
 3252:	  0C9F	B4 30 07	U4:	CJNE	A,#'0',U5
 3253:	  0CA2	75 17 00		MOV	FORMAT,#0	;FREE FORMAT
 3254:	  0CA5	D1 D7			ACALL	GCI1		;BUMP THE POINTER
 3255:	  0CA7	80 20			SJMP	U8
 3256:					;
 3257:	  0CA9	B4 23 1D	U5:	CJNE	A,#'#',U8       ;SEE IF INTGER FORMAT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 60



 Line  I  Addr  Code            Source

 3258:	  0CAC	91 CD			ACALL	U6
 3259:	  0CAE	8F 17			MOV	FORMAT,R7	;SAVE THE FORMAT
 3260:	  0CB0	B4 2E 11		CJNE	A,#'.',U8A      ;SEE IF TERMINATOR WAS RADIX
 3261:	  0CB3	D1 CB			ACALL	IGC		;BUMP PAST .
 3262:	  0CB5	91 CD			ACALL	U6		;LOOP AGAIN
 3263:	  0CB7	EF			MOV	A,R7		;GET COUNT
 3264:	  0CB8	25 17			ADD	A,FORMAT	;SEE IF TOO BIG
 3265:	  0CBA	24 F7			ADD	A,#0F7H
 3266:	  0CBC	50 02			JNC	U5A
 3267:					;
 3268:	  0CBE	21 38		SE0:	AJMP	INTERX		;ERROR, BAD SYNTAX
 3269:					;
 3270:	  0CC0	EF		U5A:	MOV	A,R7		;GET THE COUNT BACK
 3271:	  0CC1	C4			SWAP	A		;ADJUST
 3272:	  0CC2	42 17			ORL	FORMAT,A	;GET THE COUNT
 3273:					;
 3274:	  0CC4	E5 17		U8A:	MOV	A,FORMAT
 3275:					;
 3276:	  0CC6	C4		U8B:	SWAP	A		;GET THE FORMAT RIGHT
 3277:	  0CC7	F5 17			MOV	FORMAT,A
 3278:					;
 3279:	  0CC9	91 E3		U8:	ACALL	ERPAR
 3280:	  0CCB	81 3F			AJMP	SP2		;DONE
 3281:					;
 3282:	  0CCD	7F 00		U6:	MOV	R7,#0		;SET COUNTER
 3283:					;
 3284:	  0CCF	B4 23 0C	U7:	CJNE	A,#'#',SP9A     ;EXIT IF NOT A #
 3285:	  0CD2	0F			INC	R7		;BUMP COUNTER
 3286:	  0CD3	D1 CB			ACALL	IGC		;GET THE NEXT CHARACTER
 3287:	  0CD5	80 F8			SJMP	U7		;LOOP
 3288:					;
 3289:	  0CD7	D1 E3		SP9:	ACALL	DELTST1 	;CHECK FOR DELIMITER
 3290:	  0CD9	50 03			JNC	SP9A		;EXIT IF A DELIMITER
 3291:					;
 3292:	  0CDB	B4 A8 34		CJNE	A,#T_ELSE,SS
 3293:					;
 3294:	  0CDE	22		SP9A:	RET			;EXIT IF ELSE TOKEN
 3295:					;
 3296:					;**************************************************************
 3297:					;
 3298:					; P_E - Evaluate an expression in parens ( )
 3299:					;
 3300:					;**************************************************************
 3301:					;
 3302:	  0CDF	7F E0		P_E:	MOV	R7,#T_LPAR
 3303:	  0CE1	F1 41			ACALL	WE
 3304:					;
 3305:	  0CE3	7F 29		ERPAR:	MOV	R7,#')'         ;EAT A RIGHT PAREN
 3306:					;
 3307:	  0CE5	D1 D5		EATC:	ACALL	GCI		;GET THE CHARACTER
 3308:	  0CE7	B5 07 D4		CJNE	A,R7B0,SE0	;ERROR IF NOT THE SAME
 3309:	  0CEA	22			RET
 3310:					;
 3311:					;***************************************************************
 3312:					;
 3313:	  0CEB			S_ON:	; ON Statement

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 61



 Line  I  Addr  Code            Source

 3314:					;
 3315:					;***************************************************************
 3316:					;
 3317:	  0CEB	D1 8E			ACALL	ONE		;GET THE EXPRESSION
 3318:	  0CED	D1 D5			ACALL	GCI		;GET THE NEXT CHARACTER
 3319:	  0CEF	B4 83 04		CJNE	A,#T_GOTO,C0
 3320:	  0CF2	91 FD			ACALL	C1		;EAT THE COMMAS
 3321:	  0CF4	41 72			AJMP	SF3		;DO GOTO
 3322:					;
 3323:	  0CF6	B4 9F C5	C0:	CJNE	A,#T_GOSB,SE0
 3324:	  0CF9	91 FD			ACALL	C1
 3325:	  0CFB	61 2F			AJMP	SGS0		;DO GOSUB
 3326:					;
 3327:	  0CFD	B9 00 06	C1:	CJNE	R1,#0,C2
 3328:	  0D00	F1 30			ACALL	INTERR		;GET THE LINE NUMBER
 3329:	  0D02	D1 EC			ACALL	FINDCR
 3330:	  0D04	41 F4			AJMP	RL1		;FINISH UP THIS LINE
 3331:					;
 3332:	  0D06	7F 2C		C2:	MOV	R7,#','
 3333:	  0D08	D1 EE			ACALL	FINDC
 3334:	  0D0A	B4 2C B1		CJNE	A,#',',SE0      ;ERROR IF NOT A COMMA
 3335:	  0D0D	19			DEC	R1
 3336:	  0D0E	D1 D7			ACALL	GCI1		;BUMP PAST COMMA
 3337:	  0D10	80 EB			SJMP	C1
 3338:					;
 3339:	  0D12	D1 BF		SS:	ACALL	S_C		;SEE IF A STRING
 3340:	  0D14	40 05			JC	SA		;NO STRING IF CARRY IS SET
 3341:	  0D16	12 06 BF		LCALL	UPRNT		;PUT POINTER IN DPTR
 3342:	  0D19	81 3F			AJMP	SP2		;SEE IF MORE
 3343:					;
 3344:	  0D1B	F1 43		SA:	ACALL	EXPRB		;MUST BE AN EXPRESSION
 3345:	  0D1D	74 48			MOV	A,#72
 3346:	  0D1F	B5 16 00		CJNE	A,PHEAD,SA1	;CHECK PHEAD POSITION
 3347:	  0D22	50 02		SA1:	JNC	SA2
 3348:	  0D24	91 3C			ACALL	SP0		;FORCE A CRLF
 3349:	  0D26	30 37 14	SA2:	JNB	HMODE,S13	;HEX MODE?
 3350:	  0D29	12 12 02		CALL	FCMP		;SEE IF TOS IS < 0FFFH
 3351:	  0D2C	40 0F			JC	S13		;EXIT IF GREATER
 3352:	  0D2E	12 13 8F		CALL	AABS		;GET THE SIGN
 3353:	  0D31	70 07			JNZ	OOPS		;WASTE IF NEGATIVE
 3354:	  0D33	D1 90			ACALL	IFIXL
 3355:	  0D35	12 19 85		CALL	FP_BASE11	;PRINT HEXMODE
 3356:	  0D38	81 3F			AJMP	SP2
 3357:	  0D3A	12 13 A1	OOPS:	CALL	ANEG		;MAKE IT NEGATIVE
 3358:					;
 3359:	  0D3D	12 19 7D	S13:	CALL	FP_BASE7	;DO FP OUTPUT
 3360:	  0D40	74 01			MOV	A,#1		;OUTPUT A SPACE
 3361:	  0D42	81 57			AJMP	SP7
 3362:					;
 3363:					;***************************************************************
 3364:					;
 3365:					; ANU -  Get variable name from text - set carry if not found
 3366:					;	 if succeeds returns variable in R7:R6
 3367:					;	 R6 = 0 if no digit in name
 3368:					;
 3369:					;***************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 62



 Line  I  Addr  Code            Source

 3370:					;
 3371:	  0D44	D1 CB		ANU:	ACALL	IGC		;INCREMENT AND GET CHARACTER
 3372:	  0D46	12 1F ED		LCALL	DIGIT_CHECK	;CHECK FOR DIGIT
 3373:	  0D49	40 0C			JC	AL2		;EXIT IF VALID DIGIT
 3374:	  0D4B	B4 5F 01		CJNE	A,#'_',AL       ;SEE IF A _
 3375:	  0D4E	22			RET
 3376:					;
 3377:	  0D4F	B4 41 00	AL:	CJNE	A,#'A',AL1      ;IS IT AN ASCII A?
 3378:	  0D52	40 04		AL1:	JC	AL3		;EXIT IF CARRY IS SET
 3379:	  0D54	B4 5B 00		CJNE	A,#'Z'+1,AL2    ;IS IT LESS THAN AN ASCII Z
 3380:	  0D57	B3		AL2:	CPL	C		;FLIP CARRY
 3381:	  0D58	22		AL3:	RET
 3382:					;
 3383:	  0D59	30 D5 3E	SD01:	JNB	F0,VAR2
 3384:					;
 3385:	  0D5C	90 17 61	SD0:	MOV	DPTR,#E6X
 3386:	  0D5F	81 0E			AJMP	EK
 3387:					;
 3388:	  0D61	D2 D5		SDIMX:	SETB	F0		;SAYS DOING A DIMENSION
 3389:	  0D63	80 02			SJMP	VAR1
 3390:					;
 3391:	  0D65	C2 D5		VAR:	CLR	F0		;SAYS DOING A VARIABLE
 3392:					;
 3393:	  0D67	D1 CD		VAR1:	ACALL	GC		;GET THE CHARACTER
 3394:	  0D69	B1 4F			ACALL	AL		;CHECK FOR ALPHA
 3395:	  0D6B	50 04			JNC	VAR11		;ERROR IF IN DIM
 3396:	  0D6D	20 D5 EC		JB	F0,SD0
 3397:	  0D70	22			RET
 3398:	  0D71	FF		VAR11:	MOV	R7,A		;SAVE ALPHA CHARACTER
 3399:	  0D72	E4			CLR	A		;ZERO IN CASE OF FAILURE
 3400:	  0D73	FD			MOV	R5,A		;SAVE IT
 3401:					;
 3402:	  0D74	FE		VY:	MOV	R6,A
 3403:	  0D75	B1 44			ACALL	ANU		;CHECK FOR ALPHA OR NUMBER
 3404:	  0D77	40 07			JC	VX		;EXIT IF NO ALPHA OR NUM
 3405:					;
 3406:	  0D79	CF			XCH	A,R7
 3407:	  0D7A	2D			ADD	A,R5		;NUMBER OF CHARACTERS IN ALPHABET
 3408:	  0D7B	CF			XCH	A,R7		;PUT IT BACK
 3409:	  0D7C	7D 1A			MOV	R5,#26		;FOR THE SECOND TIME AROUND
 3410:	  0D7E	80 F4			SJMP	VY
 3411:					;
 3412:	  0D80	C2 15		VX:	CLR	LINEB		;TELL EDITOR A VARIABLE IS DECLARED
 3413:	  0D82	B4 E0 2F		CJNE	A,#T_LPAR,V4	;SEE IF A LEFT PAREN
 3414:					;
 3415:	  0D85	43 06 80		ORL	R6B0,#80H	;SET BIT 7 TO SIGINIFY MATRIX
 3416:	  0D88	12 06 19		CALL	F_VAR		;FIND THE VARIABLE
 3417:	  0D8B	C0 02			PUSH	R2B0		;SAVE THE LOCATION
 3418:	  0D8D	C0 00			PUSH	R0B0
 3419:	  0D8F	50 C8			JNC	SD01		;DEFAULT IF NOT IN TABLE
 3420:	  0D91	20 D5 28		JB	F0,SDI		;NO DEFAULT FOR DIMENSION
 3421:	  0D94	79 0A			MOV	R1,#10
 3422:	  0D96	7B 00			MOV	R3,#0
 3423:	  0D98	B1 CC			ACALL	D_CHK
 3424:					;
 3425:	  0D9A	D1 97		VAR2:	ACALL	PAREN_INT	;EVALUATE INTEGER IN PARENS

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 63



 Line  I  Addr  Code            Source

 3426:	  0D9C	BB 00 BD		CJNE	R3,#0,SD0	;ERROR IF R3<>0
 3427:	  0D9F	D0 82			POP	DPL		;GET VAR FOR LOOKUP
 3428:	  0DA1	D0 83			POP	DPH
 3429:	  0DA3	E0			MOVX	A,@DPTR 	;GET DIMENSION
 3430:	  0DA4	14			DEC	A		;BUMP OFFSET
 3431:	  0DA5	99			SUBB	A,R1		;A MUST BE > R1
 3432:	  0DA6	40 B4			JC	SD0
 3433:	  0DA8	12 05 C0		LCALL	DECDP2		;BUMP POINTER TWICE
 3434:	  0DAB	51 0D			ACALL	VARB		;CALCULATE THE BASE
 3435:					;
 3436:	  0DAD	C9		X3120:	XCH	A,R1		;SWAP R2:R0, R3:R1
 3437:	  0DAE	C8			XCH	A,R0
 3438:	  0DAF	C9			XCH	A,R1
 3439:	  0DB0	CB			XCH	A,R3
 3440:	  0DB1	CA			XCH	A,R2
 3441:	  0DB2	CB			XCH	A,R3
 3442:	  0DB3	22			RET
 3443:					;
 3444:	  0DB4	20 D5 A5	V4:	JB	F0,SD0		;ERROR IF NO LPAR FOR DIM
 3445:	  0DB7	12 06 19		LCALL	F_VAR		;GET SCALAR VARIABLE
 3446:	  0DBA	C3			CLR	C
 3447:	  0DBB	22			RET
 3448:					;
 3449:	  0DBC	D1 97		SDI:	ACALL	PAREN_INT	;EVALUATE PAREN EXPRESSION
 3450:	  0DBE	BB 00 9B		CJNE	R3,#0,SD0	;ERROR IF NOT ZERO
 3451:	  0DC1	D0 00			POP	R0B0		;SET UP R2:R0
 3452:	  0DC3	D0 02			POP	R2B0
 3453:	  0DC5	B1 CC			ACALL	D_CHK		;DO DIM
 3454:	  0DC7	D1 C6			ACALL	C_TST		;CHECK FOR COMMA
 3455:	  0DC9	50 96			JNC	SDIMX		;LOOP IF COMMA
 3456:	  0DCB	22			RET			;RETURN IF NO COMMA
 3457:					;
 3458:	  0DCC	09		D_CHK:	INC	R1		;BUMP FOR TABLE LOOKUP
 3459:	  0DCD	E9			MOV	A,R1
 3460:	  0DCE	60 8C			JZ	SD0		;ERROR IF 0FFFFH
 3461:	  0DD0	FC			MOV	R4,A		;SAVE FOR LATER
 3462:	  0DD1	90 01 08		MOV	DPTR,#MT_ALL	;GET MATRIX ALLOCATION
 3463:	  0DD4	51 0D			ACALL	VARB		;DO THE CALCULATION
 3464:	  0DD6	AF 83			MOV	R7,DPH		;SAVE MATRIX ALLOCATION
 3465:	  0DD8	AE 82			MOV	R6,DPL
 3466:	  0DDA	90 01 06		MOV	DPTR,#ST_ALL	;SEE IF TOO MUCH MEMORY TAKEN
 3467:	  0DDD	12 15 B0		CALL	FUL1		;ST_ALL SHOULD BE > R3:R1
 3468:	  0DE0	90 01 08		MOV	DPTR,#MT_ALL	;SAVE THE NEW MATRIX POINTER
 3469:	  0DE3	12 06 05		CALL	S31DP
 3470:	  0DE6	88 82			MOV	DPL,R0		;GET VARIABLE ADDRESS
 3471:	  0DE8	8A 83			MOV	DPH,R2
 3472:	  0DEA	EC			MOV	A,R4		;DIMENSION SIZE
 3473:	  0DEB	F0			MOVX	@DPTR,A 	;SAVE IT
 3474:	  0DEC	12 05 C0		CALL	DECDP2		;SAVE TARGET ADDRESS
 3475:					;
 3476:	  0DEF	EF		R76S:	MOV	A,R7
 3477:	  0DF0	F0			MOVX	@DPTR,A
 3478:	  0DF1	A3			INC	DPTR
 3479:	  0DF2	EE			MOV	A,R6		;ELEMENT SIZE
 3480:	  0DF3	F0			MOVX	@DPTR,A
 3481:	  0DF4	22			RET			;R2:R0 STILL HAS SYMBOL TABLE ADDRESS

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 64



 Line  I  Addr  Code            Source

 3482:					;
 3483:					;***************************************************************
 3484:					;
 3485:					; The statement action routine - INPUT
 3486:					;
 3487:					;***************************************************************
 3488:					;
 3489:	  0DF5	D1 A9		SINPUT: ACALL	CPS		;PRINT STRING IF THERE
 3490:					;
 3491:	  0DF7	D1 C6			ACALL	C_TST		;CHECK FOR A COMMA
 3492:	  0DF9	50 07			JNC	IN2A		;NO CRLF
 3493:	  0DFB	91 3C			ACALL	SP0		;DO A CRLF
 3494:					;
 3495:	  0DFD	7D 3F		IN2:	MOV	R5,#'?'         ;OUTPUT A ?
 3496:	  0DFF	12 07 11		CALL	TEROT
 3497:					;
 3498:	  0E02	D2 22		IN2A:	SETB	INP_B		;DOING INPUT
 3499:	  0E04	12 06 D8		CALL	INLINE		;INPUT THE LINE
 3500:	  0E07	C2 22			CLR	INP_B
 3501:	  0E09	75 0F 00		MOV	TEMP5,#HIGH IBUF
 3502:	  0E0C	75 0E 07		MOV	TEMP4,#LOW IBUF
 3503:					;
 3504:	  0E0F	D1 BF		IN3:	ACALL	S_C		;SEE IF A STRING
 3505:	  0E11	40 0D			JC	IN3A		;IF CARRY IS SET, NO STRING
 3506:	  0E13	B1 AD			ACALL	X3120		;FLIP THE ADDRESSES
 3507:	  0E15	AB 0F			MOV	R3,TEMP5
 3508:	  0E17	A9 0E			MOV	R1,TEMP4
 3509:	  0E19	31 9D			ACALL	SSOOP
 3510:	  0E1B	D1 C6			ACALL	C_TST		;SEE IF MORE TO DO
 3511:	  0E1D	50 DE			JNC	IN2
 3512:	  0E1F	22			RET
 3513:					;
 3514:	  0E20	12 18 4D	IN3A:	CALL	DTEMP		;GET THE USER LOCATION
 3515:	  0E23	12 19 57		CALL	GET_NUM 	;GET THE USER SUPPLIED NUMBER
 3516:	  0E26	70 18			JNZ	IN5		;ERROR IF NOT ZERO
 3517:	  0E28	12 18 54		CALL	TEMPD		;SAVE THE DATA POINTER
 3518:	  0E2B	F1 01			ACALL	VAR_ER		;GET THE VARIABLE
 3519:	  0E2D	F1 D1			ACALL	XPOP		;SAVE THE VARIABLE
 3520:	  0E2F	12 18 4D		CALL	DTEMP		;GET DPTR BACK FROM VAR_ER
 3521:	  0E32	D1 C6			ACALL	C_TST		;SEE IF MORE TO DO
 3522:	  0E34	40 13			JC	IN6		;EXIT IF NO COMMA
 3523:	  0E36	E0			MOVX	A,@DPTR 	;GET INPUT TERMINATOR
 3524:	  0E37	B4 2C 06		CJNE	A,#',',IN5      ;IF NOT A COMMA DO A CR AND TRY AGAIN
 3525:	  0E3A	A3			INC	DPTR		;BUMP PAST COMMA AND READ NEXT VALUE
 3526:	  0E3B	12 18 54		CALL	TEMPD
 3527:	  0E3E	80 CF			SJMP	IN3
 3528:					;
 3529:	  0E40	90 00 F3	IN5:	MOV	DPTR,#IAN	;PRINT INPUT A NUMBER
 3530:	  0E43	12 06 AD		CALL	CRP		;DO A CR, THEN, PRINT FROM ROM
 3531:	  0E46	02 18 44		LJMP	CC1		;TRY IT AGAIN
 3532:					;
 3533:	  0E49	E0		IN6:	MOVX	A,@DPTR
 3534:	  0E4A	B4 0D 01		CJNE	A,#CR,EIGP
 3535:	  0E4D	22			RET
 3536:					;
 3537:	  0E4E	90 03 6D	EIGP:	MOV	DPTR,#EIG

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 65



 Line  I  Addr  Code            Source

 3538:	  0E51	12 06 AD		CALL	CRP		;PRINT THE MESSAGE AND EXIT
 3539:	  0E54	81 3C			AJMP	SP0		;EXIT WITH A CRLF
 3540:					;
 3541:					;***************************************************************
 3542:					;
 3543:	  0E56			SOT:	; On timer interrupt
 3544:					;
 3545:					;***************************************************************
 3546:					;
 3547:	  0E56	D1 85			ACALL	TWO		;GET THE NUMBERS
 3548:	  0E58	8B 4B			MOV	SP_H,R3
 3549:	  0E5A	89 4C			MOV	SP_L,R1
 3550:	  0E5C	90 01 26		MOV	DPTR,#TIV	;SAVE THE NUMBER
 3551:	  0E5F	D2 10			SETB	OTS
 3552:	  0E61	A1 EF			AJMP	R76S		;EXIT
 3553:					;
 3554:					;
 3555:					;***************************************************************
 3556:					;
 3557:	  0E63			SCALL:	; Call a user rountine
 3558:					;
 3559:					;***************************************************************
 3560:					;
 3561:	  0E63	F1 30			ACALL	INTERR		;CONVERT INTEGER
 3562:	  0E65	BA 00 0A		CJNE	R2,#0,S_C_1	;SEE IF TRAP
 3563:	  0E68	E8			MOV	A,R0
 3564:	  0E69	20 E7 06		JB	ACC.7,S_C_1
 3565:	  0E6C	28			ADD	A,R0
 3566:	  0E6D	90 41 00		MOV	DPTR,#4100H
 3567:	  0E70	F5 82			MOV	DPL,A
 3568:					;
 3569:	  0E72	31 6C		S_C_1:	ACALL	AC1		;JUMP TO USER PROGRAM
 3570:	  0E74	53 D0 E7		ANL	PSW,#11100111B	;BACK TO BANK 0
 3571:	  0E77	22			RET			;EXIT
 3572:					;
 3573:					;**************************************************************
 3574:					;
 3575:	  0E78			THREE:	; Save value for timer function
 3576:					;
 3577:					;**************************************************************
 3578:					;
 3579:	  0E78	D1 8E			ACALL	ONE		;GET THE FIRST INTEGER
 3580:	  0E7A	12 16 7B		CALL	CBIAS		;BIAS FOR TIMER LOAD
 3581:	  0E7D	8B 40			MOV	T_HH,R3
 3582:	  0E7F	89 41			MOV	T_LL,R1
 3583:	  0E81	7F 2C			MOV	R7,#','         ;WASTE A COMMA
 3584:	  0E83	91 E5			ACALL	EATC		;FALL THRU TO TWO
 3585:					;
 3586:					;**************************************************************
 3587:					;
 3588:	  0E85			TWO:	; Get two values seperated by a comma off the stack
 3589:					;
 3590:					;**************************************************************
 3591:					;
 3592:	  0E85	F1 43			ACALL	EXPRB
 3593:	  0E87	7F 2C			MOV	R7,#','         ;WASTE THE COMMA

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 66



 Line  I  Addr  Code            Source

 3594:	  0E89	F1 41			ACALL	WE
 3595:	  0E8B	02 14 A1		JMP	TWOL		;EXIT
 3596:					;
 3597:					;*************************************************************
 3598:					;
 3599:	  0E8E			ONE:	; Evaluate an expression and get an integer
 3600:					;
 3601:					;*************************************************************
 3602:					;
 3603:	  0E8E	F1 43			ACALL	EXPRB		;EVALUATE EXPERSSION
 3604:					;
 3605:	  0E90	12 12 23	IFIXL:	CALL	IFIX		;INTEGERS IN R3:R1
 3606:	  0E93	E9			MOV	A,R1
 3607:	  0E94	22			RET
 3608:					;
 3609:					;
 3610:					;*************************************************************
 3611:					;
 3612:	  0E95			I_PI:	; Increment text pointer then get an integer
 3613:					;
 3614:					;*************************************************************
 3615:					;
 3616:	  0E95	D1 D7			ACALL	GCI1		;BUMP TEXT, THEN GET INTEGER
 3617:					;
 3618:	  0E97			PAREN_INT:; Get an integer in parens ( )
 3619:					;
 3620:	  0E97	91 DF			ACALL	P_E
 3621:	  0E99	80 F5			SJMP	IFIXL
 3622:					;
 3623:	  0E9B	85 13 83	DP_B:	MOV	DPH,BOFAH
 3624:	  0E9E	85 14 82		MOV	DPL,BOFAL
 3625:	  0EA1	22			RET
 3626:					;
 3627:	  0EA2	85 0A 83	DP_T:	MOV	DPH,TXAH
 3628:	  0EA5	85 08 82		MOV	DPL,TXAL
 3629:	  0EA8	22			RET
 3630:					;
 3631:	  0EA9	D1 CD		CPS:	ACALL	GC		;GET THE CHARACTER
 3632:	  0EAB	B4 22 73		CJNE	A,#'"',NOPASS   ;EXIT IF NO STRING
 3633:	  0EAE	D1 A2			ACALL	DP_T		;GET TEXT POINTER
 3634:	  0EB0	A3			INC	DPTR		;BUMP PAST "
 3635:	  0EB1	7C 22			MOV	R4,#'"'
 3636:	  0EB3	12 06 C3		CALL	PN0		;DO THE PRINT
 3637:	  0EB6	A3			INC	DPTR		;GO PAST QUOTE
 3638:	  0EB7	C3			CLR	C		;PASSED TEST
 3639:					;
 3640:	  0EB8	85 83 0A	T_DP:	MOV	TXAH,DPH	;TEXT POINTER GETS DPTR
 3641:	  0EBB	85 82 08		MOV	TXAL,DPL
 3642:	  0EBE	22			RET
 3643:					;
 3644:					;*************************************************************
 3645:					;
 3646:	  0EBF			S_C:	; Check for a string
 3647:					;
 3648:					;*************************************************************
 3649:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 67



 Line  I  Addr  Code            Source

 3650:	  0EBF	D1 CD			ACALL	GC		;GET THE CHARACTER
 3651:	  0EC1	B4 24 5D		CJNE	A,#'$',NOPASS   ;SET CARRY IF NOT A STRING
 3652:	  0EC4	21 E7			AJMP	IST_CAL 	;CLEAR CARRY, CALCULATE OFFSET
 3653:					;
 3654:					;
 3655:					;
 3656:					;**************************************************************
 3657:					;
 3658:	  0EC6	D1 CD		C_TST:	ACALL	GC		;GET A CHARACTER
 3659:	  0EC8	B4 2C 56		CJNE	A,#',',NOPASS   ;SEE IF A COMMA
 3660:					;
 3661:					;***************************************************************
 3662:					;
 3663:					;GC AND GCI - GET A CHARACTER FROM TEXT (NO BLANKS)
 3664:					;	      PUT CHARACTER IN THE ACC
 3665:					;
 3666:					;***************************************************************
 3667:					;
 3668:	  0ECB	D1 D7		IGC:	ACALL	GCI1		;BUMP POINTER, THEN GET CHARACTER
 3669:					;
 3670:	  0ECD	D2 D3		GC:	SETB	RS0		;USE BANK 1
 3671:	  0ECF	8A A0			MOV	P2,R2		;SET UP PORT 2
 3672:	  0ED1	E2			MOVX	A,@R0		;GET EXTERNAL BYTE
 3673:	  0ED2	C2 D3			CLR	RS0		;BACK TO BANK 0
 3674:	  0ED4	22			RET			;EXIT
 3675:					;
 3676:	  0ED5	D1 CD		GCI:	ACALL	GC
 3677:					;
 3678:					; This routine bumps txa by one and always clears the carry
 3679:					;
 3680:	  0ED7	D2 D3		GCI1:	SETB	RS0		;BANK 1
 3681:	  0ED9	08			INC	R0		;BUMP TXA
 3682:	  0EDA	B8 00 01		CJNE	R0,#0,GCI11
 3683:	  0EDD	0A			INC	R2
 3684:	  0EDE	C2 D3		GCI11:	CLR	RS0
 3685:	  0EE0	22			RET			;EXIT
 3686:					;
 3687:					;**************************************************************
 3688:					;
 3689:					; Check delimiters
 3690:					;
 3691:					;**************************************************************
 3692:					;
 3693:	  0EE1	D1 CD		DELTST: ACALL	GC		;GET A CHARACTER
 3694:	  0EE3	B4 0D 02	DELTST1:CJNE	A,#CR,DT1	;SEE IF A CR
 3695:	  0EE6	E4			CLR	A
 3696:	  0EE7	22			RET
 3697:					;
 3698:	  0EE8	B4 3A 36	DT1:	CJNE	A,#':',NOPASS   ;SET CARRY IF NO MATCH
 3699:					;
 3700:	  0EEB	22		L_RET:	RET
 3701:					;
 3702:					;
 3703:					;***************************************************************
 3704:					;
 3705:					; FINDC - Find the character in R7, update TXA

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 68



 Line  I  Addr  Code            Source

 3706:					;
 3707:					;***************************************************************
 3708:					;
 3709:	  0EEC	7F 0D		FINDCR: MOV	R7,#CR		;KILL A STATEMENT LINE
 3710:					;
 3711:	  0EEE	D1 E1		FINDC:	ACALL	DELTST
 3712:	  0EF0	50 F9			JNC	L_RET
 3713:					;
 3714:	  0EF2	B5 07 01		CJNE	A,R7B0,FNDCL2	;MATCH?
 3715:	  0EF5	22			RET
 3716:					;
 3717:	  0EF6	D1 D7		FNDCL2: ACALL	GCI1
 3718:	  0EF8	80 F4			SJMP	FINDC		;LOOP
 3719:					;
 3720:	  0EFA	D1 D7		FNDCL3: ACALL	GCI1
 3721:					;
 3722:	  0EFC	D1 E1		WCR:	ACALL	DELTST		;WASTE UNTIL A "REAL" CR
 3723:	  0EFE	70 FA			JNZ	FNDCL3
 3724:	  0F00	22			RET
 3725:					;
 3726:					;***************************************************************
 3727:					;
 3728:					; VAR_ER - Check for a variable, exit if error
 3729:					;
 3730:					;***************************************************************
 3731:					;
 3732:	  0F01	B1 65		VAR_ER: ACALL	VAR
 3733:	  0F03	80 2D			SJMP	INTERR1
 3734:					;
 3735:					;
 3736:					;***************************************************************
 3737:					;
 3738:					; S_D0 - The Statement Action Routine DO
 3739:					;
 3740:					;***************************************************************
 3741:					;
 3742:	  0F05	71 BD		S_DO:	ACALL	CSC		;FINISH UP THE LINE
 3743:	  0F07	7C 03			MOV	R4,#DTYPE	;TYPE FOR STACK
 3744:	  0F09	71 35			ACALL	SGS1		;SAVE ON STACK
 3745:	  0F0B	01 13			AJMP	ILOOP		;EXIT
 3746:					;
 3747:					;***************************************************************
 3748:					;
 3749:					; CLN_UP - Clean up the end of a statement, see if at end of
 3750:					;	   file, eat character and line count after CR
 3751:					;
 3752:					;***************************************************************
 3753:					;
 3754:	  0F0D	B4 3A 02	C_2:	CJNE	A,#':',C_1      ;SEE IF A TERMINATOR
 3755:	  0F10	C1 D7			AJMP	GCI1		;BUMP POINTER AND EXIT, IF SO
 3756:					;
 3757:	  0F12	B4 A8 6D	C_1:	CJNE	A,#T_ELSE,EP5
 3758:	  0F15	D1 FC			ACALL	WCR		;WASTE UNTIL A CR
 3759:					;
 3760:	  0F17	D1 CD		CLN_UP: ACALL	GC		;GET THE CHARACTER
 3761:	  0F19	B4 0D F1		CJNE	A,#CR,C_2	;SEE IF A CR

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 69



 Line  I  Addr  Code            Source

 3762:	  0F1C	D1 CB			ACALL	IGC		;GET THE NEXT CHARACTER
 3763:	  0F1E	B4 01 02		CJNE	A,#EOF,B_TXA	;SEE IF TERMINATOR
 3764:					;
 3765:	  0F21	D3		NOPASS: SETB	C
 3766:	  0F22	22			RET
 3767:					;
 3768:	  0F23	C5 08		B_TXA:	XCH	A,TXAL		;BUMP TXA BY THREE
 3769:	  0F25	24 03			ADD	A,#3
 3770:	  0F27	C5 08			XCH	A,TXAL
 3771:	  0F29	10 D7 01		JBC	CY,B_TXA1
 3772:	  0F2C	22			RET
 3773:	  0F2D	05 0A		B_TXA1: INC	TXAH
 3774:	  0F2F	22			RET
 3775:					;
 3776:					;***************************************************************
 3777:					;
 3778:					;	  Get an INTEGER from the text
 3779:					;	  sets CARRY if not found
 3780:					;	  returns the INTGER value in DPTR and R2:R0
 3781:					;	  returns the terminator in ACC
 3782:					;
 3783:					;***************************************************************
 3784:					;
 3785:	  0F30	F1 35		INTERR: ACALL	INTGER		;GET THE INTEGER
 3786:	  0F32	40 4E		INTERR1:JC	EP5		;ERROR IF NOT FOUND
 3787:	  0F34	22			RET			;EXIT IF FOUND
 3788:					;
 3789:	  0F35	D1 A2		INTGER: ACALL	DP_T
 3790:	  0F37	12 19 81		CALL	FP_BASE9	;CONVERT THE INTEGER
 3791:	  0F3A	D1 B8			ACALL	T_DP
 3792:	  0F3C	8A 83			MOV	DPH,R2		;PUT THE RETURNED VALUE IN THE DPTR
 3793:	  0F3E	88 82			MOV	DPL,R0
 3794:					;
 3795:	  0F40	22		ITRET:	RET			;EXIT
 3796:					;
 3797:					;
 3798:	  0F41	91 E5		WE:	ACALL	EATC		;WASTE THE CHARACTER
 3799:					;
 3800:					; Fall thru to evaluate the expression
 3801:					;
 3802:					;***************************************************************
 3803:					;
 3804:					; EXPRB - Evaluate an expression
 3805:					;
 3806:					;***************************************************************
 3807:					;
 3808:	  0F43	7A CF		EXPRB:	MOV	R2,#LOW OPBOL	;BASE PRECEDENCE
 3809:					;
 3810:	  0F45	C0 02		EP1:	PUSH	R2B0		;SAVE OPERATOR PRECEDENCE
 3811:	  0F47	C2 24			CLR	ARGF		;RESET STACK DESIGNATOR
 3812:					;
 3813:	  0F49	E5 81		EP2:	MOV	A,SP		;GET THE STACK POINTER
 3814:	  0F4B	24 0C			ADD	A,#12		;NEED AT LEAST 12 BYTES
 3815:	  0F4D	50 03			JNC	EP21
 3816:	  0F4F	02 18 8C		LJMP	E1XX2
 3817:	  0F52	E5 09		EP21:	MOV	A,ASTKA 	;GET THE ARG STACK

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 70



 Line  I  Addr  Code            Source

 3818:	  0F54	94 38			SUBB	A,#LOW TM_TOP+12;NEED 12 BYTES ALSO
 3819:	  0F56	50 03			JNC	EP22
 3820:	  0F58	02 12 1A		LJMP	E4YY
 3821:	  0F5B	20 24 13	EP22:	JB	ARGF,EP4	;MUST BE AN OPERATOR, IF SET
 3822:	  0F5E	B1 65			ACALL	VAR		;IS THE VALUE A VARIABLE?
 3823:	  0F60	50 0D			JNC	EP3		;PUT VARIABLE ON STACK
 3824:					;
 3825:	  0F62	F1 EF			ACALL	CONST		;IS THE VALUE A NUMERIC CONSTANT?
 3826:	  0F64	50 0B			JNC	EP4		;IF SO, CONTINUE, IF NOT, SEE WHAT
 3827:	  0F66	D1 CD			CALL	GC		;GET THE CHARACTER
 3828:	  0F68	B4 E0 06		CJNE	A,#T_LPAR,EP4	;SEE IF A LEFT PAREN
 3829:	  0F6B	74 D0			MOV	A,#(LOW OPBOL+1)
 3830:	  0F6D	80 55			SJMP	XLPAR		;PROCESS THE LEFT PAREN
 3831:					;
 3832:	  0F6F	F1 DD		EP3:	ACALL	PUSHAS		;SAVE VAR ON STACK
 3833:					;
 3834:	  0F71	D1 CD		EP4:	ACALL	GC		;GET THE OPERATOR
 3835:					;
 3836:	  0F73	B4 E0 00		CJNE	A,#T_LPAR,EP41	;IS IT AN OPERATOR
 3837:	  0F76	50 0E		EP41:	JNC	XOP		;PROCESS OPERATOR
 3838:	  0F78	B4 B0 00		CJNE	A,#T_UOP,EP42	;IS IT A UNARY OPERATOR
 3839:	  0F7B	50 3B		EP42:	JNC	XBILT		;PROCESS UNARY (BUILT IN) OPERATOR
 3840:	  0F7D	D0 02			POP	R2B0		;GET BACK PREVIOUS OPERATOR PRECEDENCE
 3841:	  0F7F	20 24 BE		JB	ARGF,ITRET	;OK IF ARG FLAG IS SET
 3842:					;
 3843:	  0F82	C3		EP5:	CLR	C		;NO RECOVERY
 3844:	  0F83	02 18 87		LJMP	E1XX1
 3845:					;
 3846:					; Process the operator
 3847:					;
 3848:	  0F86	54 1F		XOP:	ANL	A,#1FH		;STRIP OFF THE TOKE BITS
 3849:	  0F88	20 24 05		JB	ARGF,XOP1	;IF ARG FLAG IS SET, PROCESS
 3850:	  0F8B	B4 05 3C		CJNE	A,#T_SUB-T_LPAR,XOP3
 3851:	  0F8E	74 09			MOV	A,#T_NEG-T_LPAR
 3852:					;
 3853:	  0F90	24 D0		XOP1:	ADD	A,#LOW OPBOL+1	;BIAS THE TABLE
 3854:	  0F92	FA			MOV	R2,A
 3855:	  0F93	90 00 00		MOV	DPTR,#00H
 3856:	  0F96	93			MOVC	A,@A+DPTR	;GET THE CURRENT PRECEDENCE
 3857:	  0F97	FC			MOV	R4,A
 3858:	  0F98	D0 E0			POP	ACC		;GET THE PREVIOUS PRECEDENCE
 3859:	  0F9A	FD			MOV	R5,A		;SAVE THE PREVIOUS PRECEDENCE
 3860:	  0F9B	93			MOVC	A,@A+DPTR	;GET IT
 3861:	  0F9C	B5 04 04		CJNE	A,R4B0,XOP11	;SEE WHICH HAS HIGHER PRECEDENCE
 3862:	  0F9F	B4 0C 9E		CJNE	A,#12,ITRET	;SEE IF ANEG
 3863:	  0FA2	D3			SETB	C
 3864:	  0FA3	50 9B		XOP11:	JNC	ITRET		;PROCESS NON-INCREASING PRECEDENCE
 3865:					;
 3866:					; Save increasing precedence
 3867:					;
 3868:	  0FA5	C0 05			PUSH	R5B0		;SAVE OLD PRECEDENCE ADDRESS
 3869:	  0FA7	C0 02			PUSH	R2B0		;SAVE NEW PRECEDENCE ADDRESS
 3870:	  0FA9	D1 D7			ACALL	GCI1		;EAT THE OPERATOR
 3871:	  0FAB	F1 45			ACALL	EP1		;EVALUATE REMAINING EXPRESSION
 3872:	  0FAD	D0 E0		XOP12:	POP	ACC
 3873:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 71



 Line  I  Addr  Code            Source

 3874:					; R2 has the action address, now setup and perform operation
 3875:					;
 3876:	  0FAF	90 00 57	XOP2:	MOV	DPTR,#OPTAB
 3877:	  0FB2	24 30			ADD	A,#LOW (NOT OPBOL)
 3878:	  0FB4	31 5C			CALL	ISTA1		;SET UP TO RETURN TO EP2
 3879:	  0FB6	E1 49			AJMP	EP2		;JUMP TO EVALUATE EXPRESSION
 3880:					;
 3881:					; Built-in operator processing
 3882:					;
 3883:	  0FB8	D1 D7		XBILT:	ACALL	GCI1		;EAT THE TOKEN
 3884:	  0FBA	24 30			ADD	A,#LOW (50H+LOW UOPBOL)
 3885:	  0FBC	20 24 C3		JB	ARGF,EP5	;XBILT MUST COME AFTER AN OPERATOR
 3886:	  0FBF	B4 EE 00		CJNE	A,#STP,XBILT1
 3887:	  0FC2	50 EB		XBILT1: JNC	XOP2
 3888:					;
 3889:	  0FC4	C0 E0		XLPAR:	PUSH	ACC		;PUT ADDRESS ON THE STACK
 3890:	  0FC6	91 DF			ACALL	P_E
 3891:	  0FC8	80 E3			SJMP	XOP12		;PERFORM OPERATION
 3892:					;
 3893:	  0FCA	B4 03 B5	XOP3:	CJNE	A,#T_ADD-T_LPAR,EP5
 3894:	  0FCD	D1 D7			ACALL	GCI1
 3895:	  0FCF	E1 49			AJMP	EP2		;WASTE + SIGN
 3896:					;
 3897:	  0FD1	B1 AD		XPOP:	ACALL	X3120		;FLIP ARGS THEN POP
 3898:					;
 3899:					;***************************************************************
 3900:					;
 3901:					; POPAS - Pop arg stack and copy variable to R3:R1
 3902:					;
 3903:					;***************************************************************
 3904:					;
 3905:	  0FD3	12 12 4F	POPAS:	LCALL	INC_ASTKA
 3906:	  0FD6	02 14 72		JMP	VARCOP		;COPY THE VARIABLE
 3907:					;
 3908:	  0FD9	7A 01		AXTAL:	MOV	R2,#HIGH CXTAL
 3909:	  0FDB	78 13			MOV	R0,#LOW CXTAL
 3910:					;
 3911:					; fall thru
 3912:					;
 3913:					;***************************************************************
 3914:					;
 3915:	  0FDD			PUSHAS: ; Push the Value addressed by R2:R0 onto the arg stack
 3916:					;
 3917:					;***************************************************************
 3918:					;
 3919:	  0FDD	12 12 0B		CALL	DEC_ASTKA
 3920:	  0FE0	D2 24			SETB	ARGF		;SAYS THAT SOMTHING IS ON THE STACK
 3921:	  0FE2	02 14 72		LJMP	VARCOP
 3922:					;
 3923:					;
 3924:					;***************************************************************
 3925:					;
 3926:	  0FE5			ST_A:	; Store at expression
 3927:					;
 3928:					;***************************************************************
 3929:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 72



 Line  I  Addr  Code            Source

 3930:	  0FE5	D1 8E			ACALL	ONE		;GET THE EXPRESSION
 3931:	  0FE7	80 EA			SJMP	POPAS		;SAVE IT
 3932:					;
 3933:					;
 3934:					;***************************************************************
 3935:					;
 3936:	  0FE9			LD_A:	; Load at expression
 3937:					;
 3938:					;***************************************************************
 3939:					;
 3940:	  0FE9	D1 8E			ACALL	ONE		;GET THE EXPRESSION
 3941:	  0FEB	B1 AD			ACALL	X3120		;FLIP ARGS
 3942:	  0FED	80 EE			SJMP	PUSHAS
 3943:					;
 3944:					;***************************************************************
 3945:					;
 3946:	  0FEF			CONST:	; Get a constant fron the text
 3947:					;
 3948:					;***************************************************************
 3949:					;
 3950:	  0FEF	D1 CD			CALL	GC		;FIRST SEE IF LITERAL
 3951:	  0FF1	B4 D1 31		CJNE	A,#T_ASC,C0C	;SEE IF ASCII TOKEN
 3952:	  0FF4	D1 CB			CALL	IGC		;GET THE CHARACTER AFTER TOKEN
 3953:	  0FF6	B4 24 05		CJNE	A,#'$',CN0      ;SEE IF A STRING
 3954:					;
 3955:	  0FF9	51 1E		CNX:	CALL	CSY		;CALCULATE IT
 3956:	  0FFB	02 13 C0		JMP	AXBYTE1 	;SAVE IT ON THE STACK
 3957:				;
 3958:				;*****************************************************************************
 3959:				;****** Correct ASC(x) bug ***************************************************
 3960:				;****** Wulf 5 ***************************************************************
 3961:				;
 3962:				;
 3963:	  0FFE	30 E7 1B	CN0:	jnb	acc.7,cn0t	;jump if possibly ascii
 3964:	  1001	90 01 75		mov	dptr,#toktab
 3965:	  1004	FE			mov	r6,a		;save search token
 3966:	  1005	F4		cn0t1:	cpl	a
 3967:	  1006	60 13			jz	cn0t4		;jump if EOT
 3968:	  1008	E4			clr	a
 3969:	  1009	93			movc	a,@a+dptr	;read token from token table
 3970:	  100A	A3			inc	dptr
 3971:	  100B	B5 06 F7		cjne	a,r6b0,cn0t1	;jump if wrong entry
 3972:					;
 3973:	  100E	FD			mov	r5,a		;save search token
 3974:	  100F	E4			clr	a
 3975:	  1010	93		cn0t2:	movc	a,@a+dptr
 3976:	  1011	FE			mov	r6,a		;save first ascii of token text
 3977:					;
 3978:	  1012	E4		cn0t3:	clr	a
 3979:	  1013	93			movc	a,@a+dptr
 3980:	  1014	A3			inc	dptr
 3981:	  1015	30 E7 FA		jnb	acc.7,cn0t3	;jump if possibly ascii
 3982:					;
 3983:	  1018	6D			xrl	a,r5
 3984:	  1019	60 F5			jz	cn0t2		;jump if same search token again
 3985:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 73



 Line  I  Addr  Code            Source

 3986:	  101B	EE		cn0t4:	mov	a,r6		;get saved ascii
 3987:	  101C	12 14 B1	CN0t:	CALL	TWO_R2		;PUT IT ON THE STACK
 3988:				;
 3989:				;****** continue with original code: *****************************************
 3990:				;
 3991:	  101F	12 0E D7		CALL	GCI1		;BUMP THE POINTER
 3992:	  1022	02 0C E3		JMP	ERPAR		;WASTE THE RIGHT PAREN
 3993:					;
 3994:	  1025	12 0E A2	C0C:	CALL	DP_T		;GET THE TEXT POINTER
 3995:	  1028	12 19 57		CALL	GET_NUM 	;GET THE NUMBER
 3996:	  102B	B4 FF 02		CJNE	A,#0FFH,C1C	;SEE IF NO NUMBER
 3997:	  102E	D3			SETB	C
 3998:	  102F	22		C2C:	RET
 3999:					;
 4000:	  1030	70 06		C1C:	JNZ	FPTST
 4001:	  1032	C3			CLR	C
 4002:	  1033	D2 24			SETB	ARGF
 4003:					;
 4004:	  1035	02 0E B8	C3C:	JMP	T_DP
 4005:					;
 4006:	  1038	54 0B		FPTST:	ANL	A,#00001011B	;CHECK FOR ERROR
 4007:	  103A	60 F3			JZ	C2C		;EXIT IF ZERO
 4008:					;
 4009:					; Handle the error condition
 4010:					;
 4011:	  103C	90 17 51		MOV	DPTR,#E2X	;DIVIDE BY ZERO
 4012:	  103F	30 E0 03		JNB	ACC.0,FPTST1	;UNDERFLOW
 4013:	  1042	90 18 04		MOV	DPTR,#E7X
 4014:	  1045	30 E1 03	FPTST1: JNB	ACC.1,FPTS	;OVERFLOW
 4015:	  1048	90 1F 89		MOV	DPTR,#E11X
 4016:					;
 4017:	  104B	02 18 8F	FPTS:	JMP	ERROR
 4018:					;
 4019:					;***************************************************************
 4020:					;
 4021:					; The Command action routine - LIST
 4022:					;
 4023:					;***************************************************************
 4024:					;
 4025:	  104E	12 0C 19	CLIST:	CALL	NUMC		;SEE IF TO LINE PORT
 4026:	  1051	71 CB			ACALL	FSTK		;PUT 0FFFFH ON THE STACK
 4027:	  1053	12 0F 35		CALL	INTGER		;SEE IF USER SUPPLIES LN
 4028:	  1056	E4			CLR	A		;LN = 0 TO START
 4029:	  1057	FB			MOV	R3,A
 4030:	  1058	F9			MOV	R1,A
 4031:	  1059	40 14			JC	CL1		;START FROM ZERO
 4032:					;
 4033:	  105B	12 18 54		CALL	TEMPD		;SAVE THE START ADDTESS
 4034:	  105E	12 0E D5		CALL	GCI		;GET THE CHARACTER AFTER LIST
 4035:	  1061	B4 E5 07		CJNE	A,#T_SUB,CLIST1 ;CHECK FOR TERMINATION ADDRESS '-'
 4036:	  1064	51 4F			ACALL	INC_ASTKA	;WASTE 0FFFFH
 4037:	  1066	12 0F 30		LCALL	INTERR		;GET TERMINATION ADDRESS
 4038:	  1069	91 B4			ACALL	TWO_EY		;PUT TERMINATION ON THE ARG STACK
 4039:	  106B	AB 0F		CLIST1: MOV	R3,TEMP5	;GET THE START ADDTESS
 4040:	  106D	A9 0E			MOV	R1,TEMP4
 4041:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 74



 Line  I  Addr  Code            Source

 4042:	  106F	12 05 8C	CL1:	CALL	GETLIN		;GET THE LINE NO IN R3:R1
 4043:	  1072	60 1E			JZ	CL3		;RET IF AT END
 4044:					;
 4045:	  1074	11 35		CL2:	ACALL	C3C		;SAVE THE ADDRESS
 4046:	  1076	A3			INC	DPTR		;POINT TO LINE NUMBER
 4047:	  1077	D1 52			ACALL	PMTOP1		;PUT LINE NUMBER ON THE STACK
 4048:	  1079	51 08			ACALL	CMPLK		;COMPARE LN TO END ADDRESS
 4049:	  107B	40 15			JC	CL3		;EXIT IF GREATER
 4050:	  107D	12 07 8D		CALL	BCK		;CHECK FOR A CONTROL C
 4051:	  1080	51 0B			ACALL	DEC_ASTKA	;SAVE THE COMPARE ADDRESS
 4052:	  1082	12 0E A2		CALL	DP_T		;RESTORE ADDRESS
 4053:	  1085	11 A3			ACALL	UPPL		;UN-PROCESS THE LINE
 4054:	  1087	11 35			ACALL	C3C		;SAVE THE CR ADDRESS
 4055:	  1089	11 94			ACALL	CL6		;PRINT IT
 4056:	  108B	A3			INC	DPTR		;BUMP POINTER TO NEXT LINE
 4057:	  108C	E0			MOVX	A,@DPTR 	;GET LIN LENGTH
 4058:	  108D	D5 E0 E4		DJNZ	ACC,CL2 	;LOOP
 4059:	  1090	51 4F			ACALL	INC_ASTKA	;WASTE THE COMPARE BYTE
 4060:					;
 4061:	  1092	E1 87		CL3:	AJMP	CMND1		;BACK TO COMMAND PROCESSOR
 4062:					;
 4063:	  1094	90 00 07	CL6:	MOV	DPTR,#IBUF	;PRINT IBUF
 4064:	  1097	12 06 C1		CALL	PRNTCR		;PRINT IT
 4065:	  109A	12 0E A2		CALL	DP_T
 4066:					;
 4067:	  109D	02 06 A5	CL7:	JMP	CRLF
 4068:					;
 4069:	  10A0	12 05 79	UPPL0:	LCALL	X31DP
 4070:					;
 4071:					;***************************************************************
 4072:					;
 4073:					;UPPL - UN PREPROCESS A LINE ADDRESSED BY DPTR INTO IBUF
 4074:					;	RETURN SOURCE ADDRESS OF CR IN DPTR ON RETURN
 4075:					;
 4076:					;***************************************************************
 4077:					;
 4078:	  10A3	7B 00		UPPL:	MOV	R3,#HIGH IBUF	;POINT R3 AT HIGH IBUF
 4079:	  10A5	79 07			MOV	R1,#LOW IBUF	;POINT R1 AT IBUF
 4080:	  10A7	A3			INC	DPTR		;SKIP OVER LINE LENGTH
 4081:				;
 4082:				;*****************************************************************************
 4083:				;****** Elektor 1 Patch ******************************************************
 4084:				;
 4085:				;	ACALL	C3C		;SAVE THE DPTR (DP_T)
 4086:				;	CALL	L20DPI		;PUT LINE NUMBER IN R2:R0
 4087:				;	CALL	FP_BASE8	;CONVERT R2:R0 TO INTEGER
 4088:				;	CALL	DP_T
 4089:				;	INC	DPTR		;BUMP DPTR PAST THE LINE NUMBER
 4090:				;
 4091:				;****** Proper code starts here: *********************************************
 4092:				;
 4093:	  10A8	12 05 73		lcall	L20DPI		;PUT LINE NUMBER IN R2:R0
 4094:	  10AB	12 19 7F		lcall	FP_BASE8	;CONVERT R2:R0 TO INTEGER
 4095:				;
 4096:				;****** continue with original code: *****************************************
 4097:				;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 75



 Line  I  Addr  Code            Source

 4098:	  10AE	B9 0D 00	UPP0:	CJNE	R1,#LOW IBUF+6,UPP01
 4099:	  10B1	40 22		UPP01:	JC	UPP91		;PUT SPACES IN TEXT
 4100:	  10B3	A3			INC	DPTR		;BUMP PAST LN HIGH
 4101:	  10B4	E0			MOVX	A,@DPTR 	;GET USER TEXT
 4102:	  10B5	FE			MOV	R6,A		;SAVE A IN R6 FOR TOKE COMPARE
 4103:	  10B6	20 E7 24		JB	ACC.7,UPP1	;IF TOKEN, PROCESS
 4104:	  10B9	B4 20 00		CJNE	A,#20H,UPP02	;TRAP THE USER TOKENS
 4105:	  10BC	50 03		UPP02:	JNC	UPP03
 4106:	  10BE	B4 0D 1C		CJNE	A,#CR,UPP1	;DO IT IF NOT A CR
 4107:	  10C1	B4 22 09	UPP03:	CJNE	A,#'"',UPP9     ;SEE IF STRING
 4108:	  10C4	31 21			ACALL	UPP7		;SAVE IT
 4109:	  10C6	31 23		UPP04:	ACALL	UPP8		;GET THE NEXT CHARACTER AND SAVE IT
 4110:	  10C8	B4 22 FB		CJNE	A,#'"',UPP04    ;LOOP ON QUOTES
 4111:	  10CB	80 E1			SJMP	UPP0
 4112:					;
 4113:	  10CD	B4 3A 09	UPP9:	CJNE	A,#':',UPP1A    ;PUT A SPACE IN DELIMITER
 4114:	  10D0	31 1F			ACALL	UPP7A
 4115:	  10D2	EE			MOV	A,R6
 4116:	  10D3	31 21			ACALL	UPP7
 4117:	  10D5	31 1F		UPP91:	ACALL	UPP7A
 4118:	  10D7	80 D5			SJMP	UPP0
 4119:					;
 4120:	  10D9	31 25		UPP1A:	ACALL	UPP81		;SAVE THE CHARACTER, UPDATE POINTER
 4121:	  10DB	80 D1			SJMP	UPP0		;EXIT IF A CR, ELSE LOOP
 4122:					;
 4123:	  10DD	11 35		UPP1:	ACALL	C3C		;SAVE THE TEXT POINTER
 4124:	  10DF	A2 2D			MOV	C,XBIT
 4125:	  10E1	92 D5			MOV	F0,C		;SAVE XBIT IN F0
 4126:	  10E3	90 01 75	UPP11:	MOV	DPTR,#TOKTAB	;POINT AT TOKEN TABLE
 4127:	  10E6	30 D5 03		JNB	F0,UPP2
 4128:	  10E9	12 20 78		LCALL	2078H		;SET UP DPTR FOR LOOKUP
 4129:					;
 4130:	  10EC	E4		UPP2:	CLR	A		;ZERO A FOR LOOKUP
 4131:	  10ED	93			MOVC	A,@A+DPTR	;GET TOKEN
 4132:	  10EE	A3			INC	DPTR		;ADVANCE THE TOKEN POINTER
 4133:	  10EF	B4 FF 05		CJNE	A,#0FFH,UP_2	;SEE IF DONE
 4134:	  10F2	10 D5 EE		JBC	F0,UPP11	;NOW DO NORMAL TABLE
 4135:	  10F5	E1 87			AJMP	CMND1		;EXIT IF NOT FOUND
 4136:					;
 4137:	  10F7	B5 06 F2	UP_2:	CJNE	A,R6B0,UPP2	;LOOP UNTIL THE SAME
 4138:					;
 4139:	  10FA	B4 B0 00	UP_3:	CJNE	A,#T_UOP,UP_4
 4140:	  10FD	50 02		UP_4:	JNC	UPP3
 4141:	  10FF	31 1F			ACALL	UPP7A		;PRINT THE SPACE IF OK
 4142:					;
 4143:	  1101	E4		UPP3:	CLR	A		;DO LOOKUP
 4144:	  1102	93			MOVC	A,@A+DPTR
 4145:	  1103	20 E7 07		JB	ACC.7,UPP4	;EXIT IF DONE, ELSE SAVE
 4146:	  1106	60 05			JZ	UPP4		;DONE IF ZERO
 4147:	  1108	31 21			ACALL	UPP7		;SAVE THE CHARACTER
 4148:	  110A	A3			INC	DPTR
 4149:	  110B	80 F4			SJMP	UPP3		;LOOP
 4150:					;
 4151:	  110D	12 0E A2	UPP4:	CALL	DP_T		;GET IT BACK
 4152:	  1110	EE			MOV	A,R6		;SEE IF A REM TOKEN
 4153:	  1111	64 96			XRL	A,#T_REM

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 76



 Line  I  Addr  Code            Source

 4154:	  1113	70 04			JNZ	UPP42
 4155:	  1115	31 23		UPP41:	ACALL	UPP8
 4156:	  1117	80 FC			SJMP	UPP41
 4157:	  1119	50 93		UPP42:	JNC	UPP0		;START OVER AGAIN IF NO TOKEN
 4158:	  111B	31 1F			ACALL	UPP7A		;PRINT THE SPACE IF OK
 4159:	  111D	80 8F			SJMP	UPP0		;DONE
 4160:					;
 4161:	  111F	74 20		UPP7A:	MOV	A,#' '          ;OUTPUT A SPACE
 4162:					;
 4163:	  1121	C1 44		UPP7:	AJMP	PPL91		;SAVE A
 4164:					;
 4165:	  1123	A3		UPP8:	INC	DPTR
 4166:	  1124	E0			MOVX	A,@DPTR
 4167:	  1125	B4 0D F9	UPP81:	CJNE	A,#CR,UPP7
 4168:	  1128	C1 30			AJMP	PPL71
 4169:					;
 4170:					;**************************************************************
 4171:					;
 4172:					; This table contains all of the floating point constants
 4173:					;
 4174:					; The constants in ROM are stored "backwards" from the way
 4175:					; basic normally treats floating point numbers. Instead of
 4176:					; loading from the exponent and decrementing the pointer,
 4177:					; ROM constants pointers load from the most significant
 4178:					; digits and increment the pointers. This is done to 1) make
 4179:					; arg stack loading faster and 2) compensate for the fact that
 4180:					; no decrement data pointer instruction exsist.
 4181:					;
 4182:					; The numbers are stored as follows:
 4183:					;
 4184:					; BYTE X+5    = MOST SIGNIFICANT DIGITS IN BCD
 4185:					; BYTE X+4    = NEXT MOST SIGNIFICANT DIGITS IN BCD
 4186:					; BYTE X+3    = NEXT LEAST SIGNIFICANT DIGITS IN BCD
 4187:					; BYTE X+2    = LEAST SIGNIFICANT DIGITS IN BCD
 4188:					; BYTE X+1    = SIGN OF THE ABOVE MANTISSA 0 = +, 1 = -
 4189:					; BYTE X      = EXPONENT IN TWO'S COMPLEMENT BINARY
 4190:					;		ZERO EXPONENT = THE NUMBER ZERO
 4191:					;
 4192:					;**************************************************************
 4193:					;
 4194:	  112A	7E		ATTAB:	DB	128-2		; ARCTAN LOOKUP
 4195:	  112B	00			DB	00H
 4196:	  112C	57			DB	57H
 4197:	  112D	22			DB	22H
 4198:	  112E	66			DB	66H
 4199:	  112F	28			DB	28H
 4200:					;
 4201:	  1130	7F			DB	128-1
 4202:	  1131	01			DB	01H
 4203:	  1132	37			DB	37H
 4204:	  1133	57			DB	57H
 4205:	  1134	16			DB	16H
 4206:	  1135	16			DB	16H
 4207:					;
 4208:	  1136	7F			DB	128-1
 4209:	  1137	00			DB	00H

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 77



 Line  I  Addr  Code            Source

 4210:	  1138	14			DB	14H
 4211:	  1139	96			DB	96H
 4212:	  113A	90			DB	90H
 4213:	  113B	42			DB	42H
 4214:					;
 4215:	  113C	7F			DB	128-1
 4216:	  113D	01			DB	01H
 4217:	  113E	40			DB	40H
 4218:	  113F	96			DB	96H
 4219:	  1140	28			DB	28H
 4220:	  1141	75			DB	75H
 4221:					;
 4222:	  1142	80			DB	128
 4223:	  1143	00			DB	00H
 4224:	  1144	64			DB	64H
 4225:	  1145	62			DB	62H
 4226:	  1146	65			DB	65H
 4227:	  1147	10			DB	10H
 4228:					;
 4229:	  1148	80			DB	128
 4230:	  1149	01			DB	01H
 4231:	  114A	99			DB	99H
 4232:	  114B	88			DB	88H
 4233:	  114C	20			DB	20H
 4234:	  114D	14			DB	14H
 4235:					;
 4236:	  114E	80			DB	128
 4237:	  114F	00			DB	00H
 4238:	  1150	51			DB	51H
 4239:	  1151	35			DB	35H
 4240:	  1152	99			DB	99H
 4241:	  1153	19			DB	19H
 4242:					;
 4243:	  1154	80			DB	128
 4244:	  1155	01			DB	01H
 4245:	  1156	45			DB	45H
 4246:	  1157	31			DB	31H
 4247:	  1158	33			DB	33H
 4248:	  1159	33			DB	33H
 4249:					;
 4250:	  115A	81			DB	129
 4251:	  115B	00			DB	00H
 4252:	  115C	00			DB	00H
 4253:	  115D	00			DB	00H
 4254:	  115E	00			DB	00H
 4255:	  115F	10			DB	10H
 4256:					;
 4257:	  1160	FF			DB	0FFH		;END OF TABLE
 4258:					;
 4259:	  1161	81		NTWO:	DB	129
 4260:	  1162	00			DB	0
 4261:	  1163	00			DB	0
 4262:	  1164	00			DB	0
 4263:	  1165	00			DB	0
 4264:	  1166	20			DB	20H
 4265:				;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 78



 Line  I  Addr  Code            Source

 4266:				;*****************************************************************************
 4267:				;****** Use XTAL up to 47 MHz ************************************************
 4268:				;****** Wulf 2 ***************************************************************
 4269:				;
 4270:				;TTIME: DB	128-4		; CLOCK CALCULATION
 4271:				;	DB	00H
 4272:				;	DB	00H
 4273:				;	DB	00H
 4274:				;	DB	04H
 4275:				;	DB	13H
 4276:				;
 4277:	  1167	7B		ttime:	db	128-5		;New clock calculation for timer 0 in
 4278:	  1168	00			db	00H		;16 bit mode
 4279:	  1169	42			db	42H
 4280:	  116A	60			db	60H
 4281:	  116B	27			db	27H
 4282:	  116C	16			db	16H
 4283:				;
 4284:				;*****************************************************************************
 4285:				;
 4286:					;***************************************************************
 4287:					;
 4288:					; COSINE - Add pi/2 to stack, then fall thru to SIN
 4289:					;
 4290:					;***************************************************************
 4291:					;
 4292:	  116D	31 92		ACOS:	ACALL	POTWO		;PUT PI/2 ON THE STACK
 4293:	  116F	F1 41			ACALL	AADD		;TOS = TOS+PI/2
 4294:					;
 4295:					;***************************************************************
 4296:					;
 4297:					; SINE - use taylor series to calculate sin function
 4298:					;
 4299:					;***************************************************************
 4300:					;
 4301:	  1171	91 7F		ASIN:	ACALL	PIPI		;PUT PI ON THE STACK
 4302:	  1173	31 B5			ACALL	RV		;REDUCE THE VALUE
 4303:	  1175	E5 46			MOV	A,MT2		;CALCULATE THE SIGN
 4304:	  1177	54 01			ANL	A,#01H		;SAVE LSB
 4305:	  1179	62 45			XRL	MT1,A		;SAVE SIGN IN MT1
 4306:	  117B	91 2C			ACALL	CSTAKA		;NOW CONVERT TO ONE QUADRANT
 4307:	  117D	31 92			ACALL	POTWO
 4308:	  117F	51 08			ACALL	CMPLK		;DO COMPARE
 4309:	  1181	40 04			JC	ASIN1
 4310:	  1183	91 7F			ACALL	PIPI
 4311:	  1185	F1 1C			ACALL	ASUB
 4312:	  1187	71 8F		ASIN1:	ACALL	AABS
 4313:	  1189	90 16 CE		MOV	DPTR,#SINTAB	;SET UP LOOKUP TABLE
 4314:	  118C	31 9B			ACALL	POLYC		;CALCULATE THE POLY
 4315:	  118E	31 DA			ACALL	STRIP
 4316:	  1190	21 FC			AJMP	SIN0
 4317:					;
 4318:					; Put PI/2 on the stack
 4319:					;
 4320:	  1192	91 7F		POTWO:	ACALL	PIPI		;PUT PI ON THE STACK, NOW DIVIDE
 4321:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 79



 Line  I  Addr  Code            Source

 4322:	  1194	90 11 61	DBTWO:	MOV	DPTR,#NTWO
 4323:	  1197	91 33			ACALL	PUSHC
 4324:					;MOV	A,#2		;BY TWO
 4325:					;ACALL	TWO_R2
 4326:	  1199	81 0A			AJMP	ADIV
 4327:					;
 4328:					;*************************************************************
 4329:					;
 4330:	  119B			POLYC:	; Expand a power series to calculate a polynomial
 4331:					;
 4332:					;*************************************************************
 4333:					;
 4334:	  119B	91 2A			ACALL	CSTAKA2 	;COPY THE STACK
 4335:	  119D	31 B0			ACALL	AMUL		;SQUARE THE STACK
 4336:	  119F	91 48			ACALL	POP_T1		;SAVE X*X
 4337:	  11A1	91 33			ACALL	PUSHC		;PUT CONSTANT ON STACK
 4338:					;
 4339:	  11A3	91 4F		POLY1:	ACALL	PUSH_T1 	;PUT COMPUTED VALUE ON STACK
 4340:	  11A5	31 B0			ACALL	AMUL		;MULTIPLY CONSTANT AND COMPUTED VALUE
 4341:	  11A7	91 33			ACALL	PUSHC		;PUT NEXT CONSTANT ON STACK
 4342:	  11A9	F1 41			ACALL	AADD		;ADD IT TO THE OLD VALUE
 4343:	  11AB	E4			CLR	A		;CHECK TO SEE IF DONE
 4344:	  11AC	93			MOVC	A,@A+DPTR
 4345:	  11AD	B4 FF F3		CJNE	A,#0FFH,POLY1	;LOOP UNTIL DONE
 4346:					;
 4347:	  11B0	12 19 75	AMUL:	LCALL	FP_BASE3
 4348:	  11B3	01 38			AJMP	FPTST
 4349:					;
 4350:					;*************************************************************
 4351:					;
 4352:	  11B5			RV:	; Reduce a value for Trig and A**X functions
 4353:					;
 4354:					; value = (value/x - INT(value/x)) * x
 4355:					;
 4356:					;*************************************************************
 4357:					;
 4358:	  11B5	91 6C			ACALL	C2_T2		;COPY TOS TO T2
 4359:	  11B7	91 0A			ACALL	ADIV		;TOS = TOS/TEMP2
 4360:	  11B9	71 8F			ACALL	AABS		;MAKE THE TOS A POSITIVE NUMBER
 4361:	  11BB	F5 45			MOV	MT1,A		;SAVE THE SIGN
 4362:	  11BD	91 2A			ACALL	CSTAKA2 	;COPY THE STACK TWICE
 4363:	  11BF	51 23			ACALL	IFIX		;PUT THE NUMBER IN R3:R1
 4364:	  11C1	C0 03			PUSH	R3B0		;SAVE R3
 4365:	  11C3	89 46			MOV	MT2,R1		;SAVE THE LS BYTE IN MT2
 4366:	  11C5	71 6D			ACALL	AINT		;MAKE THE TOS AN INTEGER
 4367:	  11C7	F1 1C			ACALL	ASUB		;TOS = TOS/T2 - INT(TOS/T2)
 4368:	  11C9	91 56			ACALL	P_T2		;TOS = T2
 4369:	  11CB	31 B0			ACALL	AMUL		;TOS = T2*(TOS/T2 - INT(TOS/T2)
 4370:	  11CD	D0 03			POP	R3B0		;RESTORE R3
 4371:	  11CF	22			RET			;EXIT
 4372:					;
 4373:					;**************************************************************
 4374:					;
 4375:					; TAN
 4376:					;
 4377:					;**************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 80



 Line  I  Addr  Code            Source

 4378:					;
 4379:	  11D0	91 2C		ATAN:	ACALL	CSTAKA		;DUPLACATE STACK
 4380:	  11D2	31 71			ACALL	ASIN		;TOS = SIN(X)
 4381:	  11D4	91 5A			ACALL	SWAP_ASTKA	;TOS = X
 4382:	  11D6	31 6D			ACALL	ACOS		;TOS = COS(X)
 4383:	  11D8	81 0A			AJMP	ADIV		;TOS = SIN(X)/COS(X)
 4384:					;
 4385:	  11DA	51 53		STRIP:	ACALL	SETREG		;SETUP R0
 4386:	  11DC	7B 01			MOV	R3,#1		;LOOP COUNT
 4387:	  11DE	61 81			AJMP	AI11		;WASTE THE LSB
 4388:					;
 4389:					;************************************************************
 4390:					;
 4391:					; ARC TAN
 4392:					;
 4393:					;************************************************************
 4394:					;
 4395:	  11E0	71 8F		AATAN:	ACALL	AABS
 4396:	  11E2	F5 45			MOV	MT1,A		;SAVE THE SIGN
 4397:	  11E4	51 53			ACALL	SETREG		;GET THE EXPONENT
 4398:	  11E6	24 7F			ADD	A,#7FH		;BIAS THE EXPONENT
 4399:	  11E8	92 2A			MOV	UBIT,C		;SAVE CARRY STATUS
 4400:	  11EA	50 02			JNC	AATAN1		;SEE IF > 1
 4401:	  11EC	51 7C			ACALL	RECIP		;IF > 1, TAKE RECIP
 4402:	  11EE	90 11 2A	AATAN1: MOV	DPTR,#ATTAB	;SET UP TO CALCULATE THE POLY
 4403:	  11F1	31 9B			ACALL	POLYC		;CALCULATE THE POLY
 4404:	  11F3	30 2A 06		JNB	UBIT,SIN0	;JUMP IF NOT SET
 4405:	  11F6	71 A1			ACALL	ANEG		;MAKE X POLY NEGATIVE
 4406:	  11F8	31 92			ACALL	POTWO		;SUBTRACT PI/2
 4407:	  11FA	F1 41			ACALL	AADD
 4408:					;
 4409:	  11FC	E5 45		SIN0:	MOV	A,MT1		;GET THE SIGN
 4410:	  11FE	60 19			JZ	SRT
 4411:	  1200	61 A1			AJMP	ANEG
 4412:					;
 4413:					;*************************************************************
 4414:					;
 4415:					; FCOMP - COMPARE 0FFFFH TO TOS
 4416:					;
 4417:					;*************************************************************
 4418:					;
 4419:	  1202	91 2C		FCMP:	ACALL	CSTAKA		;COPY THE STACK
 4420:	  1204	71 CB			ACALL	FSTK		;MAKE THE TOS = 0FFFFH
 4421:	  1206	91 5A			ACALL	SWAP_ASTKA	;NOW COMPARE IS 0FFFFH - X
 4422:					;
 4423:	  1208	02 19 73	CMPLK:	JMP	FP_BASE2	;DO THE COMPARE
 4424:					;
 4425:					;*************************************************************
 4426:					;
 4427:	  120B			DEC_ASTKA:	;Push ARG STACK and check for underflow
 4428:					;
 4429:					;*************************************************************
 4430:					;
 4431:	  120B	74 FA			MOV	A,#-FPSIZ
 4432:	  120D	25 09			ADD	A,ASTKA
 4433:	  120F	B4 32 00		CJNE	A,#LOW TM_TOP+6,DEC_ASTKA1

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 81



 Line  I  Addr  Code            Source

 4434:	  1212			DEC_ASTKA1:
 4435:	  1212	40 06			JC	E4YY
 4436:	  1214	F5 09			MOV	ASTKA,A
 4437:	  1216	F9			MOV	R1,A
 4438:	  1217	7B 01			MOV	R3,#ASTKAH
 4439:					;
 4440:	  1219	22		SRT:	RET
 4441:					;
 4442:	  121A	90 03 7B	E4YY:	MOV	DPTR,#EXA
 4443:	  121D	01 4B			AJMP	FPTS		;ARG STACK ERROR
 4444:					;
 4445:					;
 4446:	  121F	91 33		AXTAL3: ACALL	PUSHC		;PUSH CONSTANT, THEN MULTIPLY
 4447:	  1221	31 B0			ACALL	AMUL
 4448:					;
 4449:					; Fall thru to IFIX
 4450:					;
 4451:					;***************************************************************
 4452:					;
 4453:	  1223			IFIX:	; Convert a floating point number to an integer, put in R3:R1
 4454:					;
 4455:					;***************************************************************
 4456:					;
 4457:	  1223	E4			CLR	A		;RESET THE START
 4458:	  1224	FB			MOV	R3,A
 4459:	  1225	F9			MOV	R1,A
 4460:	  1226	A8 09			MOV	R0,ASTKA	;GET THE ARG STACK
 4461:	  1228	75 A0 01		MOV	P2,#ASTKAH
 4462:	  122B	E2			MOVX	A,@R0		;READ EXPONENT
 4463:	  122C	C3			CLR	C
 4464:	  122D	94 81			SUBB	A,#81H		;BASE EXPONENT
 4465:	  122F	FC			MOV	R4,A		;SAVE IT
 4466:	  1230	18			DEC	R0		;POINT AT SIGN
 4467:	  1231	E2			MOVX	A,@R0		;GET THE SIGN
 4468:	  1232	70 56			JNZ	SQ_ERR		;ERROR IF NEGATIVE
 4469:	  1234	40 19			JC	INC_ASTKA	;EXIT IF EXPONENT IS < 81H
 4470:	  1236	0C			INC	R4		;ADJUST LOOP COUNTER
 4471:	  1237	E8			MOV	A,R0		;BUMP THE POINTER REGISTER
 4472:	  1238	94 05			SUBB	A,#FPSIZ-1
 4473:	  123A	F8			MOV	R0,A
 4474:					;
 4475:	  123B	08		I2:	INC	R0		;POINT AT DIGIT
 4476:	  123C	E2			MOVX	A,@R0		;GET DIGIT
 4477:	  123D	C4			SWAP	A		;FLIP
 4478:	  123E	12 19 83		CALL	FP_BASE10	;ACCUMULATE
 4479:	  1241	40 47			JC	SQ_ERR
 4480:	  1243	DC 02			DJNZ	R4,I21
 4481:	  1245	80 08			SJMP	INC_ASTKA
 4482:	  1247	E2		I21:	MOVX	A,@R0		;GET DIGIT
 4483:	  1248	12 19 83		CALL	FP_BASE10
 4484:	  124B	40 3D			JC	SQ_ERR
 4485:	  124D	DC EC			DJNZ	R4,I2
 4486:					;
 4487:					;************************************************************
 4488:					;
 4489:	  124F			INC_ASTKA:	; Pop the ARG STACK and check for overflow

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 82



 Line  I  Addr  Code            Source

 4490:					;
 4491:					;************************************************************
 4492:					;
 4493:	  124F	74 06			MOV	A,#FPSIZ	;NUMBER TO POP
 4494:	  1251	80 01			SJMP	SETREG1
 4495:					;
 4496:	  1253	E4		SETREG: CLR	A		;DON'T POP ANYTHING
 4497:	  1254	A8 09		SETREG1:MOV	R0,ASTKA
 4498:	  1256	7A 01			MOV	R2,#ASTKAH
 4499:	  1258	8A A0			MOV	P2,R2
 4500:	  125A	28			ADD	A,R0
 4501:	  125B	40 BD			JC	E4YY
 4502:	  125D	F5 09			MOV	ASTKA,A
 4503:	  125F	E2			MOVX	A,@R0
 4504:	  1260	22		A_D:	RET
 4505:					;
 4506:					;************************************************************
 4507:					;
 4508:					; EBIAS - Bias a number for E to the X calculations
 4509:					;
 4510:					;************************************************************
 4511:					;
 4512:	  1261	91 43		EBIAS:	ACALL	PUSH_ONE
 4513:	  1263	31 B5			ACALL	RV
 4514:	  1265	BB 00 22		CJNE	R3,#00H,SQ_ERR	;ERROR IF R3 <> 0
 4515:	  1268	91 6C			ACALL	C2_T2		;TEMP 2 GETS FRACTIONS
 4516:	  126A	51 4F			ACALL	INC_ASTKA
 4517:	  126C	91 48			ACALL	POP_T1
 4518:	  126E	91 43			ACALL	PUSH_ONE
 4519:					;
 4520:	  1270	E5 46		AELP:	MOV	A,MT2
 4521:	  1272	70 0E			JNZ	AEL1
 4522:					;
 4523:	  1274	E5 45			MOV	A,MT1
 4524:	  1276	60 E8			JZ	A_D
 4525:	  1278	90 01 1E		MOV	DPTR,#FPT2-1
 4526:	  127B	F0			MOVX	@DPTR,A 	;MAKE THE FRACTIONS NEGATIVE
 4527:					;
 4528:	  127C	91 43		RECIP:	ACALL	PUSH_ONE
 4529:	  127E	91 5A			ACALL	SWAP_ASTKA
 4530:	  1280	81 0A			AJMP	ADIV
 4531:					;
 4532:	  1282	15 46		AEL1:	DEC	MT2
 4533:	  1284	91 4F			ACALL	PUSH_T1
 4534:	  1286	31 B0			ACALL	AMUL
 4535:	  1288	80 E6			SJMP	AELP
 4536:					;
 4537:	  128A	02 09 BD	SQ_ERR: LJMP	E3XX		;LINK TO BAD ARG
 4538:					;
 4539:					;************************************************************
 4540:					;
 4541:					; SQUARE ROOT
 4542:					;
 4543:					;************************************************************
 4544:					;
 4545:	  128D	71 8F		ASQR:	ACALL	AABS		;GET THE SIGN

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 83



 Line  I  Addr  Code            Source

 4546:	  128F	70 F9			JNZ	SQ_ERR		;ERROR IF NEGATIVE
 4547:	  1291	91 6C			ACALL	C2_T2		;COPY VARIABLE TO T2
 4548:	  1293	91 48			ACALL	POP_T1		;SAVE IT IN T1
 4549:	  1295	78 19			MOV	R0,#LOW FPT1
 4550:	  1297	E2			MOVX	A,@R0		;GET EXPONENT
 4551:	  1298	60 24			JZ	SQR41		;EXIT IF ZERO
 4552:	  129A	24 80			ADD	A,#128		;BIAS THE EXPONENT
 4553:	  129C	50 05			JNC	SQR1		;SEE IF < 80H
 4554:	  129E	03			RR	A
 4555:	  129F	54 7F			ANL	A,#127
 4556:	  12A1	80 07			SJMP	SQR2
 4557:					;
 4558:	  12A3	F4		SQR1:	CPL	A		;FLIP BITS
 4559:	  12A4	04			INC	A
 4560:	  12A5	03			RR	A
 4561:	  12A6	54 7F			ANL	A,#127		;STRIP MSB
 4562:	  12A8	F4			CPL	A
 4563:	  12A9	04			INC	A
 4564:					;
 4565:	  12AA	24 80		SQR2:	ADD	A,#128		;BIAS EXPONENT
 4566:	  12AC	F2			MOVX	@R0,A		;SAVE IT
 4567:					;
 4568:					; NEWGUESS = ( X/OLDGUESS + OLDGUESS) / 2
 4569:					;
 4570:	  12AD	91 56		SQR4:	ACALL	P_T2		;TOS = X
 4571:	  12AF	91 4F			ACALL	PUSH_T1 	;PUT NUMBER ON STACK
 4572:	  12B1	91 0A			ACALL	ADIV		;TOS = X/GUESS
 4573:	  12B3	91 4F			ACALL	PUSH_T1 	;PUT ON AGAIN
 4574:	  12B5	F1 41			ACALL	AADD		;TOS = X/GUESS + GUESS
 4575:	  12B7	31 94			ACALL	DBTWO		;TOS = ( X/GUESS + GUESS ) / 2
 4576:	  12B9	71 1C			ACALL	TEMP_COMP	;SEE IF DONE
 4577:	  12BB	30 D5 EF		JNB	F0,SQR4
 4578:					;
 4579:	  12BE	81 4F		SQR41:	AJMP	PUSH_T1 	;PUT THE ANSWER ON THE STACK
 4580:					;
 4581:					;*************************************************************
 4582:					;
 4583:					; NATURAL LOG
 4584:					;
 4585:					;*************************************************************
 4586:					;
 4587:	  12C0	71 8F		ALN:	ACALL	AABS		;MAKE SURE THAT NUM IS POSITIVE
 4588:	  12C2	70 C6			JNZ	SQ_ERR		;ERROR IF NOT
 4589:	  12C4	F5 46			MOV	MT2,A		;CLEAR FOR LOOP
 4590:	  12C6	08			INC	R0		;POINT AT EXPONENT
 4591:	  12C7	E2			MOVX	A,@R0		;READ THE EXPONENT
 4592:	  12C8	60 C0			JZ	SQ_ERR		;ERROR IF EXPONENT IS ZERO
 4593:	  12CA	B4 81 00		CJNE	A,#81H,ALN1	;SEE IF NUM >= 1
 4594:	  12CD	92 2A		ALN1:	MOV	UBIT,C		;SAVE CARRY STATUS
 4595:	  12CF	40 02			JC	ALNL		;TAKE RECIP IF >= 1
 4596:	  12D1	51 7C			ACALL	RECIP
 4597:					;
 4598:					; Loop to reduce
 4599:					;
 4600:	  12D3	91 2C		ALNL:	ACALL	CSTAKA		;COPY THE STACK FOR COMPARE
 4601:	  12D5	91 43			ACALL	PUSH_ONE	;COMPARE NUM TO ONE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 84



 Line  I  Addr  Code            Source

 4602:	  12D7	51 08			ACALL	CMPLK
 4603:	  12D9	50 1D			JNC	ALNO		;EXIT IF DONE
 4604:	  12DB	51 53			ACALL	SETREG		;GET THE EXPONENT
 4605:	  12DD	24 85			ADD	A,#85H		;SEE HOW BIG IT IS
 4606:	  12DF	50 0E			JNC	ALN11		;BUMP BY EXP(11) IF TOO SMALL
 4607:	  12E1	91 30			ACALL	PLNEXP		;PUT EXP(1) ON STACK
 4608:	  12E3	74 01			MOV	A,#1		;BUMP COUNT
 4609:					;
 4610:	  12E5	25 46		ALNE:	ADD	A,MT2
 4611:	  12E7	40 A1			JC	SQ_ERR
 4612:	  12E9	F5 46			MOV	MT2,A
 4613:	  12EB	31 B0			ACALL	AMUL		;BIAS THE NUMBER
 4614:	  12ED	80 E4			SJMP	ALNL
 4615:					;
 4616:	  12EF	90 17 F2	ALN11:	MOV	DPTR,#EXP11	;PUT EXP(11) ON STACK
 4617:	  12F2	91 33			ACALL	PUSHC
 4618:	  12F4	74 0B			MOV	A,#11
 4619:	  12F6	80 ED			SJMP	ALNE
 4620:					;
 4621:	  12F8	91 6C		ALNO:	ACALL	C2_T2		;PUT NUM IN TEMP 2
 4622:	  12FA	91 43			ACALL	PUSH_ONE	;TOS = 1
 4623:	  12FC	F1 1C			ACALL	ASUB		;TOS = X - 1
 4624:	  12FE	91 56			ACALL	P_T2		;TOS = X
 4625:	  1300	91 43			ACALL	PUSH_ONE	;TOS = 1
 4626:	  1302	F1 41			ACALL	AADD		;TOS = X + 1
 4627:	  1304	91 0A			ACALL	ADIV		;TOS = (X-1)/(X+1)
 4628:	  1306	90 16 A9		MOV	DPTR,#LNTAB	;LOG TABLE
 4629:	  1309	31 9B			ACALL	POLYC
 4630:	  130B	A3			INC	DPTR		;POINT AT LN(10)
 4631:	  130C	91 33			ACALL	PUSHC
 4632:	  130E	31 B0			ACALL	AMUL
 4633:	  1310	E5 46			MOV	A,MT2		;GET THE COUNT
 4634:	  1312	91 B1			ACALL	TWO_R2		;PUT IT ON THE STACK
 4635:	  1314	F1 1C			ACALL	ASUB		;INT - POLY
 4636:	  1316	31 DA			ACALL	STRIP
 4637:	  1318	30 2A 74		JNB	UBIT,AABS
 4638:					;
 4639:	  131B	22		LN_D:	RET
 4640:					;
 4641:					;*************************************************************
 4642:					;
 4643:	  131C			TEMP_COMP:	; Compare FPTEMP1 to TOS, FPTEMP1 gets TOS
 4644:					;
 4645:					;*************************************************************
 4646:					;
 4647:	  131C	91 4F			ACALL	PUSH_T1 	;SAVE THE TEMP
 4648:	  131E	91 5A			ACALL	SWAP_ASTKA	;TRADE WITH THE NEXT NUMBER
 4649:	  1320	91 2C			ACALL	CSTAKA		;COPY THE STACK
 4650:	  1322	91 48			ACALL	POP_T1		;SAVE THE NEW NUMBER
 4651:	  1324	02 19 73		JMP	FP_BASE2	;DO THE COMPARE
 4652:					;
 4653:	  1327	91 30		AETOX:	ACALL	PLNEXP		;EXP(1) ON TOS
 4654:	  1329	91 5A			ACALL	SWAP_ASTKA	;X ON TOS
 4655:					;
 4656:	  132B			AEXP:	;EXPONENTIATION
 4657:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 85



 Line  I  Addr  Code            Source

 4658:	  132B	51 61			ACALL	EBIAS		;T1=BASE,T2=FRACTIONS,TOS=INT MULTIPLIED
 4659:	  132D	90 01 1F		MOV	DPTR,#FPT2	;POINT AT FRACTIONS
 4660:	  1330	E0			MOVX	A,@DPTR 	;READ THE EXP OF THE FRACTIONS
 4661:	  1331	60 E8			JZ	LN_D		;EXIT IF ZERO
 4662:	  1333	91 56			ACALL	P_T2		;TOS = FRACTIONS
 4663:	  1335	91 4F			ACALL	PUSH_T1 	;TOS = BASE
 4664:	  1337	51 53			ACALL	SETREG		;SEE IF BASE IS ZERO
 4665:	  1339	60 02			JZ	AEXP1
 4666:	  133B	51 C0			ACALL	ALN		;TOS = LN(BASE)
 4667:	  133D	31 B0		AEXP1:	ACALL	AMUL		;TOS = FRACTIONS * LN(BASE)
 4668:	  133F	91 30			ACALL	PLNEXP		;TOS = EXP(1)
 4669:	  1341	91 5A			ACALL	SWAP_ASTKA	;TOS = FRACTIONS * LN(BASE)
 4670:	  1343	51 61			ACALL	EBIAS		;T2 = FRACTIONS, TOS = INT MULTIPLIED
 4671:	  1345	75 46 00		MOV	MT2,#00H	;NOW CALCULATE E**X
 4672:	  1348	91 43			ACALL	PUSH_ONE
 4673:	  134A	91 2C			ACALL	CSTAKA
 4674:	  134C	91 48			ACALL	POP_T1		;T1 = 1
 4675:					;
 4676:	  134E	91 56		AEXL:	ACALL	P_T2		;TOS = FRACTIONS
 4677:	  1350	31 B0			ACALL	AMUL		;TOS = FRACTIONS * ACCUMLATION
 4678:	  1352	05 46			INC	MT2		;DO THE DEMONIATOR
 4679:	  1354	E5 46			MOV	A,MT2
 4680:	  1356	91 B1			ACALL	TWO_R2
 4681:	  1358	91 0A			ACALL	ADIV
 4682:	  135A	91 2C			ACALL	CSTAKA		;SAVE THE ITERATION
 4683:	  135C	91 4F			ACALL	PUSH_T1 	;NOW ACCUMLATE
 4684:	  135E	F1 41			ACALL	AADD		;ADD ACCUMLATION
 4685:	  1360	71 1C			ACALL	TEMP_COMP
 4686:	  1362	30 D5 E9		JNB	F0,AEXL 	;LOOP UNTIL DONE
 4687:					;
 4688:	  1365	51 4F			ACALL	INC_ASTKA
 4689:	  1367	91 4F			ACALL	PUSH_T1
 4690:	  1369	31 B0			ACALL	AMUL		;LAST INT MULTIPLIED
 4691:					;
 4692:	  136B	21 B0		MU1:	AJMP	AMUL		;FIRST INT MULTIPLIED
 4693:					;
 4694:					;***************************************************************
 4695:					;
 4696:					; integer operator - INT
 4697:					;
 4698:					;***************************************************************
 4699:					;
 4700:	  136D	51 53		AINT:	ACALL	SETREG		;SET UP THE REGISTERS, CLEAR CARRY
 4701:	  136F	94 81			SUBB	A,#129		;SUBTRACT EXPONENT BIAS
 4702:	  1371	50 07			JNC	AI1		;JUMP IF ACC > 81H
 4703:					;
 4704:					; Force the number to be a zero
 4705:					;
 4706:	  1373	51 4F			ACALL	INC_ASTKA	;BUMP THE STACK
 4707:					;
 4708:	  1375	90 04 E0	P_Z:	MOV	DPTR,#ZRO	;PUT ZERO ON THE STACK
 4709:	  1378	81 33			AJMP	PUSHC
 4710:					;
 4711:	  137A	94 07		AI1:	SUBB	A,#7
 4712:	  137C	50 10			JNC	AI3
 4713:	  137E	F4			CPL	A

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 86



 Line  I  Addr  Code            Source

 4714:	  137F	04			INC	A
 4715:	  1380	FB			MOV	R3,A
 4716:	  1381	18		AI11:	DEC	R0		;POINT AT SIGN
 4717:					;
 4718:	  1382	18		AI2:	DEC	R0		;NOW AT LSB'S
 4719:	  1383	E2			MOVX	A,@R0		;READ BYTE
 4720:	  1384	54 F0			ANL	A,#0F0H 	;STRIP NIBBLE
 4721:	  1386	F2			MOVX	@R0,A		;WRITE BYTE
 4722:	  1387	DB 01			DJNZ	R3,AI21
 4723:	  1389	22			RET
 4724:	  138A	E4		AI21:	CLR	A
 4725:	  138B	F2			MOVX	@R0,A		;CLEAR THE LOCATION
 4726:	  138C	DB F4			DJNZ	R3,AI2
 4727:					;
 4728:	  138E	22		AI3:	RET			;EXIT
 4729:					;
 4730:					;***************************************************************
 4731:					;
 4732:	  138F			AABS:	; Absolute value - Make sign of number positive
 4733:					;		   return sign in ACC
 4734:					;
 4735:					;***************************************************************
 4736:					;
 4737:	  138F	71 A1			ACALL	ANEG		;CHECK TO SEE IF + OR -
 4738:	  1391	70 19			JNZ	ALPAR		;EXIT IF NON ZERO, BECAUSE THE NUM IS
 4739:	  1393	F2			MOVX	@R0,A		;MAKE A POSITIVE SIGN
 4740:	  1394	22			RET
 4741:					;
 4742:					;***************************************************************
 4743:					;
 4744:	  1395			ASGN:	; Returns the sign of the number 1 = +, -1 = -
 4745:					;
 4746:					;***************************************************************
 4747:					;
 4748:	  1395	51 4F			ACALL	INC_ASTKA	;POP STACK, GET EXPONENT
 4749:	  1397	60 DC			JZ	P_Z		;EXIT IF ZERO
 4750:	  1399	18			DEC	R0		;BUMP TO SIGN
 4751:	  139A	E2			MOVX	A,@R0		;GET THE SIGN
 4752:	  139B	FF			MOV	R7,A		;SAVE THE SIGN
 4753:	  139C	91 43			ACALL	PUSH_ONE	;PUT A ONE ON THE STACK
 4754:	  139E	EF			MOV	A,R7		;GET THE SIGN
 4755:	  139F	60 0B			JZ	ALPAR		;EXIT IF ZERO
 4756:					;
 4757:					; Fall thru to ANEG
 4758:					;
 4759:					;***************************************************************
 4760:					;
 4761:	  13A1			ANEG:	; Flip the sign of the number on the tos
 4762:					;
 4763:					;***************************************************************
 4764:					;
 4765:	  13A1	51 53			ACALL	SETREG
 4766:	  13A3	18			DEC	R0		;POINT AT THE SIGN OF THE NUMBER
 4767:	  13A4	60 06			JZ	ALPAR		;EXIT IF ZERO
 4768:	  13A6	E2			MOVX	A,@R0
 4769:	  13A7	64 01			XRL	A,#01H		;FLIP THE SIGN

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 87



 Line  I  Addr  Code            Source

 4770:	  13A9	F2			MOVX	@R0,A
 4771:	  13AA	64 01			XRL	A,#01H		;RESTORE THE SIGN
 4772:					;
 4773:	  13AC	22		ALPAR:	RET
 4774:					;
 4775:					;***************************************************************
 4776:					;
 4777:	  13AD			ACBYTE: ; Read the ROM
 4778:					;
 4779:					;***************************************************************
 4780:					;
 4781:	  13AD	51 23			ACALL	IFIX		;GET EXPRESSION
 4782:	  13AF	12 05 79		CALL	X31DP		;PUT R3:R1 INTO THE DP
 4783:	  13B2	E4			CLR	A
 4784:	  13B3	93			MOVC	A,@A+DPTR
 4785:	  13B4	81 B1			AJMP	TWO_R2
 4786:					;
 4787:					;***************************************************************
 4788:					;
 4789:	  13B6			ADBYTE: ; Read internal memory
 4790:					;
 4791:					;***************************************************************
 4792:					;
 4793:	  13B6	51 23			ACALL	IFIX		;GET THE EXPRESSION
 4794:	  13B8	12 09 D5		CALL	R3CK		;MAKE SURE R3 = 0
 4795:	  13BB	E7			MOV	A,@R1
 4796:	  13BC	81 B1			AJMP	TWO_R2
 4797:					;
 4798:					;***************************************************************
 4799:					;
 4800:	  13BE			AXBYTE: ; Read external memory
 4801:					;
 4802:					;***************************************************************
 4803:					;
 4804:	  13BE	51 23			ACALL	IFIX		;GET THE EXPRESSION
 4805:	  13C0	8B A0		AXBYTE1:MOV	P2,R3
 4806:	  13C2	E3			MOVX	A,@R1
 4807:	  13C3	81 B1			AJMP	TWO_R2
 4808:					;
 4809:					;***************************************************************
 4810:					;
 4811:					; The relational operators - EQUAL			  (=)
 4812:					;			     GREATER THAN		  (>)
 4813:					;			     LESS THAN			  (<)
 4814:					;			     GREATER THAN OR EQUAL	  (>=)
 4815:					;			     LESS THAN OR EQUAL 	  (<=)
 4816:					;			     NOT EQUAL			  (<>)
 4817:					;
 4818:					;***************************************************************
 4819:					;
 4820:	  13C5	51 08		AGT:	ACALL	CMPLK
 4821:	  13C7	72 D5			ORL	C,F0		;SEE IF EITHER IS A ONE
 4822:	  13C9	40 AA		AGT1:	JC	P_Z
 4823:					;
 4824:	  13CB	90 13 D0	FSTK:	MOV	DPTR,#FS
 4825:	  13CE	81 33			AJMP	PUSHC

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 88



 Line  I  Addr  Code            Source

 4826:					;
 4827:	  13D0	85		FS:	DB	85H
 4828:	  13D1	00			DB	00H
 4829:	  13D2	00			DB	00H
 4830:	  13D3	50			DB	50H
 4831:	  13D4	53			DB	53H
 4832:	  13D5	65			DB	65H
 4833:					;
 4834:	  13D6	51 08		ALT:	ACALL	CMPLK
 4835:	  13D8	B3		ALT1:	CPL	C
 4836:	  13D9	80 EE			SJMP	AGT1
 4837:					;
 4838:	  13DB	51 08		AEQ:	ACALL	CMPLK
 4839:	  13DD	A2 D5		AEQ1:	MOV	C,F0
 4840:	  13DF	80 F7			SJMP	ALT1
 4841:					;
 4842:	  13E1	51 08		ANE:	ACALL	CMPLK
 4843:	  13E3	B2 D5			CPL	F0
 4844:	  13E5	80 F6			SJMP	AEQ1
 4845:					;
 4846:	  13E7	51 08		AGE:	ACALL	CMPLK
 4847:	  13E9	80 DE			SJMP	AGT1
 4848:					;
 4849:	  13EB	51 08		ALE:	ACALL	CMPLK
 4850:	  13ED	72 D5			ORL	C,F0
 4851:	  13EF	80 E7			SJMP	ALT1
 4852:					;
 4853:					;***************************************************************
 4854:					;
 4855:	  13F1			ARND:	; Generate a random number
 4856:					;
 4857:					;***************************************************************
 4858:					;
 4859:	  13F1	90 01 0C		MOV	DPTR,#RCELL	;GET THE BINARY SEED
 4860:	  13F4	12 05 BA		CALL	L31DPI
 4861:	  13F7	E9			MOV	A,R1
 4862:	  13F8	C3			CLR	C
 4863:	  13F9	13			RRC	A
 4864:	  13FA	F8			MOV	R0,A
 4865:	  13FB	74 06			MOV	A,#6
 4866:	  13FD	13			RRC	A
 4867:	  13FE	29			ADD	A,R1
 4868:	  13FF	C8			XCH	A,R0
 4869:	  1400	3B			ADDC	A,R3
 4870:	  1401	FA			MOV	R2,A
 4871:	  1402	15 82			DEC	DPL		;SAVE THE NEW SEED
 4872:	  1404	91 24			ACALL	S20DP
 4873:	  1406	91 B4			ACALL	TWO_EY
 4874:	  1408	71 CB			ACALL	FSTK
 4875:					;
 4876:	  140A	12 19 77	ADIV:	LCALL	FP_BASE4
 4877:	  140D	01 38			AJMP	FPTST
 4878:					;
 4879:					;***************************************************************
 4880:					;
 4881:	  140F			SONERR: ; ON ERROR Statement

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 89



 Line  I  Addr  Code            Source

 4882:					;
 4883:					;***************************************************************
 4884:					;
 4885:	  140F	12 0F 30		LCALL	INTERR		;GET THE LINE NUMBER
 4886:	  1412	D2 13			SETB	ON_ERR
 4887:	  1414	90 01 02		MOV	DPTR,#ERRNUM	;POINT AT THR ERROR LOCATION
 4888:	  1417	80 0B			SJMP	S20DP
 4889:					;
 4890:					;
 4891:					;**************************************************************
 4892:					;
 4893:	  1419			SONEXT: ; ON EXT1 Statement
 4894:					;
 4895:					;**************************************************************
 4896:					;
 4897:	  1419	12 0F 30		LCALL	INTERR
 4898:	  141C	D2 12			SETB	INTBIT
 4899:	  141E	43 A8 84		ORL	IE,#10000100B	;ENABLE INTERRUPTS
 4900:	  1421	90 01 20		MOV	DPTR,#INTLOC
 4901:					;
 4902:	  1424	EA		S20DP:	MOV	A,R2		;SAVE R2:R0 @DPTR
 4903:	  1425	F0			MOVX	@DPTR,A
 4904:	  1426	A3			INC	DPTR
 4905:	  1427	E8			MOV	A,R0
 4906:	  1428	F0			MOVX	@DPTR,A
 4907:	  1429	22			RET
 4908:					;
 4909:					;***************************************************************
 4910:					;
 4911:					; CASTAK - Copy and push another top of arg stack
 4912:					;
 4913:					;***************************************************************
 4914:					;
 4915:	  142A	91 2C		CSTAKA2:ACALL	CSTAKA		;COPY STACK TWICE
 4916:					;
 4917:	  142C	51 53		CSTAKA: ACALL	SETREG		;SET UP R2:R0
 4918:	  142E	80 23			SJMP	PUSH_T12
 4919:					;
 4920:	  1430	90 17 F8	PLNEXP: MOV	DPTR,#EXP1
 4921:					;
 4922:					;***************************************************************
 4923:					;
 4924:					; PUSHC - Push constant on to the arg stack
 4925:					;
 4926:					;***************************************************************
 4927:					;
 4928:	  1433	51 0B		PUSHC:	ACALL	DEC_ASTKA
 4929:	  1435	8B A0			MOV	P2,R3
 4930:	  1437	7B 06			MOV	R3,#FPSIZ	;LOOP COUNTER
 4931:					;
 4932:	  1439	E4		PCL:	CLR	A		;SET UP A
 4933:	  143A	93			MOVC	A,@A+DPTR	;LOAD IT
 4934:	  143B	F3			MOVX	@R1,A		;SAVE IT
 4935:	  143C	A3			INC	DPTR		;BUMP POINTERS
 4936:	  143D	19			DEC	R1
 4937:	  143E	DB F9			DJNZ	R3,PCL		;LOOP

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 90



 Line  I  Addr  Code            Source

 4938:					;
 4939:	  1440	D2 24			SETB	ARGF
 4940:	  1442	22			RET			;EXIT
 4941:					;
 4942:	  1443			PUSH_ONE:;
 4943:					;
 4944:	  1443	90 16 F2		MOV	DPTR,#FPONE
 4945:	  1446	81 33			AJMP	PUSHC
 4946:					;
 4947:	  1448			POP_T1:
 4948:					;
 4949:	  1448	7B 01			MOV	R3,#HIGH FPT1
 4950:	  144A	79 19			MOV	R1,#LOW FPT1
 4951:	  144C	02 0F D3		JMP	POPAS
 4952:					;
 4953:	  144F			PUSH_T1:
 4954:					;
 4955:	  144F	78 19			MOV	R0,#LOW FPT1
 4956:	  1451			PUSH_T11:
 4957:	  1451	7A 01			MOV	R2,#HIGH FPT1
 4958:	  1453			PUSH_T12:
 4959:	  1453	02 0F DD		LJMP	PUSHAS
 4960:					;
 4961:	  1456	78 1F		P_T2:	MOV	R0,#LOW FPT2
 4962:	  1458	80 F7			SJMP	PUSH_T11		;JUMP TO PUSHAS
 4963:					;
 4964:					;****************************************************************
 4965:					;
 4966:	  145A			SWAP_ASTKA:	; SWAP TOS<>TOS-1
 4967:					;
 4968:					;****************************************************************
 4969:					;
 4970:	  145A	51 53			ACALL	SETREG		;SET UP R2:R0 AND P2
 4971:	  145C	74 06			MOV	A,#FPSIZ	;PUT TOS+1 IN R1
 4972:	  145E	FA			MOV	R2,A
 4973:	  145F	28			ADD	A,R0
 4974:	  1460	F9			MOV	R1,A
 4975:					;
 4976:	  1461	E2		S_L:	MOVX	A,@R0
 4977:	  1462	FB			MOV	R3,A
 4978:	  1463	E3			MOVX	A,@R1
 4979:	  1464	F2			MOVX	@R0,A
 4980:	  1465	EB			MOV	A,R3
 4981:	  1466	F3			MOVX	@R1,A
 4982:	  1467	19			DEC	R1
 4983:	  1468	18			DEC	R0
 4984:	  1469	DA F6			DJNZ	R2,S_L
 4985:	  146B	22			RET
 4986:					;
 4987:	  146C	51 53		C2_T2:	ACALL	SETREG		;SET UP R2:R0
 4988:	  146E	7B 01			MOV	R3,#HIGH FPT2
 4989:	  1470	79 1F			MOV	R1,#LOW FPT2	;TEMP VALUE
 4990:					;
 4991:					; Fall thru
 4992:					;
 4993:					;***************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 91



 Line  I  Addr  Code            Source

 4994:					;
 4995:					; VARCOP - Copy a variable from R2:R0 to R3:R1
 4996:					;
 4997:					;***************************************************************
 4998:					;
 4999:	  1472	7C 06		VARCOP: MOV	R4,#FPSIZ	;LOAD THE LOOP COUNTER
 5000:					;
 5001:	  1474	8A A0		V_C:	MOV	P2,R2		;SET UP THE PORTS
 5002:	  1476	E2			MOVX	A,@R0		;READ THE VALUE
 5003:	  1477	8B A0			MOV	P2,R3		;PORT TIME AGAIN
 5004:	  1479	F3			MOVX	@R1,A		;SAVE IT
 5005:	  147A	B1 8B			ACALL	DEC3210 	;BUMP POINTERS
 5006:	  147C	DC F6			DJNZ	R4,V_C		;LOOP
 5007:	  147E	22			RET			;EXIT
 5008:					;
 5009:	  147F	90 17 FE	PIPI:	MOV	DPTR,#PIE
 5010:	  1482	81 33			AJMP	PUSHC
 5011:					;
 5012:					;***************************************************************
 5013:					;
 5014:					; The logical operators ANL, ORL, XRL, NOT
 5015:					;
 5016:					;***************************************************************
 5017:					;
 5018:	  1484	91 A1		AANL:	ACALL	TWOL		;GET THE EXPRESSIONS
 5019:	  1486	EB			MOV	A,R3		;DO THE AND
 5020:	  1487	5F			ANL	A,R7
 5021:	  1488	FA			MOV	R2,A
 5022:	  1489	E9			MOV	A,R1
 5023:	  148A	5E			ANL	A,R6
 5024:	  148B	80 26			SJMP	TWO_EX
 5025:					;
 5026:	  148D	91 A1		AORL:	ACALL	TWOL		;SAME THING FOR OR
 5027:	  148F	EB			MOV	A,R3
 5028:	  1490	4F			ORL	A,R7
 5029:	  1491	FA			MOV	R2,A
 5030:	  1492	E9			MOV	A,R1
 5031:	  1493	4E			ORL	A,R6
 5032:	  1494	80 1D			SJMP	TWO_EX
 5033:					;
 5034:	  1496	71 CB		ANOT:	ACALL	FSTK		;PUT 0FFFFH ON THE STACK
 5035:					;
 5036:	  1498	91 A1		AXRL:	ACALL	TWOL
 5037:	  149A	EB			MOV	A,R3
 5038:	  149B	6F			XRL	A,R7
 5039:	  149C	FA			MOV	R2,A
 5040:	  149D	E9			MOV	A,R1
 5041:	  149E	6E			XRL	A,R6
 5042:	  149F	80 12			SJMP	TWO_EX
 5043:					;
 5044:	  14A1	51 23		TWOL:	ACALL	IFIX
 5045:	  14A3	AF 03			MOV	R7,R3B0
 5046:	  14A5	AE 01			MOV	R6,R1B0
 5047:	  14A7	41 23			AJMP	IFIX
 5048:					;
 5049:					;*************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 92



 Line  I  Addr  Code            Source

 5050:					;
 5051:	  14A9			AGET:	; READ THE BREAK BYTE AND PUT IT ON THE ARG STACK
 5052:					;
 5053:					;*************************************************************
 5054:					;
 5055:	  14A9	90 01 00		MOV	DPTR,#GTB	;GET THE BREAK BYTE
 5056:	  14AC	E0			MOVX	A,@DPTR
 5057:	  14AD	10 18 01		JBC	GTRD,TWO_R2
 5058:	  14B0	E4			CLR	A
 5059:					;
 5060:	  14B1	7A 00		TWO_R2: MOV	R2,#00H 	;ACC GOES TO STACK
 5061:					;
 5062:					;
 5063:	  14B3	F8		TWO_EX: MOV	R0,A		;R2:ACC GOES TO STACK
 5064:					;
 5065:					;
 5066:	  14B4	D2 24		TWO_EY: SETB	ARGF		;R2:R0 GETS PUT ON THE STACK
 5067:	  14B6	02 19 87		JMP	FP_BASE12	;DO IT
 5068:					;
 5069:					;*************************************************************
 5070:					;
 5071:					; Put directs onto the stack
 5072:					;
 5073:					;**************************************************************
 5074:					;
 5075:	  14B9	E5 A8		A_IE:	MOV	A,IE		;IE
 5076:	  14BB	80 F4			SJMP	TWO_R2
 5077:					;
 5078:	  14BD	E5 B8		A_IP:	MOV	A,IP		;IP
 5079:	  14BF	80 F0			SJMP	TWO_R2
 5080:					;
 5081:	  14C1	AA 8C		ATIM0:	MOV	R2,TH0		;TIMER 0
 5082:	  14C3	A8 8A			MOV	R0,TL0
 5083:	  14C5	80 ED			SJMP	TWO_EY
 5084:					;
 5085:	  14C7	AA 8D		ATIM1:	MOV	R2,TH1		;TIMER 1
 5086:	  14C9	A8 8B			MOV	R0,TL1
 5087:	  14CB	80 E7			SJMP	TWO_EY
 5088:					;
 5089:	  14CD	AA CD		ATIM2:	MOV	R2,TH2
 5090:	  14CF	A8 CC			MOV	R0,TL2
 5091:				;	DB	0AAH		;MOV R2 DIRECT OP CODE
 5092:				;	DB	0CDH		;T2 HIGH
 5093:				;	DB	0A8H		;MOV R0 DIRECT OP CODE
 5094:				;	DB	0CCH		;T2 LOW
 5095:	  14D1	80 E1			SJMP	TWO_EY		;TIMER 2
 5096:					;
 5097:	  14D3	E5 C8		AT2CON: MOV	A,T2CON
 5098:				;	DB	0E5H		;MOV A,DIRECT OPCODE
 5099:				;	DB	0C8H		;T2CON LOCATION
 5100:	  14D5	80 DA			SJMP	TWO_R2
 5101:					;
 5102:	  14D7	E5 88		ATCON:	MOV	A,TCON		;TCON
 5103:	  14D9	80 D6			SJMP	TWO_R2
 5104:					;
 5105:	  14DB	E5 89		ATMOD:	MOV	A,TMOD		;TMOD

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 93



 Line  I  Addr  Code            Source

 5106:	  14DD	80 D2			SJMP	TWO_R2
 5107:					;
 5108:	  14DF	AA CB		ARCAP2: MOV	R2,RCAPH2
 5109:	  14E1	A8 CA			MOV	R0,RCAPL2
 5110:				;	DB	0AAH		;MOV R2, DIRECT OP CODE
 5111:				;	DB	0CBH		;RCAP2H LOCATION
 5112:				;	DB	0A8H		;MOV R0, DIRECT OP CODE
 5113:				;	DB	0CAH		;R2CAPL LOCATION
 5114:	  14E3	80 CF			SJMP	TWO_EY
 5115:					;
 5116:	  14E5	E5 90		AP1:	MOV	A,P1		;GET P1
 5117:	  14E7	80 C8			SJMP	TWO_R2		;PUT IT ON THE STACK
 5118:					;
 5119:	  14E9	E5 87		APCON:	MOV	A,PCON
 5120:				;	DB	0E5H		;MOV A, DIRECT OP CODE
 5121:				;	DB	87H		;ADDRESS OF PCON
 5122:	  14EB	80 C4			SJMP	TWO_R2		;PUT PCON ON THE STACK
 5123:					;
 5124:					;***************************************************************
 5125:					;
 5126:					;THIS IS THE LINE EDITOR
 5127:					;
 5128:					;TAKE THE PROCESSED LINE IN IBUF AND INSERT IT INTO THE
 5129:					;BASIC TEXT FILE.
 5130:					;
 5131:					;***************************************************************
 5132:					;
 5133:	  14ED	02 05 6E	LINE0:	LJMP	NOGO		;CAN'T EDIT A ROM
 5134:					;
 5135:	  14F0	E5 13		LINE:	MOV	A,BOFAH
 5136:	  14F2	B4 02 F8		CJNE	A,#HIGH PSTART,LINE0
 5137:	  14F5	12 05 A9		CALL	G4		;GET END ADDRESS FOR EDITING
 5138:	  14F8	AC 82			MOV	R4,DPL
 5139:	  14FA	AD 83			MOV	R5,DPH
 5140:	  14FC	AB 0F			MOV	R3,TEMP5	;GET HIGH ORDER IBLN
 5141:	  14FE	A9 0E			MOV	R1,TEMP4	;LOW ORDER IBLN
 5142:					;
 5143:	  1500	12 05 8C		CALL	GETLIN		;FIND THE LINE
 5144:	  1503	70 12			JNZ	INSR		;INSERT IF NOT ZERO, ELSE APPEND
 5145:					;
 5146:					;APPEND THE LINE AT THE END
 5147:					;
 5148:	  1505	E5 0D			MOV	A,TEMP3 	;PUT IBCNT IN THE ACC
 5149:	  1507	B4 04 01		CJNE	A,#4H,LINE1	;SEE IF NO ENTRY
 5150:	  150A	22			RET			;RET IF NO ENTRY
 5151:					;
 5152:	  150B	B1 A8		LINE1:	ACALL	FULL		;SEE IF ENOUGH SPACE LEFT
 5153:	  150D	AA 05			MOV	R2,R5B0 	;PUT END ADDRESS A INTO TRANSFER
 5154:	  150F	A8 04			MOV	R0,R4B0 	;REGISTERS
 5155:	  1511	B1 66			ACALL	IMOV		;DO THE BLOCK MOVE
 5156:					;
 5157:	  1513	74 01		UE:	MOV	A,#EOF		;SAVE EOF CHARACTER
 5158:	  1515	A1 99			AJMP	TBR
 5159:					;
 5160:					;INSERT A LINE INTO THE FILE
 5161:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 94



 Line  I  Addr  Code            Source

 5162:	  1517	FF		INSR:	MOV	R7,A		;SAVE IT IN R7
 5163:	  1518	12 18 54		CALL	TEMPD		;SAVE INSERATION ADDRESS
 5164:	  151B	E5 0D			MOV	A,TEMP3 	;PUT THE COUNT LENGTH IN THE ACC
 5165:	  151D	40 09			JC	LTX		;JUMP IF NEW LINE # NOT = OLD LINE #
 5166:	  151F	B4 04 01		CJNE	A,#04H,INSR1	;SEE IF NULL
 5167:	  1522	E4			CLR	A
 5168:					;
 5169:	  1523	9F		INSR1:	SUBB	A,R7		;SUBTRACT LINE COUNT FROM ACC
 5170:	  1524	60 36			JZ	LIN1		;LINE LENGTHS EQUAL
 5171:	  1526	40 1F			JC	GTX		;SMALLER LINE
 5172:					;
 5173:					;EXPAND FOR A NEW LINE OR A LARGER LINE
 5174:					;
 5175:	  1528	FF		LTX:	MOV	R7,A		;SAVE A IN R7
 5176:	  1529	E5 0D			MOV	A,TEMP3 	;GET THE COUNT IN THE ACC
 5177:	  152B	B4 04 01		CJNE	A,#04H,LTX1	;DO NO INSERTATION IF NULL LINE
 5178:	  152E	22			RET			;EXIT IF IT IS
 5179:					;
 5180:	  152F	EF		LTX1:	MOV	A,R7		;GET THE COUNT BACK - DELTA IN A
 5181:	  1530	B1 A8			ACALL	FULL		;SEE IF ENOUGH MEMORY NEW EOFA IN R3:R1
 5182:	  1532	12 18 4D		CALL	DTEMP		;GET INSERATION ADDRESS
 5183:	  1535	B1 9D			ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 5184:	  1537	12 0D AD		CALL	X3120
 5185:	  153A	A9 04			MOV	R1,R4B0 	;EOFA LOW
 5186:	  153C	AB 05			MOV	R3,R5B0 	;EOFA HIGH
 5187:	  153E	0E			INC	R6		;INCREMENT BYTE COUNT
 5188:	  153F	BE 00 01		CJNE	R6,#00,LTX2	;NEED TO BUMP HIGH BYTE?
 5189:	  1542	0F			INC	R7
 5190:					;
 5191:	  1543	B1 81		LTX2:	ACALL	RMOV		;GO DO THE INSERTION
 5192:	  1545	80 15			SJMP	LIN1		;INSERT THE CURRENT LINE
 5193:					;
 5194:	  1547	F4		GTX:	CPL	A		;FLIP ACC
 5195:	  1548	04			INC	A		;TWOS COMPLEMENT
 5196:	  1549	12 05 DE		CALL	ADDPTR		;DO THE ADDITION
 5197:	  154C	B1 9D			ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 5198:	  154E	A9 82			MOV	R1,DPL		;SET UP THE REGISTERS
 5199:	  1550	AB 83			MOV	R3,DPH
 5200:	  1552	AA 0F			MOV	R2,TEMP5	;PUT INSERTATION ADDRESS IN THE RIGHT REG
 5201:	  1554	A8 0E			MOV	R0,TEMP4
 5202:	  1556	60 02			JZ	GTX1		;IF ACC WAS ZERO FROM NMOV, JUMP
 5203:	  1558	B1 6D			ACALL	LMOV		;IF NO ZERO DO A LMOV
 5204:					;
 5205:	  155A	B1 13		GTX1:	ACALL	UE		;SAVE NEW END ADDRESS
 5206:					;
 5207:	  155C	AA 0F		LIN1:	MOV	R2,TEMP5	;GET THE INSERTATION ADDRESS
 5208:	  155E	A8 0E			MOV	R0,TEMP4
 5209:	  1560	E5 0D			MOV	A,TEMP3 	;PUT THE COUNT LENGTH IN ACC
 5210:	  1562	B4 04 01		CJNE	A,#04H,IMOV	;SEE IF NULL
 5211:	  1565	22			RET			;EXIT IF NULL
 5212:					;
 5213:					;***************************************************************
 5214:					;
 5215:					;INSERT A LINE AT ADDRESS R2:R0
 5216:					;
 5217:					;***************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 95



 Line  I  Addr  Code            Source

 5218:					;
 5219:	  1566	E4		IMOV:	CLR	A		;TO SET UP
 5220:	  1567	79 04			MOV	R1,#LOW IBCNT	;INITIALIZE THE REGISTERS
 5221:	  1569	FB			MOV	R3,A
 5222:	  156A	AE 0D			MOV	R6,TEMP3	;PUT THE BYTE COUNT IN R6 FOR LMOV
 5223:	  156C	FF			MOV	R7,A		;PUT A 0 IN R7 FOR LMOV
 5224:					;
 5225:					;***************************************************************
 5226:					;
 5227:					;COPY A BLOCK FROM THE BEGINNING
 5228:					;
 5229:					;R2:R0 IS THE DESTINATION ADDRESS
 5230:					;R3:R1 IS THE SOURCE ADDRESS
 5231:					;R7:R6 IS THE COUNT REGISTER
 5232:					;
 5233:					;***************************************************************
 5234:					;
 5235:	  156D	B1 96		LMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 5236:	  156F	B1 76			ACALL	INC3210 	;BUMP THE POINTER
 5237:	  1571	D1 47			ACALL	DEC76		;BUMP R7:R6
 5238:	  1573	70 F8			JNZ	LMOV		;LOOP
 5239:	  1575	22			RET			;GO BACK TO CALLING ROUTINE
 5240:					;
 5241:	  1576	08		INC3210:INC	R0
 5242:	  1577	B8 00 01		CJNE	R0,#00H,INC3211
 5243:	  157A	0A			INC	R2
 5244:					;
 5245:	  157B	09		INC3211:INC	R1
 5246:	  157C	B9 00 01		CJNE	R1,#00H,INC3212
 5247:	  157F	0B			INC	R3
 5248:	  1580	22		INC3212:RET
 5249:					;
 5250:					;***************************************************************
 5251:					;
 5252:					;COPY A BLOCK STARTING AT THE END
 5253:					;
 5254:					;R2:R0 IS THE DESTINATION ADDRESS
 5255:					;R3:R1 IS THE SOURCE ADDRESS
 5256:					;R6:R7 IS THE COUNT REGISTER
 5257:					;
 5258:					;***************************************************************
 5259:					;
 5260:	  1581	B1 96		RMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 5261:	  1583	B1 8B			ACALL	DEC3210 	;DEC THE LOCATIONS
 5262:	  1585	D1 47			ACALL	DEC76		;BUMP THE COUNTER
 5263:	  1587	70 F8			JNZ	RMOV		;LOOP
 5264:					;
 5265:	  1589	00		DEC_R:	NOP			;CREATE EQUAL TIMING
 5266:	  158A	22			RET			;EXIT
 5267:					;
 5268:	  158B	18		DEC3210:DEC	R0		;BUMP THE POINTER
 5269:	  158C	B8 FF 01		CJNE	R0,#0FFH,DEC3212;SEE IF OVERFLOWED
 5270:	  158F	1A		DEC3211:DEC	R2		;BUMP THE HIGH BYTE
 5271:	  1590	19		DEC3212:DEC	R1		;BUMP THE POINTER
 5272:	  1591	B9 FF F5		CJNE	R1,#0FFH,DEC_R	;SEE IF OVERFLOWED
 5273:	  1594	1B			DEC	R3		;CHANGE THE HIGH BYTE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 96



 Line  I  Addr  Code            Source

 5274:	  1595	22			RET			;EXIT
 5275:					;
 5276:					;***************************************************************
 5277:					;
 5278:					;TBYTE - TRANSFER A BYTE
 5279:					;
 5280:					;***************************************************************
 5281:					;
 5282:	  1596	8B A0		TBYTE:	MOV	P2,R3		;OUTPUT SOURCE REGISTER TO PORT
 5283:	  1598	E3			MOVX	A,@R1		;PUT BYTE IN ACC
 5284:					;
 5285:	  1599	8A A0		TBR:	MOV	P2,R2		;OUTPUT DESTINATION TO PORT
 5286:	  159B	F2			MOVX	@R0,A		;SAVE THE BYTE
 5287:	  159C	22			RET			;EXIT
 5288:					;
 5289:					;***************************************************************
 5290:					;
 5291:					;NMOV - R7:R6 = END ADDRESS - DPTR
 5292:					;
 5293:					;ACC GETS CLOBBERED
 5294:					;
 5295:					;***************************************************************
 5296:					;
 5297:	  159D	EC		NMOV:	MOV	A,R4		;THE LOW BYTE OF EOFA
 5298:	  159E	C3			CLR	C		;CLEAR THE CARRY FOR SUBB
 5299:	  159F	95 82			SUBB	A,DPL		;SUBTRACT DATA POINTER LOW
 5300:	  15A1	FE			MOV	R6,A		;PUT RESULT IN R6
 5301:	  15A2	ED			MOV	A,R5		;HIGH BYTE OF EOFA
 5302:	  15A3	95 83			SUBB	A,DPH		;SUBTRACT DATA POINTER HIGH
 5303:	  15A5	FF			MOV	R7,A		;PUT RESULT IN R7
 5304:	  15A6	4E			ORL	A,R6		;SEE IF ZERO
 5305:	  15A7	22		NMOV1:	RET			;EXIT
 5306:					;
 5307:					;***************************************************************
 5308:					;
 5309:					;CHECK FOR A FILE OVERFLOW
 5310:					;LEAVES THE NEW END ADDRESS IN R3:R1
 5311:					;A HAS THE INCREASE IN SIZE
 5312:					;
 5313:					;***************************************************************
 5314:					;
 5315:	  15A8	2C		FULL:	ADD	A,R4		;ADD A TO END ADDRESS
 5316:	  15A9	F9			MOV	R1,A		;SAVE IT
 5317:	  15AA	E4			CLR	A
 5318:	  15AB	3D			ADDC	A,R5		;ADD THE CARRY
 5319:	  15AC	FB			MOV	R3,A
 5320:	  15AD	90 01 04		MOV	DPTR,#VARTOP	;POINT AT VARTOP
 5321:					;
 5322:	  15B0	12 05 CC	FUL1:	CALL	DCMPX		;COMPARE THE TWO
 5323:	  15B3	40 F2			JC	NMOV1		;OUT OF ROOM
 5324:					;
 5325:	  15B5	90 18 16	TB:	MOV	DPTR,#E5X	;OUT OF MEMORY
 5326:	  15B8	01 4B			AJMP	FPTS
 5327:					;
 5328:					;***************************************************************
 5329:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 97



 Line  I  Addr  Code            Source

 5330:					; PP - Preprocesses the line in IBUF back into IBUF
 5331:					;      sets F0 if no line number
 5332:					;      leaves the correct length of processed line in IBCNT
 5333:					;      puts the line number in IBLN
 5334:					;      wastes the text address TXAL and TXAH
 5335:					;
 5336:					;***************************************************************
 5337:					;
 5338:	  15BA	F1 6C		PP:	ACALL	T_BUF		;TXA GETS IBUF
 5339:	  15BC	12 0F 35		CALL	INTGER		;SEE IF A NUMBER PRESENT
 5340:	  15BF	12 18 54		CALL	TEMPD		;SAVE THE INTEGER IN TEMP5:TEMP4
 5341:	  15C2	92 D5			MOV	F0,C		;SAVE INTEGER IF PRESENT
 5342:	  15C4	90 00 05		MOV	DPTR,#IBLN	;SAVE THE LINE NUMBER, EVEN IF NONE
 5343:	  15C7	91 24			ACALL	S20DP
 5344:	  15C9	A8 08			MOV	R0,TXAL 	;TEXT POINTER
 5345:	  15CB	79 07			MOV	R1,#LOW IBUF	;STORE POINTER
 5346:					;
 5347:					; Now process the line back into IBUF
 5348:					;
 5349:	  15CD	C2 24		PPL:	CLR	ARGF		;FIRST PASS DESIGNATOR
 5350:	  15CF	90 01 75		MOV	DPTR,#TOKTAB	;POINT DPTR AT LOOK UP TABLE
 5351:					;
 5352:	  15D2	88 05		PPL1:	MOV	R5B0,R0 	;SAVE THE READ POINTER
 5353:	  15D4	E4			CLR	A		;ZERO A FOR LOOKUP
 5354:	  15D5	93			MOVC	A,@A+DPTR	;GET THE TOKEN
 5355:	  15D6	FF			MOV	R7,A		;SAVE TOKEN IN CASE OF MATCH
 5356:					;
 5357:	  15D7	E2		PPL2:	MOVX	A,@R0		;GET THE USER CHARACTER
 5358:	  15D8	FB			MOV	R3,A		;SAVE FOR REM
 5359:	  15D9	B4 61 00		CJNE	A,#'a',PPL21
 5360:	  15DC	40 07		PPL21:	JC	PPX		;CONVERT LOWER TO UPPER CASE
 5361:	  15DE	B4 7B 00		CJNE	A,#('z'+1),PPL22
 5362:	  15E1	50 02		PPL22:	JNC	PPX
 5363:	  15E3	C2 E5			CLR	ACC.5
 5364:					;
 5365:	  15E5	FA		PPX:	MOV	R2,A
 5366:	  15E6	F2			MOVX	@R0,A		;SAVE UPPER CASE
 5367:	  15E7	A3			INC	DPTR		;BUMP THE LOOKUP POINTER
 5368:	  15E8	E4			CLR	A
 5369:	  15E9	93			MOVC	A,@A+DPTR
 5370:	  15EA	B5 02 03		CJNE	A,R2B0,PPL3	;LEAVE IF NOT THE SAME
 5371:	  15ED	08			INC	R0		;BUMP THE USER POINTER
 5372:	  15EE	80 E7			SJMP	PPL2		;CONTINUE TO LOOP
 5373:					;
 5374:	  15F0	20 E7 2F	PPL3:	JB	ACC.7,PPL6	;JUMP IF FOUND MATCH
 5375:	  15F3	60 2D			JZ	PPL6		;USER MATCH
 5376:					;
 5377:					;
 5378:					; Scan to the next TOKTAB entry
 5379:					;
 5380:	  15F5	A3		PPL4:	INC	DPTR		;ADVANCE THE POINTER
 5381:	  15F6	E4			CLR	A		;ZERO A FOR LOOKUP
 5382:	  15F7	93			MOVC	A,@A+DPTR	;LOAD A WITH TABLE
 5383:	  15F8	20 E7 03		JB	ACC.7,PPL41	;KEEP SCANNING IF NOT A RESERVED WORD
 5384:	  15FB	70 F8			JNZ	PPL4
 5385:	  15FD	A3			INC	DPTR

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 98



 Line  I  Addr  Code            Source

 5386:					;
 5387:					; See if at the end of TOKTAB
 5388:					;
 5389:	  15FE	A8 05		PPL41:	MOV	R0,R5B0 	;RESTORE THE POINTER
 5390:	  1600	B4 FF CF		CJNE	A,#0FFH,PPL1	;SEE IF END OF TABLE
 5391:					;
 5392:					; Character not in TOKTAB, so see what it is
 5393:					;
 5394:	  1603	BA 20 03		CJNE	R2,#' ',PPLX    ;SEE IF A SPACE
 5395:	  1606	08			INC	R0		;BUMP USER POINTER
 5396:	  1607	80 C4			SJMP	PPL		;TRY AGAIN
 5397:					;
 5398:	  1609	30 2D 0A	PPLX:	JNB	XBIT,PPLY	;EXTERNAL TRAP
 5399:	  160C	20 24 07		JB	ARGF,PPLY
 5400:	  160F	D2 24			SETB	ARGF		;SAYS THAT THE USER HAS TABLE
 5401:	  1611	12 20 78		LCALL	2078H		;SET UP POINTER
 5402:	  1614	A1 D2			AJMP	PPL1
 5403:					;
 5404:	  1616	D1 2F		PPLY:	ACALL	PPL7		;SAVE CHARACTER, EXIT IF A CR
 5405:	  1618	B4 22 B2		CJNE	A,#'"',PPL      ;SEE IF QUOTED STRING, START AGAIN IF NOT
 5406:					;
 5407:					; Just copy a quoted string
 5408:					;
 5409:	  161B	D1 2F		PPLY1:	ACALL	PPL7		;SAVE THE CHARACTER, TEST FOR CR
 5410:	  161D	B4 22 FB		CJNE	A,#'"',PPLY1    ;IS THERE AN ENDQUOTE, IF NOT LOOP
 5411:	  1620	80 AB			SJMP	PPL		;DO IT AGAIN IF ENDQUOTE
 5412:					;
 5413:	  1622	EF		PPL6:	MOV	A,R7		;GET THE TOKEN
 5414:	  1623	D1 44			ACALL	PPL91		;SAVE THE TOKEN
 5415:	  1625	B4 96 A5		CJNE	A,#T_REM,PPL	;SEE IF A REM TOKEN
 5416:	  1628	EB			MOV	A,R3
 5417:	  1629	D1 30			ACALL	PPL71		;WASTE THE REM STATEMENT
 5418:	  162B	D1 2F		PPL61:	ACALL	PPL7		;LOOP UNTIL A CR
 5419:	  162D	80 FC			SJMP	PPL61
 5420:					;
 5421:	  162F	E2		PPL7:	MOVX	A,@R0		;GET THE CHARACTER
 5422:	  1630	B4 0D 10	PPL71:	CJNE	A,#CR,PPL9	;FINISH IF A CR
 5423:	  1633	D0 00			POP	R0B0		;WASTE THE CALLING STACK
 5424:	  1635	D0 00			POP	R0B0
 5425:	  1637	F3			MOVX	@R1,A		;SAVE CR IN MEMORY
 5426:	  1638	09			INC	R1		;SAVE A TERMINATOR
 5427:	  1639	74 01			MOV	A,#EOF
 5428:	  163B	F3			MOVX	@R1,A
 5429:	  163C	E9			MOV	A,R1		;SUBTRACT FOR LENGTH
 5430:	  163D	94 04			SUBB	A,#4
 5431:	  163F	F5 0D			MOV	TEMP3,A 	;SAVE LENGTH
 5432:	  1641	79 04			MOV	R1,#LOW IBCNT	;POINT AT BUFFER COUNT
 5433:					;
 5434:	  1643	08		PPL9:	INC	R0
 5435:	  1644	F3		PPL91:	MOVX	@R1,A		;SAVE THE CHARACTER
 5436:	  1645	09			INC	R1		;BUMP THE POINTERS
 5437:	  1646	22			RET			;EXIT TO CALLING ROUTINE
 5438:					;
 5439:					;
 5440:					;***************************************************************
 5441:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 99



 Line  I  Addr  Code            Source

 5442:					;DEC76 - DECREMENT THE REGISTER PAIR R7:R6
 5443:					;
 5444:					;ACC = ZERO IF R7:R6 = ZERO ; ELSE ACC DOES NOT
 5445:					;
 5446:					;***************************************************************
 5447:					;
 5448:	  1647	1E		DEC76:	DEC	R6		;BUMP R6
 5449:	  1648	BE FF 01		CJNE	R6,#0FFH,DEC77	;SEE IF RAPPED AROUND
 5450:	  164B	1F			DEC	R7
 5451:	  164C	EF		DEC77:	MOV	A,R7		;SEE IF ZERO
 5452:	  164D	4E			ORL	A,R6
 5453:	  164E	22			RET			;EXIT
 5454:					;
 5455:					;***************************************************************
 5456:					;
 5457:					; MTOP - Get or Put the top of assigned memory
 5458:					;
 5459:					;***************************************************************
 5460:					;
 5461:	  164F	90 01 0A	PMTOP:	MOV	DPTR,#MEMTOP
 5462:	  1652	12 05 73	PMTOP1: CALL	L20DPI
 5463:	  1655	81 B4			AJMP	TWO_EY		;PUT R2:R0 ON THE STACK
 5464:					;
 5465:					;*************************************************************
 5466:					;
 5467:					; AXTAL - Crystal value calculations
 5468:					;
 5469:					;*************************************************************
 5470:					;
 5471:	  1657	90 17 EC	AXTAL0: MOV	DPTR,#XTALV	;CRYSTAL VALUE
 5472:	  165A	91 33			ACALL	PUSHC
 5473:					;
 5474:	  165C	91 2A		AXTAL1: ACALL	CSTAKA2 	;COPY CRYSTAL VALUE TWICE
 5475:				;
 5476:				;*****************************************************************************
 5477:				;****** Disable Intel programming for to get room ****************************
 5478:				;
 5479:				;	ACALL	CSTAKA		;Copy crystal value the 3rd.
 5480:				;
 5481:				;*****************************************************************************
 5482:				;
 5483:	  165E	90 07 09		MOV	DPTR,#PTIME	;PROM TIMER
 5484:	  1661	D1 79			ACALL	AXTAL2
 5485:	  1663	90 01 28		MOV	DPTR,#PROGS
 5486:	  1666	F1 0E			ACALL	S31L
 5487:				;
 5488:				;*****************************************************************************
 5489:				;****** Disable Intel programming for to get room ****************************
 5490:				;
 5491:				;	MOV	DPTR,#IPTIME	;IPROM TIMER
 5492:				;	ACALL	AXTAL2
 5493:				;	MOV	DPTR,#IPROGS
 5494:				;	ACALL	S31L
 5495:				;
 5496:				;*****************************************************************************
 5497:				;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 100



 Line  I  Addr  Code            Source

 5498:	  1668	90 11 67		MOV	DPTR,#TTIME	;CLOCK CALCULATION
 5499:	  166B	51 1F			ACALL	AXTAL3
 5500:	  166D	E9			MOV	A,R1
 5501:	  166E	F4			CPL	A
 5502:	  166F	04			INC	A
 5503:	  1670	F5 4A			MOV	SAVE_T,A
 5504:	  1672	7B 01			MOV	R3,#HIGH CXTAL
 5505:	  1674	79 13			MOV	R1,#LOW CXTAL
 5506:	  1676	02 0F D3		JMP	POPAS
 5507:					;
 5508:	  1679	51 1F		AXTAL2: ACALL	AXTAL3
 5509:					;
 5510:	  167B			CBIAS:	;Bias the crystal calculations
 5511:					;
 5512:	  167B	E9			MOV	A,R1		;GET THE LOW COUNT
 5513:	  167C	F4			CPL	A		;FLIP IT FOR TIMER LOAD
 5514:	  167D	24 0F			ADD	A,#15		;BIAS FOR CALL AND LOAD TIMES
 5515:	  167F	F9			MOV	R1,A		;RESTORE IT
 5516:	  1680	EB			MOV	A,R3		;GET THE HIGH COUNT
 5517:	  1681	F4			CPL	A		;FLIP IT
 5518:	  1682	34 00			ADDC	A,#00H		;ADD THE CARRY
 5519:	  1684	FB			MOV	R3,A		;RESTORE IT
 5520:	  1685	22			RET
 5521:					;
 5522:					;**************************************************************
 5523:					;
 5524:	  1686			STONE:	; Toggle the I/O port
 5525:					;
 5526:					;**************************************************************
 5527:					;
 5528:	  1686	12 0E 78		CALL	THREE		;GET THE NUMBERS
 5529:	  1689	D1 7B			ACALL	CBIAS		;BIAS R3:R1 FOR COUNT LOOP
 5530:					;
 5531:	  168B	C2 92		STONE1: CLR	T_BIT		;TOGGLE THE BIT
 5532:	  168D	C2 8E			CLR	TR1		;STOP THE TIMER
 5533:	  168F	8B 8D			MOV	TH1,R3		;LOAD THE TIMER
 5534:	  1691	89 8B			MOV	TL1,R1
 5535:	  1693	C2 8F			CLR	TF1		;CLEAR THE OVERFLOW FLAG
 5536:	  1695	D2 8E			SETB	TR1		;TURN IT ON
 5537:	  1697	D1 47			ACALL	DEC76
 5538:	  1699	30 8F FD		JNB	TF1,$		;WAIT
 5539:	  169C	71 AC			ACALL	ALPAR
 5540:	  169E	D2 92			SETB	T_BIT		;BACK TO A ONE
 5541:	  16A0	12 05 2F		CALL	TIMER_LOAD1	;LOAD THE HIGH VALUE
 5542:	  16A3	30 8F FD		JNB	TF1,$		;WAIT
 5543:	  16A6	70 E3			JNZ	STONE1		;LOOP
 5544:	  16A8	22			RET
 5545:					;
 5546:					;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5547:					;
 5548:	  16A9			LNTAB:	; Natural log lookup table
 5549:					;
 5550:					;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5551:					;
 5552:	  16A9	80			DB	80H
 5553:	  16AA	00			DB	00H

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 101



 Line  I  Addr  Code            Source

 5554:	  16AB	71			DB	71H
 5555:	  16AC	37			DB	37H
 5556:	  16AD	13			DB	13H
 5557:	  16AE	19			DB	19H
 5558:					;
 5559:	  16AF	7F			DB	7FH
 5560:	  16B0	00			DB	00H
 5561:	  16B1	76			DB	76H
 5562:	  16B2	64			DB	64H
 5563:	  16B3	37			DB	37H
 5564:	  16B4	94			DB	94H
 5565:					;
 5566:	  16B5	80			DB	80H
 5567:	  16B6	00			DB	00H
 5568:	  16B7	07			DB	07H
 5569:	  16B8	22			DB	22H
 5570:	  16B9	75			DB	75H
 5571:	  16BA	17			DB	17H
 5572:					;
 5573:	  16BB	80			DB	80H
 5574:	  16BC	00			DB	00H
 5575:	  16BD	52			DB	52H
 5576:	  16BE	35			DB	35H
 5577:	  16BF	93			DB	93H
 5578:	  16C0	28			DB	28H
 5579:					;
 5580:	  16C1	80			DB	80H
 5581:	  16C2	00			DB	00H
 5582:	  16C3	71			DB	71H
 5583:	  16C4	91			DB	91H
 5584:	  16C5	85			DB	85H
 5585:	  16C6	86			DB	86H
 5586:					;
 5587:	  16C7	FF			DB	0FFH
 5588:					;
 5589:	  16C8	81			DB	81H
 5590:	  16C9	00			DB	00H
 5591:	  16CA	51			DB	51H
 5592:	  16CB	58			DB	58H
 5593:	  16CC	02			DB	02H
 5594:	  16CD	23			DB	23H
 5595:					;
 5596:					;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
 5597:					;
 5598:	  16CE			SINTAB: ; Sin lookup table
 5599:					;
 5600:					;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
 5601:					;
 5602:	  16CE	77			DB	128-9
 5603:	  16CF	00			DB	00H
 5604:	  16D0	44			DB	44H
 5605:	  16D1	90			DB	90H
 5606:	  16D2	05			DB	05H
 5607:	  16D3	16			DB	16H
 5608:					;
 5609:	  16D4	79			DB	128-7

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 102



 Line  I  Addr  Code            Source

 5610:	  16D5	01			DB	01H
 5611:	  16D6	08			DB	08H
 5612:	  16D7	21			DB	21H
 5613:	  16D8	05			DB	05H
 5614:	  16D9	25			DB	25H
 5615:					;
 5616:	  16DA	7B			DB	128-5
 5617:	  16DB	00			DB	00H
 5618:	  16DC	19			DB	19H
 5619:	  16DD	73			DB	73H
 5620:	  16DE	55			DB	55H
 5621:	  16DF	27			DB	27H
 5622:	  16E0	7D			DB	128-3
 5623:	  16E1	01			DB	01H
 5624:	  16E2	70			DB	70H
 5625:	  16E3	12			DB	12H
 5626:	  16E4	84			DB	84H
 5627:	  16E5	19			DB	19H
 5628:					;
 5629:	  16E6	7E			DB	128-2
 5630:	  16E7	00			DB	00H
 5631:	  16E8	33			DB	33H
 5632:	  16E9	33			DB	33H
 5633:	  16EA	33			DB	33H
 5634:	  16EB	83			DB	83H
 5635:					;
 5636:	  16EC	80			DB	128
 5637:	  16ED	01			DB	01H
 5638:	  16EE	67			DB	67H
 5639:	  16EF	66			DB	66H
 5640:	  16F0	66			DB	66H
 5641:	  16F1	16			DB	16H
 5642:					;
 5643:	  16F2	81		FPONE:	DB	128+1
 5644:	  16F3	00			DB	00H
 5645:	  16F4	00			DB	00H
 5646:	  16F5	00			DB	00H
 5647:	  16F6	00			DB	00H
 5648:	  16F7	10			DB	10H
 5649:					;
 5650:	  16F8	FF			DB	0FFH		;END OF TABLE
 5651:					;
 5652:	  16F9	12 0F D9	SBAUD:	CALL	AXTAL		;PUT CRYSTAL ON THE STACK
 5653:	  16FC	12 0F 43		CALL	EXPRB		;PUT THE NUMBER AFTER BAUD ON STACK
 5654:	  16FF	74 0C			MOV	A,#12
 5655:	  1701	91 B1			ACALL	TWO_R2		;TOS = 12
 5656:	  1703	31 B0			ACALL	AMUL		;TOS = 12*BAUD
 5657:	  1705	91 0A			ACALL	ADIV		;TOS = XTAL/(12*BAUD)
 5658:	  1707	51 23			ACALL	IFIX
 5659:	  1709	D1 7B			ACALL	CBIAS
 5660:	  170B	90 01 24		MOV	DPTR,#SPV
 5661:					;
 5662:	  170E	02 06 05	S31L:	JMP	S31DP
 5663:					;
 5664:	  1711	D1 4F		AFREE:	CALL	PMTOP		;PUT MTOP ON STACK
 5665:	  1713	12 05 A9		CALL	G4		;GET END ADDRESS

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 103



 Line  I  Addr  Code            Source

 5666:	  1716	A8 82			MOV	R0,DPL
 5667:	  1718	AA 83			MOV	R2,DPH
 5668:	  171A	91 B4			ACALL	TWO_EY
 5669:					;
 5670:	  171C	12 19 71	ASUB:	LCALL	FP_BASE1	;DO FP SUB
 5671:	  171F	01 38			AJMP	FPTST
 5672:					;
 5673:	  1721	12 05 1C	ALEN:	CALL	CCAL		;CALCULATE THE LEN OF THE SELECTED PROGRAM
 5674:	  1724	AA 07			MOV	R2,R7B0 	;SAVE THE HIGH BYTE
 5675:	  1726	EE			MOV	A,R6		;SAVE THE LOW BYTE
 5676:	  1727	81 B3			AJMP	TWO_EX		;PUT IT ON THE STACK
 5677:					;
 5678:	  1729	A2 AF		ATIME:	MOV	C,EA		;SAVE INTERRUTS
 5679:	  172B	C2 AF			CLR	EA
 5680:	  172D	C0 47			PUSH	MILLIV		;SAVE MILLI VALUE
 5681:	  172F	AA 48			MOV	R2,TVH		;GET THE TIMER
 5682:	  1731	E5 49			MOV	A,TVL
 5683:	  1733	92 AF			MOV	EA,C		;SAVE INTERRUPTS
 5684:	  1735	91 B3			ACALL	TWO_EX		;PUT TIMER ON THE STACK
 5685:	  1737	D0 E0			POP	ACC		;GET MILLI
 5686:	  1739	91 B1			ACALL	TWO_R2		;PUT MILLI ON STACK
 5687:	  173B	74 C8			MOV	A,#200
 5688:	  173D	91 B1			ACALL	TWO_R2		;DIVIDE MILLI BY 200
 5689:	  173F	91 0A			ACALL	ADIV
 5690:					;
 5691:	  1741	12 19 6F	AADD:	LCALL	FP_BASE 	;DO FP ADDITION
 5692:	  1744	01 38			AJMP	FPTST		;CHECK FOR ERRORS
 5693:					;
 5694:					;**************************************************************
 5695:					;
 5696:					; Here are some error messages that were moved
 5697:					;
 5698:					;**************************************************************
 5699:					;
 5700:					;
 5701:	  1746	42 41 44 20	E1X:	DB	'BAD SYNTAX"'
	  174A	53 59 4E 54
	  174E	41 58 22
 5702:	  1751	8A		E2X:	DB	128+10
 5703:	  1752	44 49 56 49		DB	'DIVIDE BY ZERO"'
	  1756	44 45 20 42
	  175A	59 20 5A 45
	  175E	52 4F 22
 5704:					;
 5705:	  1761	41 52 52 41	E6X:	DB	'ARRAY SIZE"'
	  1765	59 20 53 49
	  1769	5A 45 22
 5706:					;
 5707:					;**************************************************************
 5708:					;
 5709:	  176C			T_BUF:	; TXA gets IBUF
 5710:					;
 5711:					;**************************************************************
 5712:					;
 5713:	  176C	75 0A 00		MOV	TXAH,#HIGH IBUF
 5714:	  176F	75 08 07		MOV	TXAL,#LOW IBUF

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 104



 Line  I  Addr  Code            Source

 5715:	  1772	22			RET
 5716:					;
 5717:					;
 5718:					;***************************************************************
 5719:					;
 5720:	  1773			CXFER:	; Transfer a program from rom to ram
 5721:					;
 5722:					;***************************************************************
 5723:					;
 5724:	  1773	12 05 1C		CALL	CCAL		;GET EVERYTHING SET UP
 5725:	  1776	7A 02			MOV	R2,#HIGH PSTART
 5726:	  1778	78 00			MOV	R0,#LOW PSTART
 5727:	  177A	B1 6D			ACALL	LMOV		;DO THE TRANSFER
 5728:	  177C	12 06 64		CALL	RCLEAR		;CLEAR THE MEMORY
 5729:					;
 5730:					; Fall thru to CRAM
 5731:					;
 5732:					;***************************************************************
 5733:					;
 5734:	  177F			CRAM:	; The command action routine - RAM - Run out of ram
 5735:					;
 5736:					;***************************************************************
 5737:					;
 5738:	  177F	C2 17			CLR	CONB		;CAN'T CONTINUE IF MODE CHANGE
 5739:	  1781	75 13 02		MOV	BOFAH,#HIGH PSTART
 5740:	  1784	75 14 00		MOV	BOFAL,#LOW PSTART
 5741:					;
 5742:					; Fall thru to Command Processor
 5743:					;
 5744:					;***************************************************************
 5745:					;
 5746:	  1787			CMND1:	; The entry point for the command processor
 5747:					;
 5748:					;***************************************************************
 5749:					;
 5750:	  1787	12 0C 31		LCALL	SPRINT1 	;WASTE AT AND HEX
 5751:	  178A	C2 2D			CLR	XBIT		;TO RESET IF NEEDED
 5752:				;
 5753:				;*****************************************************************************
 5754:				;****** Karmann 1 Bugfix *****************************************************
 5755:				;
 5756:	  178C	F1 E0			acall	TEST_USER	;check for user command extensions
 5757:				;
 5758:				;****** continue with original code: *****************************************
 5759:				;
 5760:	  178E	90 00 FD		MOV	DPTR,#RDYS	;PRINT THE READY MESSAGE
 5761:	  1791	12 06 AD		CALL	CRP		;DO A CR, THEN, PRINT FROM THE ROM
 5762:					;
 5763:	  1794	D2 2F		CMNDR:	SETB	DIRF		;SET THE DIRECT INPUT BIT
 5764:	  1796	85 3E 81		MOV	SP,SPSAV	;LOAD THE STACK
 5765:	  1799	11 9D			ACALL	CL7		;DO A CRLF
 5766:					;
 5767:	  179B	C2 18		CMNX:	CLR	GTRD		;CLEAR BREAK
 5768:	  179D	90 00 5E		MOV	DPTR,#5EH	;DO RUN TRAP
 5769:	  17A0	E0			MOVX	A,@DPTR
 5770:	  17A1	64 34			XRL	A,#52

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 105



 Line  I  Addr  Code            Source

 5771:	  17A3	70 03			JNZ	CMNX1
 5772:	  17A5	02 08 02		LJMP	CRUN
 5773:	  17A8	7D 3E		CMNX1:	MOV	R5,#'>'         ;OUTPUT A PROMPT
 5774:	  17AA	12 07 11		LCALL	TEROT
 5775:	  17AD	12 06 D8		CALL	INLINE		;INPUT A LINE INTO IBUF
 5776:	  17B0	B1 BA			CALL	PP		;PRE-PROCESS THE LINE
 5777:	  17B2	20 D5 0F		JB	F0,CMND3	;NO LINE NUMBER
 5778:	  17B5	91 F0			CALL	LINE		;PROCESS THE LINE
 5779:	  17B7	12 05 E7		LCALL	LCLR
 5780:	  17BA	20 15 DE		JB	LINEB,CMNX	;DON'T CLEAR MEMORY IF NO NEED
 5781:	  17BD	D2 15			SETB	LINEB
 5782:	  17BF	12 06 64		LCALL	RCLEAR		;CLEAR THE MEMORY
 5783:	  17C2	80 D7			SJMP	CMNX		;LOOP BACK
 5784:					;
 5785:	  17C4	F1 6C		CMND3:	CALL	T_BUF		;SET UP THE TEXT POINTER
 5786:	  17C6	12 0E E1		CALL	DELTST		;GET THE CHARACTER
 5787:	  17C9	60 C9			JZ	CMNDR		;IF CR, EXIT
 5788:	  17CB	90 01 0F		MOV	DPTR,#CMNDD	;POINT AT THE COMMAND LOOKUP
 5789:	  17CE	B4 F0 00		CJNE	A,#T_CMND,CMND31;PROCESS STATEMENT IF NOT A COMMAND
 5790:	  17D1	40 0A		CMND31: JC	CMND5
 5791:	  17D3	12 0E D7		CALL	GCI1		;BUMP TXA
 5792:	  17D6	54 0F			ANL	A,#0FH		;STRIP MSB'S FOR LOOKUP
 5793:	  17D8	12 09 5C		LCALL	ISTA1		;PROCESS COMMAND
 5794:	  17DB	80 B7			SJMP	CMNDR
 5795:					;
 5796:	  17DD	02 08 13	CMND5:	LJMP	ILOOP		;CHECK FOR A POSSIBLE BREAK
 5797:				;
 5798:				;*****************************************************************************
 5799:				;****** Karmann 1 Bugfix *****************************************************
 5800:				;
 5801:	  17E0			TEST_USER:			;check for user command extensions
 5802:	  17E0	E4			CLR	A
 5803:	  17E1	90 20 02		MOV	DPTR,#2002H	;CHECK FOR EXTERNAL TRAP PACKAGE
 5804:	  17E4	93			MOVC	A,@A+DPTR
 5805:	  17E5	B4 5A 03		CJNE	A,#5AH,CMND11	;test for user commands
 5806:	  17E8	12 20 48		LCALL	2048H		;IF PRESENT JUMP TO LOCATION 200BH
 5807:	  17EB	22		CMND11: ret
 5808:				;
 5809:				;****** continue with original code: *****************************************
 5810:				;
 5811:					;CONSTANTS
 5812:					;
 5813:	  17EC	88		XTALV:	DB	128+8		; DEFAULT CRYSTAL VALUE
 5814:	  17ED	00			DB	00H
 5815:	  17EE	00			DB	00H
 5816:	  17EF	92			DB	92H
 5817:	  17F0	05			DB	05H
 5818:	  17F1	11			DB	11H
 5819:					;
 5820:	  17F2	85		EXP11:	DB	85H
 5821:	  17F3	00			DB	00H
 5822:	  17F4	42			DB	42H
 5823:	  17F5	41			DB	41H
 5824:	  17F6	87			DB	87H
 5825:	  17F7	59			DB	59H
 5826:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 106



 Line  I  Addr  Code            Source

 5827:	  17F8	81		EXP1:	DB	128+1		; EXP(1)
 5828:	  17F9	00			DB	00H
 5829:	  17FA	18			DB	18H
 5830:	  17FB	28			DB	28H
 5831:	  17FC	18			DB	18H
 5832:	  17FD	27			DB	27H
 5833:				;
 5834:				;*****************************************************************************
 5835:				;****** Disable Intel programming for to get room ****************************
 5836:				;
 5837:				;IPTIME: DB	128-4		;FPROG TIMING
 5838:				;	DB	00H
 5839:				;	DB	00H
 5840:				;	DB	00H
 5841:				;	DB	75H
 5842:				;	DB	83H
 5843:				;
 5844:				;*****************************************************************************
 5845:				;
 5846:	  17FE	81		PIE:	DB	128+1		;PI
 5847:	  17FF	00			DB	00H
 5848:	  1800	26			DB	26H
 5849:	  1801	59			DB	59H
 5850:	  1802	41			DB	41H
 5851:	  1803	31			DB	31H		; 3.1415926
 5852:					;
 5853:					;***************************************************************
 5854:					;
 5855:					; The error messages, some have been moved
 5856:					;
 5857:					;***************************************************************
 5858:					;
 5859:	  1804	9E		E7X:	DB	128+30
 5860:	  1805	41 52 49 54		DB	'ARITH. UNDERFLOW"'
	  1809	48 2E 20 55
	  180D	4E 44 45 52
	  1811	46 4C 4F 57
	  1815	22
 5861:					;
 5862:	  1816	4D 45 4D 4F	E5X:	DB	'MEMORY ALLOCATION"'
	  181A	52 59 20 41
	  181E	4C 4C 4F 43
	  1822	41 54 49 4F
	  1826	4E 22
 5863:					;
 5864:	  1828	A8		E3X:	DB	128+40
 5865:	  1829	42 41 44 20		DB	'BAD ARGUMENT"'
	  182D	41 52 47 55
	  1831	4D 45 4E 54
	  1835	22
 5866:					;
 5867:	  1836	49 2D 53 54	EXI:	DB	'I-STACK"'
	  183A	41 43 4B 22
 5868:					;
 5869:					;***************************************************************
 5870:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 107



 Line  I  Addr  Code            Source

 5871:					; The command action routine - CONTINUE
 5872:					;
 5873:					;***************************************************************
 5874:					;
 5875:	  183E	90 1F A6	CCONT:	MOV	DPTR,#E15X
 5876:	  1841	30 17 4B		JNB	CONB,ERROR	;ERROR IF CONTINUE IS NOT SET
 5877:					;
 5878:	  1844			CC1:	;used for input statement entry
 5879:					;
 5880:	  1844	85 42 0A		MOV	TXAH,INTXAH	;RESTORE TXA
 5881:	  1847	85 43 08		MOV	TXAL,INTXAL
 5882:	  184A	02 08 0F		JMP	CILOOP		;EXECUTE
 5883:					;
 5884:	  184D	85 0F 83	DTEMP:	MOV	DPH,TEMP5	;RESTORE DPTR
 5885:	  1850	85 0E 82		MOV	DPL,TEMP4
 5886:	  1853	22			RET
 5887:					;
 5888:	  1854	85 83 0F	TEMPD:	MOV	TEMP5,DPH
 5889:	  1857	85 82 0E		MOV	TEMP4,DPL
 5890:	  185A	22			RET
 5891:					;
 5892:					;**************************************************************
 5893:					;
 5894:	  185B			I_DL:	; IDLE
 5895:					;
 5896:					;**************************************************************
 5897:					;
 5898:	  185B	20 2F 27		JB	DIRF,E1XX	;SYNTAX ERROR IN DIRECT INPUT
 5899:	  185E	C2 96			CLR	DACK		;ACK IDLE
 5900:					;
 5901:	  1860	43 87 01	U_ID1:	ORL	PCON,#01H
 5902:				;	DB	01000011B	;ORL DIRECT OP CODE
 5903:				;	DB	87H		;PCON ADDRESS
 5904:				;	DB	01H		;SET IDLE BIT
 5905:	  1863	20 16 0B		JB	INTPEN,I_RET	;EXIT IF EXTERNAL INTERRUPT
 5906:	  1866	10 21 08		JBC	U_IDL,I_RET	;EXIT IF USER WANTS TO
 5907:	  1869	30 10 F4		JNB	OTS,U_ID1	;LOOP IF TIMER NOT ENABLED
 5908:	  186C	12 07 E3		LCALL	T_CMP		;CHECK THE TIMER
 5909:	  186F	40 EF			JC	U_ID1		;LOOP IF TIME NOT BIG ENOUGH
 5910:					;
 5911:	  1871	D2 96		I_RET:	SETB	DACK		;RESTORE EXECUTION
 5912:	  1873	22			RET			;EXIT IF IT IS
 5913:					;
 5914:					;
 5915:					;
 5916:	  1874	A3		ER0:	INC	DPTR		;BUMP TO TEXT
 5917:	  1875	20 2F 23		JB	DIRF,ERROR0	;CAN'T GET OUT OF DIRECT MODE
 5918:	  1878	30 13 20		JNB	ON_ERR,ERROR0	;IF ON ERROR ISN'T SET, GO BACK
 5919:	  187B	90 01 01		MOV	DPTR,#ERRLOC	;SAVE THE ERROR CODE
 5920:	  187E	12 06 73		CALL	RC2		;SAVE ERROR AND SET UP THE STACKS
 5921:	  1881	A3			INC	DPTR		;POINT AT ERRNUM
 5922:	  1882	02 08 44		JMP	ERL4		;LOAD ERR NUM AND EXIT
 5923:					;
 5924:					; Syntax error
 5925:					;
 5926:	  1885	A2 2F		E1XX:	MOV	C,DIRF		;SEE IF IN DIRECT MODE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 108



 Line  I  Addr  Code            Source

 5927:	  1887	90 17 46	E1XX1:	MOV	DPTR,#E1X	;ERROR MESSAGE
 5928:	  188A	80 04			SJMP	ERROR1		;TRAP ON SET DIRF
 5929:					;
 5930:	  188C	90 18 36	E1XX2:	MOV	DPTR,#EXI	;STACK ERROR
 5931:					;
 5932:					; Falls through
 5933:					;
 5934:					;***************************************************************
 5935:					;
 5936:					;ERROR PROCESSOR - PRINT OUT THE ERROR TYPE, CHECK TO SEE IF IN
 5937:					;		   RUN OR COMMAND MODE, FIND AND PRINT OUT THE
 5938:					;		   LINE NUMBER IF IN RUN MODE
 5939:					;
 5940:					;***************************************************************
 5941:					;
 5942:	  188F	C3		ERROR:	CLR	C		;RESET STACK
 5943:	  1890	85 3E 81	ERROR1: MOV	SP,SPSAV	;RESET THE STACK
 5944:	  1893	12 0C 31		LCALL	SPRINT1 	;CLEAR LINE AND AT MODE
 5945:	  1896	E4			CLR	A		;SET UP TO GET ERROR CODE
 5946:	  1897	93			MOVC	A,@A+DPTR
 5947:	  1898	10 E7 D9		JBC	ACC.7,ER0	;PROCESS ERROR
 5948:					;
 5949:	  189B	11 54		ERROR0: ACALL	TEMPD		;SAVE THE DATA POINTER
 5950:	  189D	40 03			JC	ERROR01 	;NO RESET IF CARRY IS SET
 5951:	  189F	12 06 6F		LCALL	RC1		;RESET THE STACKS
 5952:	  18A2	12 06 A3	ERROR01:CALL	CRLF2		;DO TWO CARRIAGE RET - LINE FEED
 5953:	  18A5	90 1F F8		MOV	DPTR,#ERS	;OUTPUT ERROR MESSAGE
 5954:	  18A8	12 06 AF		CALL	ROM_P
 5955:	  18AB	11 4D			CALL	DTEMP		;GET THE ERROR MESSAGE BACK
 5956:					;
 5957:	  18AD	12 06 AF	ERRS:	CALL	ROM_P		;PRINT ERROR TYPE
 5958:	  18B0	30 2F 05		JNB	DIRF,ER1	;DO NOT PRINT IN LINE IF DIRF=1
 5959:					;
 5960:	  18B3	C2 20		SERR1:	CLR	STOPBIT 	;PRINT STOP THEN EXIT, FOR LIST
 5961:	  18B5	02 17 87		JMP	CMND1
 5962:					;
 5963:	  18B8	90 01 03	ER1:	MOV	DPTR,#INS	;OUTPUT IN LINE
 5964:	  18BB	12 06 AF		CALL	ROM_P
 5965:					;
 5966:					;NOW, FIND THE LINE NUMBER
 5967:					;
 5968:					;
 5969:	  18BE	12 0E 9B		CALL	DP_B		;GET THE FIRST ADDRESS OF THE PROGRAM
 5970:	  18C1	E4			CLR	A		;FOR INITIALIZATION
 5971:					;
 5972:	  18C2	11 54		ER2:	ACALL	TEMPD		;SAVE THE DPTR
 5973:	  18C4	12 05 DE		CALL	ADDPTR		;ADD ACC TO DPTR
 5974:	  18C7	11 FB			ACALL	ER4		;R3:R1 = TXA-DPTR
 5975:	  18C9	40 06			JC	ER3		;EXIT IF DPTR>TXA
 5976:	  18CB	60 04			JZ	ER3		;EXIT IF DPTR=TXA
 5977:	  18CD	E0			MOVX	A,@DPTR 	;GET LENGTH
 5978:	  18CE	B4 01 F1		CJNE	A,#EOF,ER2	;SEE IF AT THE END
 5979:					;
 5980:	  18D1	11 4D		ER3:	ACALL	DTEMP		;PUT THE LINE IN THE DPTR
 5981:	  18D3	11 FB			ACALL	ER4		;R3:R1 = TXA - BEGINNING OF LINE
 5982:	  18D5	E9			MOV	A,R1		;GET LENGTH

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 109



 Line  I  Addr  Code            Source

 5983:	  18D6	24 0A			ADD	A,#10		;ADD 10 TO LENGTH, DPTR STILL HAS ADR
 5984:	  18D8	F5 45			MOV	MT1,A		;SAVE THE COUNT
 5985:	  18DA	A3			INC	DPTR		;POINT AT LINE NUMBER HIGH BYTE
 5986:	  18DB	12 16 52		CALL	PMTOP1		;LOAD R2:R0, PUT IT ON THE STACK
 5987:	  18DE	31 7D			ACALL	FP_BASE7	;OUTPUT IT
 5988:	  18E0	20 20 D0		JB	STOPBIT,SERR1	;EXIT IF STOP BIT SET
 5989:	  18E3	12 06 A3		CALL	CRLF2		;DO SOME CRLF'S
 5990:	  18E6	11 4D			CALL	DTEMP
 5991:	  18E8	12 10 A3		CALL	UPPL		;UNPROCESS THE LINE
 5992:	  18EB	12 10 94		CALL	CL6		;PRINT IT
 5993:	  18EE	7D 2D		ER31:	MOV	R5,#'-'         ;OUTPUT DASHES, THEN AN X
 5994:	  18F0	31 6C			ACALL	T_L		;PRINT AN X IF ERROR CHARACTER FOUND
 5995:	  18F2	D5 45 F9		DJNZ	MT1,ER31	;LOOP UNTIL DONE
 5996:	  18F5	7D 58			MOV	R5,#'X'
 5997:	  18F7	31 6C			ACALL	T_L
 5998:	  18F9	01 B3			AJMP	SERR1
 5999:					;
 6000:	  18FB	AB 0A		ER4:	MOV	R3,TXAH 	;GET TEXT POINTER AND PERFORM SUBTRACTION
 6001:	  18FD	A9 08			MOV	R1,TXAL
 6002:	  18FF	02 0A 02		JMP	DUBSUB
 6003:					;
 6004:					;**************************************************************
 6005:					;
 6006:					; Interrupt driven timer
 6007:					;
 6008:					;**************************************************************
 6009:					;
 6010:	  1902	85 4A 8C	I_DR:	MOV	TH0,SAVE_T	;LOAD THE TIMER
 6011:	  1905	C5 47			XCH	A,MILLIV	;SAVE A, GET MILLI COUNTER
 6012:	  1907	04			INC	A		;BUMP COUNTER
 6013:	  1908	B4 C8 08		CJNE	A,#200,TR	;CHECK OUT TIMER VALUE
 6014:	  190B	E4			CLR	A		;FORCE ACC TO BE ZERO
 6015:	  190C	05 49			INC	TVL		;INCREMENT LOW TIMER
 6016:	  190E	B5 49 02		CJNE	A,TVL,TR	;CHECK LOW VALUE
 6017:	  1911	05 48			INC	TVH		;BUMP TIMER HIGH
 6018:					;
 6019:	  1913	C5 47		TR:	XCH	A,MILLIV
 6020:	  1915	D0 D0			POP	PSW
 6021:	  1917	32			RETI
 6022:					;
 6023:					;**************************************************************
 6024:					;
 6025:					; The statement action routine - CLOCK
 6026:					;
 6027:					;**************************************************************
 6028:					;
 6029:	  1918	31 38		SCLOCK: ACALL	OTST		;GET CHARACTER AFTER CLOCK TOKEN
 6030:	  191A	C2 A9			CLR	ET0
 6031:	  191C	C2 2E			CLR	C_BIT
 6032:	  191E	50 0D			JNC	SC_R		;EXIT IF A ZERO
 6033:				;
 6034:				;*****************************************************************************
 6035:				;****** Use XTAL up to 47 MHz ************************************************
 6036:				;****** Wulf 2 ***************************************************************
 6037:				;
 6038:				;	ANL	TMOD,#0F0H	;SET UP THE MODE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 110



 Line  I  Addr  Code            Source

 6039:				;
 6040:	  1920	53 89 F1		anl	TMOD,#0F1H	;Set up 16 bit mode for timer 0
 6041:	  1923	43 89 01		orl	TMOD,#01H
 6042:				;
 6043:				;*****************************************************************************
 6044:				;
 6045:	  1926	D2 2E			SETB	C_BIT		;USER INTERRUPTS
 6046:	  1928	43 A8 82		ORL	IE,#82H 	;ENABLE ET0 AND EA
 6047:	  192B	D2 8C			SETB	TR0		;TURN ON THE TIMER
 6048:					;
 6049:	  192D	22		SC_R:	RET
 6050:					;
 6051:					;***************************************************************
 6052:					;
 6053:	  192E			SUI:	; Statement USER IN action routine
 6054:					;
 6055:					;***************************************************************
 6056:					;
 6057:	  192E	31 38			ACALL	OTST
 6058:	  1930	92 1E			MOV	CIUB,C		;SET OR CLEAR CIUB
 6059:	  1932	22			RET
 6060:					;
 6061:					;***************************************************************
 6062:					;
 6063:	  1933			SUO:	; Statement USER OUT action routine
 6064:					;
 6065:					;***************************************************************
 6066:					;
 6067:	  1933	31 38			ACALL	OTST
 6068:	  1935	92 1C			MOV	COUB,C
 6069:	  1937	22			RET
 6070:					;
 6071:	  1938			OTST:	; Check for a one
 6072:					;
 6073:	  1938	12 0E D5		LCALL	GCI		;GET THE CHARACTER, CLEARS CARRY
 6074:	  193B	94 31			SUBB	A,#'1'          ;SEE IF A ONE
 6075:	  193D	B3			CPL	C		;SETS CARRY IF ONE, CLEARS IT IF ZERO
 6076:	  193E	22		OTST1:	RET
 6077:					;
 6078:					;**************************************************************
 6079:					;
 6080:					; IBLK - EXECUTE USER SUPPLIED TOKEN
 6081:					;
 6082:					;**************************************************************
 6083:					;
 6084:	  193F	20 D4 FC	IBLK:	JB	PSW.4,OTST1	;EXIT IF REGISTER BANK <> 0
 6085:	  1942	20 D3 F9		JB	PSW.3,OTST1
 6086:	  1945	10 E7 06		JBC	ACC.7,IBLK1	;SEE IF BIT SEVEN IS SET
 6087:	  1948	90 00 47		MOV	DPTR,#USENT	;USER ENTRY LOCATION
 6088:	  194B	02 09 5C		LJMP	ISTA1
 6089:					;
 6090:	  194E	20 E0 2A	IBLK1:	JB	ACC.0,FP_BASE6	;FLOATING POINT INPUT
 6091:	  1951	60 19			JZ	T_L		;DO OUTPUT ON 80H
 6092:	  1953	90 19 6D		MOV	DPTR,#FP_BASE-2
 6093:	  1956	73			JMP	@A+DPTR
 6094:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 111



 Line  I  Addr  Code            Source

 6095:					;
 6096:					;**************************************************************
 6097:					;
 6098:					; GET_NUM - GET A NUMBER, EITHER HEX OR FLOAT
 6099:					;
 6100:					;**************************************************************
 6101:					;
 6102:	  1957	31 79		GET_NUM:ACALL	FP_BASE5	;SCAN FOR HEX
 6103:	  1959	50 20			JNC	FP_BASE6	;DO FP INPUT
 6104:					;
 6105:	  195B	31 81			ACALL	FP_BASE9	;ASCII STRING TO R2:R0
 6106:	  195D	70 0C			JNZ	H_RET
 6107:	  195F	C0 83			PUSH	DPH		;SAVE THE DATA_POINTER
 6108:	  1961	C0 82			PUSH	DPL
 6109:	  1963	31 87			ACALL	FP_BASE12	;PUT R2:R0 ON THE STACK
 6110:	  1965	D0 82			POP	DPL		;RESTORE THE DATA_POINTER
 6111:	  1967	D0 83			POP	DPH
 6112:	  1969	E4			CLR	A		;NO ERRORS
 6113:	  196A	22			RET			;EXIT
 6114:					;
 6115:					;**************************************************************
 6116:					;
 6117:					; WB - THE EGO MESSAGE
 6118:					;
 6119:					;**************************************************************
 6120:				;
 6121:				;*****************************************************************************
 6122:				;****** Sorry - but the ego message had to be disabled ***********************
 6123:				;
 6124:				;WB:
 6125:				;
 6126:				;	DB	'W'+80H,'R'+80H
 6127:				;	DB	'I'+80H,'T'+80H,'T','E'+80H,'N'+80H
 6128:				;	DB	' ','B'+80H,'Y'+80H,' '
 6129:				;	DB	'J'+80H,'O'+80H,'H'+80H,'N'+80H,' '+80H
 6130:				;	DB	'K','A'+80H,'T'+80H,'A'+80H,'U'+80H
 6131:				;	DB	'S','K'+80H,'Y'+80H
 6132:				;	DB	', I','N'+80H,'T'+80H,'E'+80H,'L'+80H
 6133:				;	DB	' '+80H,'C'+80H,'O'+80H,'R'+80H,'P'+80H
 6134:				;	DB	'. 1','9'+80H,'85'
 6135:				;
 6136:				;*****************************************************************************
 6137:					;
 6138:	  196B	22		H_RET:	RET
 6139:					;
 6140:				;************************************************************
 6141:				;
 6142:				; This is a complete BCD floating point package for the 8051 micro-
 6143:				; controller. It provides 8 digits of accuracy with exponents that
 6144:				; range from +127 to -127. The mantissa is in packed BCD, while the
 6145:				; exponent is expressed in pseudo-twos complement. A ZERO exponent
 6146:				; is used to express the number ZERO. An exponent value of 80H or
 6147:				; greater than means the exponent is positive, i.e. 80H = E 0,
 6148:				; 81H = E+1, 82H = E+2 and so on. If the exponent is 7FH or less,
 6149:				; the exponent is negative, 7FH = E-1, 7EH = E-2, and so on.
 6150:				; ALL NUMBERS ARE ASSUMED TO BE NORMALIZED and all results are

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 112



 Line  I  Addr  Code            Source

 6151:				; normalized after calculation. A normalized mantissa is >=.10 and
 6152:				; <=.99999999.
 6153:				;
 6154:				; The numbers in memory assumed to be stored as follows:
 6155:				;
 6156:				; EXPONENT OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE
 6157:				; SIGN OF ARGUMENT 2	   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-1
 6158:				; DIGIT 78 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-2
 6159:				; DIGIT 56 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-3
 6160:				; DIGIT 34 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-4
 6161:				; DIGIT 12 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-5
 6162:				;
 6163:				; EXPONENT OF ARGUMENT 1   =   VALUE OF ARG_STACK
 6164:				; SIGN OF ARGUMENT 1	   =   VALUE OF ARG_STACK-1
 6165:				; DIGIT 78 OF ARGUMENT 1   =   VALUE OF ARG_STACK-2
 6166:				; DIGIT 56 OF ARGUMENT 1   =   VALUE OF ARG_STACK-3
 6167:				; DIGIT 34 OF ARGUMENT 1   =   VALUE OF ARG_STACK-4
 6168:				; DIGIT 12 OF ARGUMENT 1   =   VALUE OF ARG_STACK-5
 6169:				;
 6170:				; The operations are performed thusly:
 6171:				;
 6172:				; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+FP_NUMBER_SIZE # ARG_STACK
 6173:				;
 6174:				; Which is ARGUMENT 2 = ARGUMENT 2 # ARGUMENT 1
 6175:				;
 6176:				; Where # can be ADD, SUBTRACT, MULTIPLY OR DIVIDE.
 6177:				;
 6178:				; Note that the stack gets popped after an operation.
 6179:				;
 6180:				; The FP_COMP instruction POPS the ARG_STACK TWICE and returns status.
 6181:				;
 6182:				;**********************************************************************
 6183:				;
 6184:				;**********************************************************************
 6185:				;
 6186:				; STATUS ON RETURN - After performing an operation (+, -, *, /)
 6187:				;		     the accumulator contains the following status
 6188:				;
 6189:				; ACCUMULATOR - BIT 0 - FLOATING POINT UNDERFLOW OCCURED
 6190:				;
 6191:				;	      - BIT 1 - FLOATING POINT OVERFLOW OCCURED
 6192:				;
 6193:				;	      - BIT 2 - RESULT WAS ZER0
 6194:				;
 6195:				;	      - BIT 3 - DIVIDE BY ZERO ATTEMPTED
 6196:				;
 6197:				;	      - BIT 4 - NOT USED, 0 RETURNED
 6198:				;
 6199:				;	      - BIT 5 - NOT USED, 0 RETURNED
 6200:				;
 6201:				;	      - BIT 6 - NOT USED, 0 RETURNED
 6202:				;
 6203:				;	      - BIT 7 - NOT USED, 0 RETURNED
 6204:				;
 6205:				; NOTE: When underflow occures, a ZERO result is returned.
 6206:				;	When overflow or divide by zero occures, a result of

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 113



 Line  I  Addr  Code            Source

 6207:				;	.99999999 E+127 is returned and it is up to the user
 6208:				;	to handle these conditions as needed in the program.
 6209:				;
 6210:				; NOTE: The Compare instruction returns F0 = 0 if ARG 1 = ARG 2
 6211:				;	and returns a CARRY FLAG = 1 if ARG 1 is > ARG 2
 6212:				;
 6213:				;***********************************************************************
 6214:				;
 6215:				;***********************************************************************
 6216:				;
 6217:				; The following values MUST be provided by the user
 6218:				;
 6219:				;***********************************************************************
 6220:				;
 6221:		N      0009	ARG_STACK	EQU	9	;ARGUMENT STACK POINTER
 6222:		N      0001	ARG_STACK_PAGE	EQU	1
 6223:				;OUTPUT 	 EQU	 1990H	 ;CALL LOCATION TO OUTPUT A CHARACTER
 6224:		N      0058	CONVERT 	EQU	58H	;LOCATION TO CONVERT NUMBERS
 6225:		N	 19	INTGRC		BIT	25	;BIT SET IF INTGER ERROR
 6226:				;
 6227:				;***********************************************************************
 6228:				;
 6229:				; The following equates are used internally
 6230:				;
 6231:				;***********************************************************************
 6232:				;
 6233:		N      0006	FP_NUMBER_SIZE	EQU	6
 6234:		N      0000	UNDERFLOW	EQU	0
 6235:		N      0001	OVERFLOW	EQU	1
 6236:		N      0002	ZERO		EQU	2
 6237:		N      0003	ZERO_DIVIDE	EQU	3
 6238:				;
 6239:				;***********************************************************************
 6240:				;
 6241:					;**************************************************************
 6242:					;
 6243:					; The following internal locations are used by the math pack
 6244:					; ordering is important and the FP_DIGITS must be bit
 6245:					; addressable
 6246:					;
 6247:					;***************************************************************
 6248:					;
 6249:		N      0028	FP_STATUS	EQU	28H		;NOT USED
 6250:		N      0029	FP_TEMP 	EQU	FP_STATUS+1	;NOT USED
 6251:		N      002A	FP_CARRY	EQU	FP_STATUS+2	;USED FOR BITS
 6252:		N	 23	ADD_IN		BIT	35		;DCMPXZ IN BASIC BACKAGE
 6253:		B	 50	XSIGN		BIT	FP_CARRY.0
 6254:		B	 51	FOUND_RADIX	BIT	FP_CARRY.1
 6255:		B	 52	FIRST_RADIX	BIT	FP_CARRY.2
 6256:		B	 53	DONE_LOAD	BIT	FP_CARRY.3
 6257:		N      002B	FP_DIG12	EQU	FP_CARRY+1
 6258:		N      002C	FP_DIG34	EQU	FP_CARRY+2
 6259:		N      002D	FP_DIG56	EQU	FP_CARRY+3
 6260:		N      002E	FP_DIG78	EQU	FP_CARRY+4
 6261:		N      002F	FP_SIGN 	EQU	FP_CARRY+5
 6262:		B	 78	MSIGN		BIT	FP_SIGN.0

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 114



 Line  I  Addr  Code            Source

 6263:		N      0030	FP_EXP		EQU	FP_CARRY+6
 6264:		N      002B	FP_NIB1 	EQU	FP_DIG12
 6265:		N      002C	FP_NIB2 	EQU	FP_NIB1+1
 6266:		N      002D	FP_NIB3 	EQU	FP_NIB1+2
 6267:		N      002E	FP_NIB4 	EQU	FP_NIB1+3
 6268:		N      002F	FP_NIB5 	EQU	FP_NIB1+4
 6269:		N      0030	FP_NIB6 	EQU	FP_NIB1+5
 6270:		N      0031	FP_NIB7 	EQU	FP_NIB1+6
 6271:		N      0032	FP_NIB8 	EQU	FP_NIB1+7
 6272:		N      0033	FP_ACCX 	EQU	FP_NIB1+8
 6273:		N      0034	FP_ACCC 	EQU	FP_NIB1+9
 6274:		N      0035	FP_ACC1 	EQU	FP_NIB1+10
 6275:		N      0036	FP_ACC2 	EQU	FP_NIB1+11
 6276:		N      0037	FP_ACC3 	EQU	FP_NIB1+12
 6277:		N      0038	FP_ACC4 	EQU	FP_NIB1+13
 6278:		N      0039	FP_ACC5 	EQU	FP_NIB1+14
 6279:		N      003A	FP_ACC6 	EQU	FP_NIB1+15
 6280:		N      003B	FP_ACC7 	EQU	FP_NIB1+16
 6281:		N      003C	FP_ACC8 	EQU	FP_NIB1+17
 6282:		N      003D	FP_ACCS 	EQU	FP_NIB1+18
 6283:					;
 6284:				;	 ORG	 1990H
 6285:					;
 6286:	  196C			OUTPUT:
 6287:	  196C	02 07 11	T_L:	LJMP	TEROT
 6288:					;
 6289:					;
 6290:					;**************************************************************
 6291:					;
 6292:					; The floating point entry points and jump table
 6293:					;
 6294:					;**************************************************************
 6295:					;
 6296:	  196F	21 93		FP_BASE:	AJMP	FLOATING_ADD
 6297:	  1971	21 89		FP_BASE1:	AJMP	FLOATING_SUB
 6298:	  1973	41 43		FP_BASE2:	AJMP	FLOATING_COMP
 6299:	  1975	41 73		FP_BASE3:	AJMP	FLOATING_MUL
 6300:	  1977	41 B0		FP_BASE4:	AJMP	FLOATING_DIV
 6301:	  1979	81 89		FP_BASE5:	AJMP	HEXSCAN
 6302:	  197B	81 C2		FP_BASE6:	AJMP	FLOATING_POINT_INPUT
 6303:	  197D	A1 7A		FP_BASE7:	AJMP	FLOATING_POINT_OUTPUT
 6304:	  197F	C1 F7		FP_BASE8:	AJMP	CONVERT_BINARY_TO_ASCII_STRING
 6305:	  1981	C1 9E		FP_BASE9:	AJMP	CONVERT_ASCII_STRING_TO_BINARY
 6306:	  1983	C1 D3		FP_BASE10:	AJMP	MULNUM10
 6307:	  1985	E1 30		FP_BASE11:	AJMP	HEXOUT
 6308:	  1987	81 B6		FP_BASE12:	AJMP	PUSHR2R0
 6309:					;
 6310:					;
 6311:	  1989			FLOATING_SUB:
 6312:					;
 6313:	  1989	75 A0 01		MOV	P2,#ARG_STACK_PAGE
 6314:	  198C	A8 09			MOV	R0,ARG_STACK
 6315:	  198E	18			DEC	R0		;POINT TO SIGN
 6316:	  198F	E2			MOVX	A,@R0		;READ SIGN
 6317:	  1990	B2 E0			CPL	ACC.0
 6318:	  1992	F2			MOVX	@R0,A

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 115



 Line  I  Addr  Code            Source

 6319:					;
 6320:					;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 6321:					;
 6322:	  1993			FLOATING_ADD:
 6323:					;
 6324:					;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 6325:					;
 6326:					;
 6327:	  1993	91 6A			ACALL	MDES1		;R7=TOS EXP, R6=TOS-1 EXP, R4=TOS SIGN
 6328:								;R3=TOS-1 SIGN, OPERATION IS R1 # R0
 6329:					;
 6330:	  1995	EF			MOV	A,R7		;GET TOS EXPONENT
 6331:	  1996	60 0D			JZ	POP_AND_EXIT	;IF TOS=0 THEN POP AND EXIT
 6332:	  1998	BE 00 12		CJNE	R6,#0,LOAD1	;CLEAR CARRY EXIT IF ZERO
 6333:					;
 6334:					;**************************************************************
 6335:					;
 6336:	  199B			SWAP_AND_EXIT:	; Swap external args and return
 6337:					;
 6338:					;**************************************************************
 6339:					;
 6340:	  199B	91 5E			ACALL	LOAD_POINTERS
 6341:	  199D	7F 06			MOV	R7,#FP_NUMBER_SIZE
 6342:					;
 6343:	  199F	E2		SE1:	MOVX	A,@R0		;SWAP THE ARGUMENTS
 6344:	  19A0	F3			MOVX	@R1,A
 6345:	  19A1	18			DEC	R0
 6346:	  19A2	19			DEC	R1
 6347:	  19A3	DF FA			DJNZ	R7,SE1
 6348:					;
 6349:	  19A5			POP_AND_EXIT:
 6350:					;
 6351:	  19A5	E5 09			MOV	A,ARG_STACK	;POP THE STACK
 6352:	  19A7	24 06			ADD	A,#FP_NUMBER_SIZE
 6353:	  19A9	F5 09			MOV	ARG_STACK,A
 6354:	  19AB	E4			CLR	A
 6355:	  19AC	22			RET
 6356:					;
 6357:					;
 6358:	  19AD	9E		LOAD1:	SUBB	A,R6		;A = ARG 1 EXP - ARG 2 EXP
 6359:	  19AE	8F 30			MOV	FP_EXP,R7	;SAVE EXPONENT AND SIGN
 6360:	  19B0	8C 2F			MOV	FP_SIGN,R4
 6361:	  19B2	50 09			JNC	LOAD2		;ARG1 EXPONENT IS LARGER OR SAME
 6362:	  19B4	8E 30			MOV	FP_EXP,R6
 6363:	  19B6	8B 2F			MOV	FP_SIGN,R3
 6364:	  19B8	F4			CPL	A
 6365:	  19B9	04			INC	A		;COMPENSATE FOR EXP DELTA
 6366:	  19BA	C8			XCH	A,R0		;FORCE R0 TO POINT AT THE LARGEST
 6367:	  19BB	C9			XCH	A,R1		;EXPONENT
 6368:	  19BC	C8			XCH	A,R0
 6369:					;
 6370:	  19BD	FF		LOAD2:	MOV	R7,A		;SAVE THE EXPONENT DELTA IN R7
 6371:	  19BE	C2 23			CLR	ADD_IN
 6372:	  19C0	BD 00 02		CJNE	R5,#0,LOAD21
 6373:	  19C3	D2 23			SETB	ADD_IN
 6374:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 116



 Line  I  Addr  Code            Source

 6375:					; Load the R1 mantissa
 6376:					;
 6377:	  19C5	91 7B		LOAD21: ACALL	LOADR1_MANTISSA ;LOAD THE SMALLEST NUMBER
 6378:					;
 6379:					; Now align the number to the delta exponent
 6380:					; R4 points to the string of the last digits lost
 6381:					;
 6382:	  19C7	BF 0B 00		CJNE	R7,#DIGIT+DIGIT+3,LOAD22
 6383:	  19CA	40 02		LOAD22: JC	LOAD23
 6384:	  19CC	7F 0A			MOV	R7,#DIGIT+DIGIT+2
 6385:					;
 6386:	  19CE	75 2A 00	LOAD23: MOV	FP_CARRY,#00	;CLEAR THE CARRY
 6387:	  19D1	71 BB			ACALL	RIGHT		;SHIFT THE NUMBER
 6388:					;
 6389:					; Set up for addition and subtraction
 6390:					;
 6391:	  19D3	7F 04			MOV	R7,#DIGIT	;LOOP COUNT
 6392:	  19D5	79 2E			MOV	R1,#FP_DIG78
 6393:				;
 6394:				;*****************************************************************************
 6395:				;****** Elektor 2 Patch ******************************************************
 6396:				;****** Floting Point Error, found by D. Mudric and Z. Stojsavljevic *********
 6397:				;
 6398:				;	MOV	A,#9EH
 6399:				;****** Error Number 1
 6400:				;
 6401:				;****** Value in R4 must be complemented with 100D (#9AH), it must be the
 6402:				;****** first complement
 6403:				;
 6404:				;	CLR	C
 6405:				;	SUBB	A,R4
 6406:				;	DA	A
 6407:				;	XCH	A,R4
 6408:				;	JNZ	LOAD24
 6409:				;	MOV	R4,A
 6410:				;****** Error Number 2
 6411:				;
 6412:				;****** With substraction, after reducing both the minuend and the
 6413:				;****** subtrahend to the same exponents, when R4 <> 0, it is obvious
 6414:				;****** that one always has to make a borrowing from the first higher
 6415:				;****** position of the minuend, not as it is stated by the original
 6416:				;****** were it is made only when R4 = 50H
 6417:				;
 6418:				;LOAD24: CJNE	 A,#50H,LOAD25	 ;TEST FOR SUBTRACTION
 6419:				;LOAD25: JNB	 ADD_IN,SUBLP	 ;DO SUBTRACTION IF NO ADD_IN
 6420:				;
 6421:				;*****************************************************************************
 6422:				;****** Proper code starts here: *********************************************
 6423:				;
 6424:	  19D7	74 9A			mov	A,#9AH
 6425:	  19D9	C3			clr	C
 6426:	  19DA	9C			subb	A,R4
 6427:	  19DB	D4			da	A
 6428:	  19DC	CC			xch	A,R4
 6429:	  19DD	30 23 1B		jnb	ADD_IN,SUBLP
 6430:	  19E0	B4 50 00		cjne	A,#50H,LOAD25

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 117



 Line  I  Addr  Code            Source

 6431:				;
 6432:				;****** continue with original code: *****************************************
 6433:				;
 6434:	  19E3	B3		LOAD25: CPL	C		;FLIP CARRY FOR ADDITION
 6435:	  19E4	31 F2			ACALL	ADDLP		;DO ADDITION
 6436:					;
 6437:	  19E6	50 08			JNC	ADD_R
 6438:	  19E8	05 2A			INC	FP_CARRY
 6439:	  19EA	7F 01			MOV	R7,#1
 6440:	  19EC	71 BB			ACALL	RIGHT
 6441:	  19EE	71 72			ACALL	INC_FP_EXP	;SHIFT AND BUMP EXPONENT
 6442:					;
 6443:	  19F0	61 63		ADD_R:	AJMP	STORE_ALIGN_TEST_AND_EXIT
 6444:					;
 6445:	  19F2	E2		ADDLP:	MOVX	A,@R0
 6446:	  19F3	37			ADDC	A,@R1
 6447:	  19F4	D4			DA	A
 6448:	  19F5	F7			MOV	@R1,A
 6449:	  19F6	18			DEC	R0
 6450:	  19F7	19			DEC	R1
 6451:	  19F8	DF F8			DJNZ	R7,ADDLP	;LOOP UNTIL DONE
 6452:	  19FA	22			RET
 6453:					;
 6454:	  19FB	E2		SUBLP:	MOVX	A,@R0		;NOW DO SUBTRACTION
 6455:	  19FC	FE			MOV	R6,A
 6456:	  19FD	E4			CLR	A
 6457:	  19FE	34 99			ADDC	A,#99H
 6458:	  1A00	97			SUBB	A,@R1
 6459:	  1A01	2E			ADD	A,R6
 6460:	  1A02	D4			DA	A
 6461:	  1A03	F7			MOV	@R1,A
 6462:	  1A04	18			DEC	R0
 6463:	  1A05	19			DEC	R1
 6464:	  1A06	DF F3			DJNZ	R7,SUBLP
 6465:	  1A08	40 11			JC	FSUB6
 6466:					;
 6467:					; Need to complement the result and sign because the floating
 6468:					; point accumulator mantissa was larger than the external
 6469:					; memory and their signs were equal.
 6470:					;
 6471:	  1A0A	B2 78			CPL	FP_SIGN.0
 6472:	  1A0C	79 2E			MOV	R1,#FP_DIG78
 6473:	  1A0E	7F 04			MOV	R7,#DIGIT	;LOOP COUNT
 6474:					;
 6475:	  1A10	74 9A		FSUB5:	MOV	A,#9AH
 6476:	  1A12	97			SUBB	A,@R1
 6477:	  1A13	24 00			ADD	A,#0
 6478:	  1A15	D4			DA	A
 6479:	  1A16	F7			MOV	@R1,A
 6480:	  1A17	19			DEC	R1
 6481:	  1A18	B3			CPL	C
 6482:	  1A19	DF F5			DJNZ	R7,FSUB5	;LOOP
 6483:					;
 6484:					; Now see how many zeros their are
 6485:					;
 6486:	  1A1B	78 2B		FSUB6:	MOV	R0,#FP_DIG12

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 118



 Line  I  Addr  Code            Source

 6487:	  1A1D	7F 00			MOV	R7,#0
 6488:					;
 6489:	  1A1F	E6		FSUB7:	MOV	A,@R0
 6490:	  1A20	70 08			JNZ	FSUB8
 6491:	  1A22	0F			INC	R7
 6492:	  1A23	0F			INC	R7
 6493:	  1A24	08			INC	R0
 6494:	  1A25	B8 2F F7		CJNE	R0,#FP_SIGN,FSUB7
 6495:	  1A28	61 AB			AJMP	ZERO_AND_EXIT
 6496:					;
 6497:	  1A2A	B4 10 00	FSUB8:	CJNE	A,#10H,FSUB81
 6498:	  1A2D	50 01		FSUB81: JNC	FSUB9
 6499:	  1A2F	0F			INC	R7
 6500:					;
 6501:					; Now R7 has the number of leading zeros in the FP ACC
 6502:					;
 6503:	  1A30	E5 30		FSUB9:	MOV	A,FP_EXP	;GET THE OLD EXPONENT
 6504:	  1A32	C3			CLR	C
 6505:	  1A33	9F			SUBB	A,R7		;SUBTRACT FROM THE NUMBER OF ZEROS
 6506:	  1A34	60 0B			JZ	FSUB10
 6507:	  1A36	40 09			JC	FSUB10
 6508:					;
 6509:	  1A38	F5 30			MOV	FP_EXP,A	;SAVE THE NEW EXPONENT
 6510:					;
 6511:	  1A3A	71 F5			ACALL	LEFT1		;SHIFT THE FP ACC
 6512:	  1A3C	75 2A 00		MOV	FP_CARRY,#0
 6513:	  1A3F	61 63			AJMP	STORE_ALIGN_TEST_AND_EXIT
 6514:					;
 6515:	  1A41	61 A5		FSUB10: AJMP	UNDERFLOW_AND_EXIT
 6516:					;
 6517:					;***************************************************************
 6518:					;
 6519:	  1A43			FLOATING_COMP:	; Compare two floating point numbers
 6520:						; used for relational operations and is faster
 6521:						; than subtraction. ON RETURN, The carry is set
 6522:						; if ARG1 is > ARG2, else carry is not set
 6523:						; if ARG1 = ARG2, F0 gets set
 6524:					;
 6525:					;***************************************************************
 6526:					;
 6527:	  1A43	91 6A			ACALL	MDES1		;SET UP THE REGISTERS
 6528:	  1A45	E5 09			MOV	A,ARG_STACK
 6529:	  1A47	24 0C			ADD	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 6530:	  1A49	F5 09			MOV	ARG_STACK,A	;POP THE STACK TWICE, CLEAR THE CARRY
 6531:	  1A4B	EE			MOV	A,R6		;CHECK OUT EXPONENTS
 6532:	  1A4C	C2 D5			CLR	F0
 6533:	  1A4E	9F			SUBB	A,R7
 6534:	  1A4F	60 0A			JZ	EXPONENTS_EQUAL
 6535:	  1A51	40 03			JC	ARG1_EXP_IS_LARGER
 6536:					;
 6537:					; Now the ARG2 EXPONENT is > ARG1 EXPONENT
 6538:					;
 6539:	  1A53			SIGNS_DIFFERENT:
 6540:					;
 6541:	  1A53	EB			MOV	A,R3		;SEE IF SIGN OF ARG2 IS POSITIVE
 6542:	  1A54	80 01			SJMP	ARG1_EXP_IS_LARGER1

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 119



 Line  I  Addr  Code            Source

 6543:					;
 6544:	  1A56			ARG1_EXP_IS_LARGER:
 6545:					;
 6546:	  1A56	EC			MOV	A,R4		;GET THE SIGN OF ARG1 EXPONENT
 6547:	  1A57			ARG1_EXP_IS_LARGER1:
 6548:	  1A57	60 01			JZ	ARG1_EXP_IS_LARGER2
 6549:	  1A59	B3			CPL	C
 6550:	  1A5A			ARG1_EXP_IS_LARGER2:
 6551:	  1A5A	22			RET
 6552:					;
 6553:	  1A5B			EXPONENTS_EQUAL:
 6554:					;
 6555:					; First, test the sign, then the mantissa
 6556:					;
 6557:	  1A5B	BD 00 F5		CJNE	R5,#0,SIGNS_DIFFERENT
 6558:					;
 6559:	  1A5E			BOTH_PLUS:
 6560:					;
 6561:	  1A5E	7F 04			MOV	R7,#DIGIT	;POINT AT MS DIGIT
 6562:	  1A60	18			DEC	R0
 6563:	  1A61	18			DEC	R0
 6564:	  1A62	18			DEC	R0
 6565:	  1A63	19			DEC	R1
 6566:	  1A64	19			DEC	R1
 6567:	  1A65	19			DEC	R1
 6568:					;
 6569:					; Now do the compare
 6570:					;
 6571:	  1A66	E2		CLOOP:	MOVX	A,@R0
 6572:	  1A67	FE			MOV	R6,A
 6573:	  1A68	E3			MOVX	A,@R1
 6574:	  1A69	9E			SUBB	A,R6
 6575:	  1A6A	70 EA			JNZ	ARG1_EXP_IS_LARGER
 6576:	  1A6C	08			INC	R0
 6577:	  1A6D	09			INC	R1
 6578:	  1A6E	DF F6			DJNZ	R7,CLOOP
 6579:					;
 6580:					; If here, the numbers are the same, the carry is cleared
 6581:					;
 6582:	  1A70	D2 D5			SETB	F0
 6583:	  1A72	22			RET			;EXIT WITH EQUAL
 6584:					;
 6585:				;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 6586:				;
 6587:	  1A73			FLOATING_MUL:	; Floating point multiply
 6588:				;
 6589:				;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 6590:				;
 6591:	  1A73	91 68			ACALL	MUL_DIV_EXP_AND_SIGN
 6592:					;
 6593:					; check for zero exponents
 6594:					;
 6595:	  1A75	BE 00 02		CJNE	R6,#00,FMUL1	;ARG 2 EXP ZERO?
 6596:	  1A78	61 AB		FMUL0:	AJMP	ZERO_AND_EXIT
 6597:					;
 6598:					; calculate the exponent

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 120



 Line  I  Addr  Code            Source

 6599:					;
 6600:	  1A7A	8D 2F		FMUL1:	MOV	FP_SIGN,R5	;SAVE THE SIGN, IN CASE OF FAILURE
 6601:					;
 6602:	  1A7C	EF			MOV	A,R7
 6603:	  1A7D	60 F9			JZ	FMUL0
 6604:	  1A7F	2E			ADD	A,R6		;ADD THE EXPONENTS
 6605:	  1A80	20 E7 05		JB	ACC.7,FMUL_OVER
 6606:	  1A83	10 D7 08		JBC	CY,FMUL21	;SEE IF CARRY IS SET
 6607:					;
 6608:	  1A86	61 A5			AJMP	UNDERFLOW_AND_EXIT
 6609:					;
 6610:	  1A88			FMUL_OVER:
 6611:					;
 6612:	  1A88	50 02			JNC	FMUL2		;OK IF SET
 6613:					;
 6614:	  1A8A	61 94		FOV:	AJMP	OVERFLOW_AND_EXIT
 6615:				;*****************************************************************************
 6616:				;****** Wulf 1 Bugfix 1 ******************************************************
 6617:				;****** Multiplication Error, found by D. Wulf *******************************
 6618:				;
 6619:				; FMUL2: SUBB	 A,#129 	 ;SUBTRACT THE EXPONENT BIAS
 6620:				;
 6621:				;*****************************************************************************
 6622:				;****** Proper code starts here: *********************************************
 6623:				;
 6624:	  1A8C	D2 28		FMUL2:	setb	mul_underflow	;Flag of multiplication limit case
 6625:	  1A8E	94 83		FMUL21: subb	A,#83H		;exp. multipl. results are within the limits
 6626:	  1A90	04			inc	A		;Correct SUBB 83H
 6627:	  1A91	04			inc	A		;to original SUBB 81H
 6628:	  1A92	40 02			jc     NMARK_L		;Limit case
 6629:	  1A94	C2 28			clr	mul_underflow	;No limit case
 6630:	  1A96			NMARK_L:
 6631:				;
 6632:				;****** continue with original code: *****************************************
 6633:				;
 6634:	  1A96	FE			MOV	R6,A		;SAVE IT FOR LATER
 6635:					;
 6636:					; Unpack and load R0
 6637:					;
 6638:	  1A97	71 7E			ACALL	UNPACK_R0
 6639:					;
 6640:					; Now set up for loop multiply
 6641:					;
 6642:	  1A99	7B 04			MOV	R3,#DIGIT
 6643:	  1A9B	AC 01			MOV	R4,R1B0
 6644:					;
 6645:					; Now, do the multiply and accumulate the product
 6646:					;
 6647:	  1A9D	8C 01		FMUL3:	MOV	R1B0,R4
 6648:	  1A9F	E3			MOVX	A,@R1
 6649:	  1AA0	FA			MOV	R2,A
 6650:	  1AA1	91 2B			ACALL	MUL_NIBBLE
 6651:					;
 6652:	  1AA3	EA			MOV	A,R2
 6653:	  1AA4	C4			SWAP	A
 6654:	  1AA5	91 2B			ACALL	MUL_NIBBLE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 121



 Line  I  Addr  Code            Source

 6655:	  1AA7	1C			DEC	R4
 6656:	  1AA8	DB F3			DJNZ	R3,FMUL3
 6657:					;
 6658:					; Now, pack and restore the sign
 6659:					;
 6660:	  1AAA	8E 30			MOV	FP_EXP,R6
 6661:	  1AAC	8D 2F			MOV	FP_SIGN,R5
 6662:	  1AAE	61 11			AJMP	PACK		;FINISH IT OFF
 6663:					;
 6664:					;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 6665:					;
 6666:	  1AB0			FLOATING_DIV:
 6667:					;
 6668:					;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 6669:					;
 6670:	  1AB0	91 6A			ACALL	MDES1
 6671:					;
 6672:					; Check the exponents
 6673:					;
 6674:	  1AB2	8D 2F			MOV	FP_SIGN,R5	;SAVE THE SIGN
 6675:	  1AB4	BF 00 06		CJNE	R7,#0,DIV0	;CLEARS THE CARRY
 6676:	  1AB7	71 94			ACALL	OVERFLOW_AND_EXIT
 6677:	  1AB9	E4			CLR	A
 6678:	  1ABA	D2 E3			SETB	ACC.ZERO_DIVIDE
 6679:	  1ABC	22			RET
 6680:					;
 6681:	  1ABD	EE		DIV0:	MOV	A,R6		;GET EXPONENT
 6682:	  1ABE	60 B8			JZ	FMUL0		;EXIT IF ZERO
 6683:	  1AC0	9F			SUBB	A,R7		;DELTA EXPONENT
 6684:	  1AC1	20 E7 04		JB	ACC.7,D_UNDER
 6685:	  1AC4	50 04			JNC	DIV3
 6686:	  1AC6	61 A5			AJMP	UNDERFLOW_AND_EXIT
 6687:					;
 6688:	  1AC8	50 C0		D_UNDER:JNC	FOV
 6689:					;
 6690:	  1ACA	24 81		DIV3:	ADD	A,#129		;CORRECTLY BIAS THE EXPONENT
 6691:	  1ACC	F5 30			MOV	FP_EXP,A	;SAVE THE EXPONENT
 6692:	  1ACE	91 7B			ACALL	LOADR1_MANTISSA ;LOAD THE DIVIDED
 6693:					;
 6694:	  1AD0	7A 34			MOV	R2,#FP_ACCC	;SAVE LOCATION
 6695:	  1AD2	AB 00			MOV	R3,R0B0 	;SAVE POINTER IN R3
 6696:	  1AD4	75 2A 00		MOV	FP_CARRY,#0	;ZERO CARRY BYTE
 6697:					;
 6698:	  1AD7	7D FF		DIV4:	MOV	R5,#0FFH	;LOOP COUNT
 6699:	  1AD9	D3			SETB	C
 6700:					;
 6701:	  1ADA	8B 00		DIV5:	MOV	R0B0,R3 	;RESTORE THE EXTERNAL POINTER
 6702:	  1ADC	79 2E			MOV	R1,#FP_DIG78	;SET UP INTERNAL POINTER
 6703:	  1ADE	7F 04			MOV	R7,#DIGIT	;LOOP COUNT
 6704:	  1AE0	50 17			JNC	DIV7		;EXIT IF NO CARRY
 6705:					;
 6706:	  1AE2	E2		DIV6:	MOVX	A,@R0		;DO ACCUMLATION
 6707:	  1AE3	FE			MOV	R6,A
 6708:	  1AE4	E4			CLR	A
 6709:	  1AE5	34 99			ADDC	A,#99H
 6710:	  1AE7	9E			SUBB	A,R6

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 122



 Line  I  Addr  Code            Source

 6711:	  1AE8	27			ADD	A,@R1
 6712:	  1AE9	D4			DA	A
 6713:	  1AEA	F7			MOV	@R1,A
 6714:	  1AEB	18			DEC	R0
 6715:	  1AEC	19			DEC	R1
 6716:	  1AED	DF F3			DJNZ	R7,DIV6 	;LOOP
 6717:					;
 6718:	  1AEF	0D			INC	R5		;SUBTRACT COUNTER
 6719:	  1AF0	40 E8			JC	DIV5		;KEEP LOOPING IF CARRY
 6720:	  1AF2	E7			MOV	A,@R1		;GET CARRY
 6721:	  1AF3	94 01			SUBB	A,#1		;CARRY IS CLEARED
 6722:	  1AF5	F7			MOV	@R1,A		;SAVE CARRY DIGIT
 6723:	  1AF6	B3			CPL	C
 6724:	  1AF7	80 E1			SJMP	DIV5		;LOOP
 6725:					;
 6726:					; Restore the result if carry was found
 6727:					;
 6728:	  1AF9	31 F2		DIV7:	ACALL	ADDLP		;ADD NUMBER BACK
 6729:	  1AFB	77 00			MOV	@R1,#0		;CLEAR CARRY
 6730:	  1AFD	8A 00			MOV	R0B0,R2 	;GET SAVE COUNTER
 6731:	  1AFF	A6 05			MOV	@R0,5		;SAVE COUNT BYTE
 6732:					;
 6733:	  1B01	0A			INC	R2		;ADJUST SAVE COUNTER
 6734:	  1B02	7F 01			MOV	R7,#1		;BUMP DIVIDEND
 6735:	  1B04	71 F3			ACALL	LEFT
 6736:	  1B06	BA 3E CE		CJNE	R2,#FP_ACC8+2,DIV4
 6737:					;
 6738:	  1B09	D5 30 02		DJNZ	FP_EXP,DIV8
 6739:	  1B0C	61 A5			AJMP	UNDERFLOW_AND_EXIT
 6740:					;
 6741:	  1B0E	75 2A 00	DIV8:	MOV	FP_CARRY,#0
 6742:					;
 6743:					;***************************************************************
 6744:					;
 6745:	  1B11			PACK:	; Pack the mantissa
 6746:					;
 6747:					;***************************************************************
 6748:					;
 6749:					; First, set up the pointers
 6750:					;
 6751:	  1B11	78 34			MOV	R0,#FP_ACCC
 6752:	  1B13	E6			MOV	A,@R0		;GET FP_ACCC
 6753:	  1B14	FE			MOV	R6,A		;SAVE FOR ZERO COUNT
 6754:	  1B15	60 03			JZ	PACK0		;JUMP OVER IF ZERO
 6755:	  1B17	71 72			ACALL	INC_FP_EXP	;BUMP THE EXPONENT
 6756:	  1B19	18			DEC	R0
 6757:					;
 6758:	  1B1A	08		PACK0:	INC	R0		;POINT AT FP_ACC1
 6759:					;
 6760:	  1B1B	74 08		PACK1:	MOV	A,#8		;ADJUST NIBBLE POINTER
 6761:	  1B1D	F9			MOV	R1,A
 6762:	  1B1E	28			ADD	A,R0
 6763:	  1B1F	F8			MOV	R0,A
 6764:	  1B20	B6 05 00		CJNE	@R0,#5,PACK11	;SEE IF ADJUSTING NEEDED
 6765:	  1B23	40 13		PACK11: JC	PACK31
 6766:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 123



 Line  I  Addr  Code            Source

 6767:	  1B25	D3		PACK2:	SETB	C
 6768:	  1B26	E4			CLR	A
 6769:	  1B27	18			DEC	R0
 6770:	  1B28	36			ADDC	A,@R0
 6771:	  1B29	D4			DA	A
 6772:	  1B2A	D6			XCHD	A,@R0		;SAVE THE VALUE
 6773:	  1B2B	30 E4 09		JNB	ACC.4,PACK3
 6774:	  1B2E	D9 F5			DJNZ	R1,PACK2
 6775:					;
 6776:	  1B30	18			DEC	R0
 6777:	  1B31	76 01			MOV	@R0,#1
 6778:	  1B33	71 72			ACALL	INC_FP_EXP
 6779:	  1B35	80 18			SJMP	PACK4
 6780:					;
 6781:	  1B37	19		PACK3:	DEC	R1
 6782:	  1B38	E9		PACK31: MOV	A,R1
 6783:	  1B39	C3			CLR	C
 6784:	  1B3A	C8			XCH	A,R0
 6785:	  1B3B	98			SUBB	A,R0
 6786:	  1B3C	F8			MOV	R0,A
 6787:				;
 6788:				;*****************************************************************************
 6789:				;****** Wulf 1 Bugfix 2 ******************************************************
 6790:				;****** Multiplication Error, found by D. Wulf *******************************
 6791:				;
 6792:	  1B3D	30 28 0F		jnb	mul_underflow,PACK4
 6793:	  1B40	C2 28			clr	mul_underflow
 6794:	  1B42	E5 30			mov	A,FP_EXP	;test of exceeding in limit case
 6795:	  1B44	60 07			jz	UNDER_MD	;message about underflow
 6796:	  1B46	F4			cpl	a		;test of exceeding in limit case
 6797:	  1B47	60 04			jz	UNDER_MD	;message about underflow
 6798:	  1B49	F4			cpl	a		;restore original exp
 6799:	  1B4A	B4 01 02		cjne	a,#1,pack4	;jump if not outer limit
 6800:	  1B4D			UNDER_MD:
 6801:	  1B4D	61 A5			ajmp	UNDERFLOW_AND_EXIT
 6802:				;
 6803:				;****** continue with original code: *****************************************
 6804:				;
 6805:	  1B4F	79 2B		PACK4:	MOV	R1,#FP_DIG12
 6806:					;
 6807:					; Now, pack
 6808:					;
 6809:	  1B51	E6		PLOOP:	MOV	A,@R0
 6810:	  1B52	C4			SWAP	A		;FLIP THE DIGITS
 6811:	  1B53	08			INC	R0
 6812:	  1B54	D6			XCHD	A,@R0
 6813:	  1B55	42 06			ORL	6,A		;ACCUMULATE THE OR'ED DIGITS
 6814:	  1B57	F7			MOV	@R1,A
 6815:	  1B58	08			INC	R0
 6816:	  1B59	09			INC	R1
 6817:	  1B5A	B9 2F F4		CJNE	R1,#FP_SIGN,PLOOP
 6818:	  1B5D	EE			MOV	A,R6
 6819:	  1B5E	70 03			JNZ	STORE_ALIGN_TEST_AND_EXIT
 6820:	  1B60	75 30 00		MOV	FP_EXP,#0	;ZERO EXPONENT
 6821:					;
 6822:					;**************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 124



 Line  I  Addr  Code            Source

 6823:					;
 6824:	  1B63			STORE_ALIGN_TEST_AND_EXIT:	;Save the number align carry and exit
 6825:					;
 6826:					;**************************************************************
 6827:					;
 6828:	  1B63	91 5E			ACALL	LOAD_POINTERS
 6829:	  1B65	89 09			MOV	ARG_STACK,R1	;SET UP THE NEW STACK
 6830:	  1B67	78 30			MOV	R0,#FP_EXP
 6831:					;
 6832:					; Now load the numbers
 6833:					;
 6834:	  1B69	E6		STORE2: MOV	A,@R0
 6835:	  1B6A	F3			MOVX	@R1,A		;SAVE THE NUMBER
 6836:	  1B6B	18			DEC	R0
 6837:	  1B6C	19			DEC	R1
 6838:	  1B6D	B8 2A F9		CJNE	R0,#FP_CARRY,STORE2
 6839:					;
 6840:	  1B70	E4			CLR	A		;NO ERRORS
 6841:					;
 6842:	  1B71	22		PRET:	RET			;EXIT
 6843:					;
 6844:	  1B72			INC_FP_EXP:
 6845:					;
 6846:	  1B72	05 30			INC	FP_EXP
 6847:	  1B74	E5 30			MOV	A,FP_EXP
 6848:	  1B76	70 F9			JNZ	PRET		;EXIT IF NOT ZERO
 6849:	  1B78	D0 E0			POP	ACC		;WASTE THE CALLING STACK
 6850:	  1B7A	D0 E0			POP	ACC
 6851:	  1B7C	61 94			AJMP	OVERFLOW_AND_EXIT
 6852:				;
 6853:				;***********************************************************************
 6854:				;
 6855:	  1B7E			UNPACK_R0:	; Unpack BCD digits and load into nibble locations
 6856:				;
 6857:				;***********************************************************************
 6858:					;
 6859:	  1B7E	C0 01			PUSH	R1B0
 6860:	  1B80	79 32			MOV	R1,#FP_NIB8
 6861:					;
 6862:	  1B82	E2		ULOOP:	MOVX	A,@R0
 6863:	  1B83	54 0F			ANL	A,#0FH
 6864:	  1B85	F7			MOV	@R1,A		;SAVE THE NIBBLE
 6865:	  1B86	E2			MOVX	A,@R0
 6866:	  1B87	C4			SWAP	A
 6867:	  1B88	54 0F			ANL	A,#0FH
 6868:	  1B8A	19			DEC	R1
 6869:	  1B8B	F7			MOV	@R1,A		;SAVE THE NIBBLE AGAIN
 6870:	  1B8C	18			DEC	R0
 6871:	  1B8D	19			DEC	R1
 6872:	  1B8E	B9 2A F1		CJNE	R1,#FP_NIB1-1,ULOOP
 6873:					;
 6874:	  1B91	D0 01			POP	R1B0
 6875:					;
 6876:	  1B93	22		LOAD7:	RET
 6877:					;
 6878:					;**************************************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 125



 Line  I  Addr  Code            Source

 6879:					;
 6880:	  1B94			OVERFLOW_AND_EXIT:	;LOAD 99999999 E+127,  SET OV BIT, AND EXIT
 6881:					;
 6882:					;**************************************************************
 6883:					;
 6884:	  1B94	78 2E			MOV	R0,#FP_DIG78
 6885:	  1B96	74 99			MOV	A,#99H
 6886:					;
 6887:	  1B98	F6		OVE1:	MOV	@R0,A
 6888:	  1B99	18			DEC	R0
 6889:	  1B9A	B8 2A FB		CJNE	R0,#FP_CARRY,OVE1
 6890:					;
 6891:	  1B9D	75 30 FF		MOV	FP_EXP,#0FFH
 6892:	  1BA0	71 63			ACALL	STORE_ALIGN_TEST_AND_EXIT
 6893:					;
 6894:	  1BA2	D2 E1			SETB	ACC.OVERFLOW
 6895:	  1BA4	22			RET
 6896:					;
 6897:					;**************************************************************
 6898:					;
 6899:	  1BA5			UNDERFLOW_AND_EXIT:	;LOAD 0, SET UF BIT, AND EXIT
 6900:					;
 6901:					;**************************************************************
 6902:					;
 6903:	  1BA5	71 AB			ACALL	ZERO_AND_EXIT
 6904:	  1BA7	E4			CLR	A
 6905:	  1BA8	D2 E0			SETB	ACC.UNDERFLOW
 6906:	  1BAA	22			RET
 6907:					;
 6908:					;**************************************************************
 6909:					;
 6910:	  1BAB			ZERO_AND_EXIT:		;LOAD 0, SET ZERO BIT, AND EXIT
 6911:					;
 6912:					;**************************************************************
 6913:					;
 6914:	  1BAB	71 B2			ACALL	FP_CLEAR
 6915:	  1BAD	71 63			ACALL	STORE_ALIGN_TEST_AND_EXIT
 6916:	  1BAF	D2 E2			SETB	ACC.ZERO
 6917:	  1BB1	22			RET			;EXIT
 6918:					;
 6919:					;**************************************************************
 6920:					;
 6921:	  1BB2			FP_CLEAR:
 6922:					;
 6923:					; Clear internal storage
 6924:					;
 6925:					;**************************************************************
 6926:					;
 6927:	  1BB2	E4			CLR	A
 6928:	  1BB3	78 3D			MOV	R0,#FP_ACC8+1
 6929:					;
 6930:	  1BB5	F6		FPC1:	MOV	@R0,A
 6931:	  1BB6	18			DEC	R0
 6932:	  1BB7	B8 29 FB		CJNE	R0,#FP_TEMP,FPC1
 6933:	  1BBA	22			RET
 6934:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 126



 Line  I  Addr  Code            Source

 6935:					;**************************************************************
 6936:					;
 6937:	  1BBB			RIGHT:	; Shift ACCUMULATOR RIGHT the number of nibbles in R7
 6938:					; Save the shifted values in R4 if SAVE_ROUND is set
 6939:					;
 6940:					;**************************************************************
 6941:					;
 6942:	  1BBB	7C 00			MOV	R4,#0		;IN CASE OF NO SHIFT
 6943:					;
 6944:	  1BBD	C3		RIGHT1: CLR	C
 6945:	  1BBE	EF		RIGHT2: MOV	A,R7		;GET THE DIGITS TO SHIFT
 6946:	  1BBF	60 22			JZ	RIGHTL1 	;EXIT IF ZERO
 6947:	  1BC1	94 02			SUBB	A,#2		;TWO TO DO?
 6948:	  1BC3	50 1F			JNC	RIGHT5		;SHIFT TWO NIBBLES
 6949:					;
 6950:					; Swap one nibble then exit
 6951:					;
 6952:	  1BC5	C0 00		RIGHT3: PUSH	R0B0		;SAVE POINTER REGISTER
 6953:	  1BC7	C0 01			PUSH	R1B0
 6954:					;
 6955:	  1BC9	79 2E			MOV	R1,#FP_DIG78	;LOAD THE POINTERS
 6956:	  1BCB	78 2D			MOV	R0,#FP_DIG56
 6957:	  1BCD	EC			MOV	A,R4		;GET THE OVERFLOW REGISTER
 6958:	  1BCE	D7			XCHD	A,@R1		;GET DIGIT 8
 6959:	  1BCF	C4			SWAP	A		;FLIP FOR LOAD
 6960:	  1BD0	FC			MOV	R4,A
 6961:					;
 6962:	  1BD1	E7		RIGHTL: MOV	A,@R1		;GET THE LOW ORDER BYTE
 6963:	  1BD2	D6			XCHD	A,@R0		;SWAP NIBBLES
 6964:	  1BD3	C4			SWAP	A		;FLIP FOR STORE
 6965:	  1BD4	F7			MOV	@R1,A		;SAVE THE DIGITS
 6966:	  1BD5	18			DEC	R0		;BUMP THE POINTERS
 6967:	  1BD6	19			DEC	R1
 6968:	  1BD7	B9 2A F7		CJNE	R1,#FP_DIG12-1,RIGHTL	;LOOP
 6969:					;
 6970:	  1BDA	E7			MOV	A,@R1		;ACC = CH8
 6971:	  1BDB	C4			SWAP	A		;ACC = 8CH
 6972:	  1BDC	54 0F			ANL	A,#0FH		;ACC = 0CH
 6973:	  1BDE	F7			MOV	@R1,A		;CARRY DONE
 6974:	  1BDF	D0 01			POP	R1B0		;EXIT
 6975:	  1BE1	D0 00			POP	R0B0		;RESTORE REGISTER
 6976:	  1BE3	22		RIGHTL1:RET
 6977:					;
 6978:	  1BE4	FF		RIGHT5: MOV	R7,A		;SAVE THE NEW SHIFT NUMBER
 6979:	  1BE5	E4			CLR	A
 6980:	  1BE6	C5 2A			XCH	A,FP_CARRY	;SWAP THE NIBBLES
 6981:	  1BE8	C5 2B			XCH	A,FP_DIG12
 6982:	  1BEA	C5 2C			XCH	A,FP_DIG34
 6983:	  1BEC	C5 2D			XCH	A,FP_DIG56
 6984:	  1BEE	C5 2E			XCH	A,FP_DIG78
 6985:	  1BF0	FC			MOV	R4,A		;SAVE THE LAST DIGIT SHIFTED
 6986:	  1BF1	80 CB			SJMP	RIGHT2
 6987:					;
 6988:					;***************************************************************
 6989:					;
 6990:	  1BF3			LEFT:	; Shift ACCUMULATOR LEFT the number of nibbles in R7

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 127



 Line  I  Addr  Code            Source

 6991:					;
 6992:					;***************************************************************
 6993:					;
 6994:	  1BF3	7C 00			MOV	R4,#00H 	;CLEAR FOR SOME ENTRYS
 6995:					;
 6996:	  1BF5	C3		LEFT1:	CLR	C
 6997:	  1BF6	EF		LEFT2:	MOV	A,R7		;GET SHIFT VALUE
 6998:	  1BF7	60 22			JZ	LEFTL1		;EXIT IF ZERO
 6999:	  1BF9	94 02			SUBB	A,#2		;SEE HOW MANY BYTES TO SHIFT
 7000:	  1BFB	50 1F			JNC	LEFT5
 7001:					;
 7002:	  1BFD	C0 00		LEFT3:	PUSH	R0B0		;SAVE POINTER
 7003:	  1BFF	C0 01			PUSH	R1B0
 7004:	  1C01	78 2A			MOV	R0,#FP_CARRY
 7005:	  1C03	79 2B			MOV	R1,#FP_DIG12
 7006:					;
 7007:	  1C05	E6			MOV	A,@R0		;ACC=CHCL
 7008:	  1C06	C4			SWAP	A		;ACC = CLCH
 7009:	  1C07	F6			MOV	@R0,A		;ACC = CLCH, @R0 = CLCH
 7010:					;
 7011:	  1C08	E7		LEFTL:	MOV	A,@R1		;DIG 12
 7012:	  1C09	C4			SWAP	A		;DIG 21
 7013:	  1C0A	D6			XCHD	A,@R0
 7014:	  1C0B	F7			MOV	@R1,A		;SAVE IT
 7015:	  1C0C	08			INC	R0		;BUMP POINTERS
 7016:	  1C0D	09			INC	R1
 7017:	  1C0E	B8 2E F7		CJNE	R0,#FP_DIG78,LEFTL
 7018:					;
 7019:	  1C11	EC			MOV	A,R4
 7020:	  1C12	C4			SWAP	A
 7021:	  1C13	D6			XCHD	A,@R0
 7022:	  1C14	54 F0			ANL	A,#0F0H
 7023:	  1C16	FC			MOV	R4,A
 7024:					;
 7025:	  1C17	D0 01			POP	R1B0
 7026:	  1C19	D0 00			POP	R0B0		;RESTORE
 7027:	  1C1B	22		LEFTL1: RET			;DONE
 7028:					;
 7029:	  1C1C	FF		LEFT5:	MOV	R7,A		;RESTORE COUNT
 7030:	  1C1D	E4			CLR	A
 7031:	  1C1E	CC			XCH	A,R4		;GET THE RESTORATION BYTE
 7032:	  1C1F	C5 2E			XCH	A,FP_DIG78	;DO THE SWAP
 7033:	  1C21	C5 2D			XCH	A,FP_DIG56
 7034:	  1C23	C5 2C			XCH	A,FP_DIG34
 7035:	  1C25	C5 2B			XCH	A,FP_DIG12
 7036:	  1C27	C5 2A			XCH	A,FP_CARRY
 7037:	  1C29	80 CB			SJMP	LEFT2
 7038:					;
 7039:	  1C2B			MUL_NIBBLE:
 7040:					;
 7041:					; Multiply the nibble in R7 by the FP_NIB locations
 7042:					; accumulate the product in FP_ACC
 7043:					;
 7044:					; Set up the pointers for multiplication
 7045:					;
 7046:	  1C2B	54 0F			ANL	A,#0FH		;STRIP OFF MS NIBBLE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 128



 Line  I  Addr  Code            Source

 7047:	  1C2D	FF			MOV	R7,A
 7048:	  1C2E	78 3C			MOV	R0,#FP_ACC8
 7049:	  1C30	79 32			MOV	R1,#FP_NIB8
 7050:	  1C32	E4			CLR	A
 7051:	  1C33	F5 33			MOV	FP_ACCX,A
 7052:					;
 7053:	  1C35	18		MNLOOP: DEC	R0		;BUMP POINTER TO PROPAGATE CARRY
 7054:	  1C36	26			ADD	A,@R0		;ATTEMPT TO FORCE CARRY
 7055:	  1C37	D4			DA	A		;BCD ADJUST
 7056:	  1C38	30 E4 03		JNB	ACC.4,MNL0	;DON'T ADJUST IF NO NEED
 7057:	  1C3B	18			DEC	R0		;PROPAGATE CARRY TO THE NEXT DIGIT
 7058:	  1C3C	06			INC	@R0		;DO THE ADJUSTING
 7059:	  1C3D	08			INC	R0		;RESTORE R0
 7060:					;
 7061:	  1C3E	D6		MNL0:	XCHD	A,@R0		;RESTORE INITIAL NUMBER
 7062:	  1C3F	8F F0			MOV	B,R7		;GET THE NUBBLE TO MULTIPLY
 7063:	  1C41	E7			MOV	A,@R1		;GET THE OTHER NIBBLE
 7064:	  1C42	A4			MUL	AB		;DO THE MULTIPLY
 7065:	  1C43	75 F0 0A		MOV	B,#10		;NOW BCD ADJUST
 7066:	  1C46	84			DIV	AB
 7067:	  1C47	C5 F0			XCH	A,B		;GET THE REMAINDER
 7068:	  1C49	26			ADD	A,@R0		;PROPAGATE THE PARTIAL PRODUCTS
 7069:	  1C4A	D4			DA	A		;BCD ADJUST
 7070:	  1C4B	30 E4 02		JNB	ACC.4,MNL1	;PROPAGATE PARTIAL PRODUCT CARRY
 7071:	  1C4E	05 F0			INC	B
 7072:					;
 7073:	  1C50	08		MNL1:	INC	R0
 7074:	  1C51	D6			XCHD	A,@R0		;SAVE THE NEW PRODUCT
 7075:	  1C52	18			DEC	R0
 7076:	  1C53	E5 F0			MOV	A,B		;GET BACK THE QUOTIENT
 7077:	  1C55	19			DEC	R1
 7078:	  1C56	B9 2A DC		CJNE	R1,#FP_NIB1-1,MNLOOP
 7079:					;
 7080:	  1C59	25 33			ADD	A,FP_ACCX	;GET THE OVERFLOW
 7081:	  1C5B	D4			DA	A		;ADJUST
 7082:	  1C5C	F6			MOV	@R0,A		;SAVE IT
 7083:	  1C5D	22			RET			;EXIT
 7084:					;
 7085:					;***************************************************************
 7086:					;
 7087:	  1C5E			LOAD_POINTERS:	; Load the ARG_STACK into R0 and bump R1
 7088:					;
 7089:					;***************************************************************
 7090:					;
 7091:	  1C5E	75 A0 01		MOV	P2,#ARG_STACK_PAGE
 7092:	  1C61	A8 09			MOV	R0,ARG_STACK
 7093:	  1C63	74 06			MOV	A,#FP_NUMBER_SIZE
 7094:	  1C65	28			ADD	A,R0
 7095:	  1C66	F9			MOV	R1,A
 7096:	  1C67	22			RET
 7097:					;
 7098:					;***************************************************************
 7099:					;
 7100:	  1C68			MUL_DIV_EXP_AND_SIGN:
 7101:					;
 7102:					; Load the sign into R7, R6. R5 gets the sign for

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 129



 Line  I  Addr  Code            Source

 7103:					; multiply and divide.
 7104:					;
 7105:					;***************************************************************
 7106:					;
 7107:	  1C68	71 B2			ACALL	FP_CLEAR	;CLEAR INTERNAL MEMORY
 7108:					;
 7109:	  1C6A	91 5E		MDES1:	ACALL	LOAD_POINTERS	;LOAD REGISTERS
 7110:	  1C6C	E2			MOVX	A,@R0		;ARG 1 EXP
 7111:	  1C6D	FF			MOV	R7,A		;SAVED IN R7
 7112:	  1C6E	E3			MOVX	A,@R1		;ARG 2 EXP
 7113:	  1C6F	FE			MOV	R6,A		;SAVED IN R6
 7114:	  1C70	18			DEC	R0		;BUMP POINTERS TO SIGN
 7115:	  1C71	19			DEC	R1
 7116:	  1C72	E2			MOVX	A,@R0		;GET THE SIGN
 7117:	  1C73	FC			MOV	R4,A		;SIGN OF ARG1
 7118:	  1C74	E3			MOVX	A,@R1		;GET SIGN OF NEXT ARG
 7119:	  1C75	FB			MOV	R3,A		;SIGN OF ARG2
 7120:	  1C76	6C			XRL	A,R4		;ACC GETS THE NEW SIGN
 7121:	  1C77	FD			MOV	R5,A		;R5 GETS THE NEW SIGN
 7122:					;
 7123:					; Bump the pointers to point at the LS digit
 7124:					;
 7125:	  1C78	18			DEC	R0
 7126:	  1C79	19			DEC	R1
 7127:					;
 7128:	  1C7A	22			RET
 7129:					;
 7130:					;***************************************************************
 7131:					;
 7132:	  1C7B			LOADR1_MANTISSA:
 7133:					;
 7134:					; Load the mantissa of R0 into FP_Digits
 7135:					;
 7136:					;***************************************************************
 7137:					;
 7138:	  1C7B	C0 00			PUSH	R0B0		;SAVE REGISTER 1
 7139:	  1C7D	78 2E			MOV	R0,#FP_DIG78	;SET UP THE POINTER
 7140:					;
 7141:	  1C7F	E3		LOADR1: MOVX	A,@R1
 7142:	  1C80	F6			MOV	@R0,A
 7143:	  1C81	19			DEC	R1
 7144:	  1C82	18			DEC	R0
 7145:	  1C83	B8 2A F9		CJNE	R0,#FP_CARRY,LOADR1
 7146:					;
 7147:	  1C86	D0 00			POP	R0B0
 7148:	  1C88	22			RET
 7149:					;
 7150:					;***************************************************************
 7151:					;
 7152:	  1C89			HEXSCAN:	; Scan a string to determine if it is a hex number
 7153:						; set carry if hex, else carry = 0
 7154:					;
 7155:					;***************************************************************
 7156:					;
 7157:	  1C89	B1 5F			ACALL	GET_DPTR_CHARACTER
 7158:	  1C8B	C0 83			PUSH	DPH

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 130



 Line  I  Addr  Code            Source

 7159:	  1C8D	C0 82			PUSH	DPL		;SAVE THE POINTER
 7160:					;
 7161:	  1C8F	E0		HEXSC1: MOVX	A,@DPTR 	;GET THE CHARACTER
 7162:	  1C90	F1 ED			ACALL	DIGIT_CHECK	;SEE IF A DIGIT
 7163:	  1C92	40 12			JC	HS1		;CONTINUE IF A DIGIT
 7164:	  1C94	91 A9			ACALL	HEX_CHECK	;SEE IF HEX
 7165:	  1C96	40 0E			JC	HS1
 7166:					;
 7167:	  1C98	C2 E5			CLR	ACC.5		;NO LOWER CASE
 7168:	  1C9A	B4 48 03		CJNE	A,#'H',HEXDON
 7169:	  1C9D	D3			SETB	C
 7170:	  1C9E	80 01			SJMP	HEXDO1		;NUMBER IS VALID HEX, MAYBE
 7171:					;
 7172:	  1CA0	C3		HEXDON: CLR	C
 7173:					;
 7174:	  1CA1	D0 82		HEXDO1: POP	DPL		;RESTORE POINTER
 7175:	  1CA3	D0 83			POP	DPH
 7176:	  1CA5	22			RET
 7177:					;
 7178:	  1CA6	A3		HS1:	INC	DPTR		;BUMP TO NEXT CHARACTER
 7179:	  1CA7	80 E6			SJMP	HEXSC1		;LOOP
 7180:					;
 7181:	  1CA9			HEX_CHECK:	;CHECK FOR A VALID ASCII HEX, SET CARRY IF FOUND
 7182:					;
 7183:	  1CA9	C2 E5			CLR	ACC.5		;WASTE LOWER CASE
 7184:	  1CAB	B4 47 00		CJNE	A,#'F'+1,HEX_CHECK1     ;SEE IF F OR LESS
 7185:	  1CAE			HEX_CHECK1:
 7186:	  1CAE	40 01			JC	HC1
 7187:	  1CB0	22			RET
 7188:					;
 7189:	  1CB1	B4 41 00	HC1:	CJNE	A,#'A',HC11     ;SEE IF A OR GREATER
 7190:	  1CB4	B3		HC11:	CPL	C
 7191:	  1CB5	22			RET
 7192:					;
 7193:	  1CB6			PUSHR2R0:
 7194:					;
 7195:	  1CB6	7B 00			MOV	R3,#HIGH CONVERT;CONVERSION LOCATION
 7196:	  1CB8	79 58			MOV	R1,#LOW CONVERT
 7197:	  1CBA	D1 F7			ACALL	CONVERT_BINARY_TO_ASCII_STRING
 7198:	  1CBC	74 0D			MOV	A,#0DH		;A CR TO TERMINATE
 7199:	  1CBE	F3			MOVX	@R1,A		;SAVE THE CR
 7200:	  1CBF	90 00 58		MOV	DPTR,#CONVERT
 7201:					;
 7202:					; Falls thru to FLOATING INPUT
 7203:					;
 7204:					;***************************************************************
 7205:					;
 7206:	  1CC2			FLOATING_POINT_INPUT:	; Input a floating point number pointed to by
 7207:							; the DPTR
 7208:					;
 7209:					;***************************************************************
 7210:					;
 7211:	  1CC2	71 B2			ACALL	FP_CLEAR	;CLEAR EVERYTHING
 7212:	  1CC4	B1 5F			ACALL	GET_DPTR_CHARACTER
 7213:	  1CC6	B1 65			ACALL	PLUS_MINUS_TEST
 7214:	  1CC8	92 78			MOV	MSIGN,C 	;SAVE THE MANTISSA SIGN

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 131



 Line  I  Addr  Code            Source

 7215:					;
 7216:					; Now, set up for input loop
 7217:					;
 7218:	  1CCA	78 34			MOV	R0,#FP_ACCC
 7219:	  1CCC	7E 7F			MOV	R6,#7FH 	;BASE EXPONENT
 7220:	  1CCE	D2 D5			SETB	F0		;SET INITIAL FLAG
 7221:					;
 7222:	  1CD0	F1 EB		INLOOP: ACALL	GET_DIGIT_CHECK
 7223:	  1CD2	50 07			JNC	GTEST		;IF NOT A CHARACTER, WHAT IS IT?
 7224:	  1CD4	54 0F			ANL	A,#0FH		;STRIP ASCII
 7225:	  1CD6	B1 38			ACALL	STDIG		;STORE THE DIGITS
 7226:					;
 7227:	  1CD8	A3		INLPIK: INC	DPTR		;BUMP POINTER FOR LOOP
 7228:	  1CD9	80 F5			SJMP	INLOOP		;LOOP FOR INPUT
 7229:					;
 7230:	  1CDB	B4 2E 0C	GTEST:	CJNE	A,#'.',GT1      ;SEE IF A RADIX
 7231:	  1CDE	20 51 63		JB	FOUND_RADIX,INERR
 7232:	  1CE1	D2 51			SETB	FOUND_RADIX
 7233:	  1CE3	B8 34 F2		CJNE	R0,#FP_ACCC,INLPIK
 7234:	  1CE6	D2 52			SETB	FIRST_RADIX	;SET IF FIRST RADIX
 7235:	  1CE8	80 EE			SJMP	INLPIK		;GET ADDITIONAL DIGITS
 7236:					;
 7237:	  1CEA	20 D5 57	GT1:	JB	F0,INERR	;ERROR IF NOT CLEARED
 7238:	  1CED	B4 65 02		CJNE	A,#'e',GT11     ;CHECK FOR LOWER CASE
 7239:	  1CF0	80 03			SJMP	GT12
 7240:	  1CF2	B4 45 33	GT11:	CJNE	A,#'E',FINISH_UP
 7241:	  1CF5	B1 5E		GT12:	ACALL	INC_AND_GET_DPTR_CHARACTER
 7242:	  1CF7	B1 65			ACALL	PLUS_MINUS_TEST
 7243:	  1CF9	92 50			MOV	XSIGN,C 	;SAVE SIGN STATUS
 7244:	  1CFB	F1 EB			ACALL	GET_DIGIT_CHECK
 7245:	  1CFD	50 45			JNC	INERR
 7246:					;
 7247:	  1CFF	54 0F			ANL	A,#0FH		;STRIP ASCII BIAS OFF THE CHARACTER
 7248:	  1D01	FD			MOV	R5,A		;SAVE THE CHARACTER IN R5
 7249:					;
 7250:	  1D02	A3		GT2:	INC	DPTR
 7251:	  1D03	F1 EB			ACALL	GET_DIGIT_CHECK
 7252:	  1D05	50 0D			JNC	FINISH1
 7253:	  1D07	54 0F			ANL	A,#0FH		;STRIP OFF BIAS
 7254:	  1D09	CD			XCH	A,R5		;GET THE LAST DIGIT
 7255:	  1D0A	75 F0 0A		MOV	B,#10		;MULTIPLY BY TEN
 7256:	  1D0D	A4			MUL	AB
 7257:	  1D0E	2D			ADD	A,R5		;ADD TO ORIGINAL VALUE
 7258:	  1D0F	FD			MOV	R5,A		;SAVE IN R5
 7259:	  1D10	50 F0			JNC	GT2		;LOOP IF NO CARRY
 7260:	  1D12	7D FF			MOV	R5,#0FFH	;FORCE AN ERROR
 7261:					;
 7262:	  1D14	ED		FINISH1:MOV	A,R5		;GET THE SIGN
 7263:	  1D15	30 50 09		JNB	XSIGN,POSNUM	;SEE IF EXPONENT IS POS OR NEG
 7264:	  1D18	C3			CLR	C
 7265:	  1D19	9E			SUBB	A,R6
 7266:	  1D1A	F4			CPL	A
 7267:	  1D1B	04			INC	A
 7268:	  1D1C	40 09			JC	FINISH2
 7269:	  1D1E	74 01			MOV	A,#01H
 7270:	  1D20	22			RET

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 132



 Line  I  Addr  Code            Source

 7271:					;
 7272:	  1D21	2E		POSNUM: ADD	A,R6		;ADD TO EXPONENT
 7273:	  1D22	50 03			JNC	FINISH2
 7274:					;
 7275:	  1D24	74 02		POSNM1: MOV	A,#02H
 7276:	  1D26	22			RET
 7277:					;
 7278:	  1D27	CE		FINISH2:XCH	A,R6		;SAVE THE EXPONENT
 7279:					;
 7280:	  1D28			FINISH_UP:
 7281:					;
 7282:	  1D28	8E 30			MOV	FP_EXP,R6	;SAVE EXPONENT
 7283:	  1D2A	B8 34 02		CJNE	R0,#FP_ACCC,FINISH_UP1
 7284:	  1D2D	71 B2			ACALL	FP_CLEAR	;CLEAR THE MEMORY IF 0
 7285:	  1D2F			FINISH_UP1:
 7286:	  1D2F	E5 09			MOV	A,ARG_STACK	;GET THE ARG STACK
 7287:	  1D31	C3			CLR	C
 7288:	  1D32	94 0C			SUBB	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 7289:	  1D34	F5 09			MOV	ARG_STACK,A	;ADJUST FOR STORE
 7290:	  1D36	61 11			AJMP	PACK
 7291:					;
 7292:	  1D38	C2 D5		STDIG:	CLR	F0		;CLEAR INITIAL DESIGNATOR
 7293:	  1D3A	70 0B			JNZ	STDIG1		;CONTINUE IF NOT ZERO
 7294:	  1D3C	B8 34 08		CJNE	R0,#FP_ACCC,STDIG1
 7295:	  1D3F	30 52 04		JNB	FIRST_RADIX,RET_X
 7296:					;
 7297:	  1D42	DE 02		DECX:	DJNZ	R6,RET_X
 7298:					;
 7299:	  1D44	74 FF		INERR:	MOV	A,#0FFH
 7300:					;
 7301:	  1D46	22		RET_X:	RET
 7302:					;
 7303:	  1D47	20 53 02	STDIG1: JB	DONE_LOAD,FRTEST
 7304:	  1D4A	C2 52			CLR	FIRST_RADIX
 7305:					;
 7306:	  1D4C	20 52 F3	FRTEST: JB	FIRST_RADIX,DECX
 7307:					;
 7308:	  1D4F	20 51 01	FDTEST: JB	FOUND_RADIX,FDT1
 7309:	  1D52	0E			INC	R6
 7310:					;
 7311:	  1D53	20 53 F0	FDT1:	JB	DONE_LOAD,RET_X
 7312:	  1D56	B8 3D 02		CJNE	R0,#FP_ACC8+1,FDT2
 7313:	  1D59	D2 53			SETB	DONE_LOAD
 7314:					;
 7315:	  1D5B	F6		FDT2:	MOV	@R0,A		;SAVE THE STRIPPED ACCUMULATOR
 7316:	  1D5C	08			INC	R0		;BUMP THE POINTER
 7317:	  1D5D	22			RET			;EXIT
 7318:					;
 7319:					;***************************************************************
 7320:					;
 7321:					; I/O utilities
 7322:					;
 7323:					;***************************************************************
 7324:					;
 7325:	  1D5E			INC_AND_GET_DPTR_CHARACTER:
 7326:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 133



 Line  I  Addr  Code            Source

 7327:	  1D5E	A3			INC	DPTR
 7328:					;
 7329:	  1D5F			GET_DPTR_CHARACTER:
 7330:					;
 7331:	  1D5F	E0			MOVX	A,@DPTR 	;GET THE CHARACTER
 7332:	  1D60	B4 20 16		CJNE	A,#' ',PMT1     ;SEE IF A SPACE
 7333:					;
 7334:					; Kill spaces
 7335:					;
 7336:	  1D63	80 F9			SJMP	INC_AND_GET_DPTR_CHARACTER
 7337:					;
 7338:	  1D65			PLUS_MINUS_TEST:
 7339:					;
 7340:	  1D65	B4 E3 02		CJNE	A,#0E3H,PMT11	;SEE IF A PLUS, PLUS TOKEN FROM BASIC
 7341:	  1D68	80 0E			SJMP	PMT3
 7342:	  1D6A	B4 2B 02	PMT11:	CJNE	A,#'+',PMT12
 7343:	  1D6D	80 09			SJMP	PMT3
 7344:	  1D6F	B4 E5 02	PMT12:	CJNE	A,#0E5H,PMT13	;SEE IF MINUS, MINUS TOKEN FROM BASIC
 7345:	  1D72	80 03			SJMP	PMT2
 7346:	  1D74	B4 2D 02	PMT13:	CJNE	A,#'-',PMT1
 7347:					;
 7348:	  1D77	D3		PMT2:	SETB	C
 7349:					;
 7350:	  1D78	A3		PMT3:	INC	DPTR
 7351:					;
 7352:	  1D79	22		PMT1:	RET
 7353:					;
 7354:					;***************************************************************
 7355:					;
 7356:	  1D7A			FLOATING_POINT_OUTPUT:	; Output the number, format is in location 23
 7357:					;
 7358:					; IF FORMAT = 00 - FREE FLOATING
 7359:					;	    = FX - EXPONENTIAL (X IS THE NUMBER OF SIG DIGITS)
 7360:					;	    = NX - N = NUM BEFORE RADIX, X = NUM AFTER RADIX
 7361:					;		   N + X = 8 MAX
 7362:					;
 7363:					;***************************************************************
 7364:					;
 7365:	  1D7A	91 6A			ACALL	MDES1		;GET THE NUMBER TO OUTPUT, R0 IS POINTER
 7366:	  1D7C	31 A5			ACALL	POP_AND_EXIT	;OUTPUT POPS THE STACK
 7367:	  1D7E	EF			MOV	A,R7
 7368:	  1D7F	FE			MOV	R6,A		;PUT THE EXPONENT IN R6
 7369:	  1D80	71 7E			ACALL	UNPACK_R0	;UNPACK THE NUMBER
 7370:	  1D82	78 2B			MOV	R0,#FP_NIB1	;POINT AT THE NUMBER
 7371:	  1D84	E5 17			MOV	A,FORMAT	;GET THE FORMAT
 7372:	  1D86	FB			MOV	R3,A		;SAVE IN CASE OF EXP FORMAT
 7373:	  1D87	60 49			JZ	FREE		;FREE FLOATING?
 7374:	  1D89	B4 F0 00		CJNE	A,#0F0H,FPO1	;SEE IF EXPONENTIAL
 7375:	  1D8C	50 73		FPO1:	JNC	EXPOUT
 7376:					;
 7377:					; If here, must be integer USING format
 7378:					;
 7379:	  1D8E	EE			MOV	A,R6		;GET THE EXPONENT
 7380:	  1D8F	70 02			JNZ	FPO2
 7381:	  1D91	7E 80			MOV	R6,#80H
 7382:	  1D93	EB		FPO2:	MOV	A,R3		;GET THE FORMAT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 134



 Line  I  Addr  Code            Source

 7383:	  1D94	C4			SWAP	A		;SPLIT INTEGER AND FRACTION
 7384:	  1D95	54 0F			ANL	A,#0FH
 7385:	  1D97	FA			MOV	R2,A		;SAVE INTEGER
 7386:	  1D98	D1 67			ACALL	NUM_LT		;GET THE NUMBER OF INTEGERS
 7387:	  1D9A	CA			XCH	A,R2		;FLIP FOR SUBB
 7388:	  1D9B	C3			CLR	C
 7389:	  1D9C	9A			SUBB	A,R2
 7390:	  1D9D	FF			MOV	R7,A
 7391:	  1D9E	50 06			JNC	FPO3
 7392:	  1DA0	7D 3F			MOV	R5,#'?'         ;OUTPUT A QUESTION MARK
 7393:	  1DA2	D1 9C			ACALL	SOUT1		;NUMBER IS TOO LARGE FOR FORMAT
 7394:	  1DA4	A1 D2			AJMP	FREE
 7395:	  1DA6	BA 00 07	FPO3:	CJNE	R2,#00,USING0	;SEE IF ZERO
 7396:	  1DA9	1F			DEC	R7
 7397:	  1DAA	D1 89			ACALL	SS7
 7398:	  1DAC	D1 96			ACALL	ZOUT		;OUTPUT A ZERO
 7399:	  1DAE	80 06			SJMP	USING1
 7400:					;
 7401:	  1DB0	D1 89		USING0: ACALL	SS7		;OUTPUT SPACES, IF NEED TO
 7402:	  1DB2	EA			MOV	A,R2		;OUTPUT DIGITS
 7403:	  1DB3	FF			MOV	R7,A
 7404:	  1DB4	D1 4B			ACALL	OUTR0
 7405:					;
 7406:	  1DB6	EB		USING1: MOV	A,R3
 7407:	  1DB7	54 0F			ANL	A,#0FH		;GET THE NUMBER RIGHT OF DP
 7408:	  1DB9	FA			MOV	R2,A		;SAVE IT
 7409:	  1DBA	60 BD			JZ	PMT1		;EXIT IF ZERO
 7410:	  1DBC	D1 92			ACALL	ROUT		;OUTPUT DP
 7411:	  1DBE	D1 70			ACALL	NUM_RT
 7412:	  1DC0	B5 02 03		CJNE	A,2,USINGX	;COMPARE A TO R2
 7413:					;
 7414:	  1DC3	EA		USINGY: MOV	A,R2
 7415:	  1DC4	C1 80			AJMP	Z7R7
 7416:					;
 7417:	  1DC6	50 FB		USINGX: JNC	USINGY
 7418:					;
 7419:	  1DC8	CA		USING2: XCH	A,R2
 7420:	  1DC9	C3			CLR	C
 7421:	  1DCA	9A			SUBB	A,R2
 7422:	  1DCB	CA			XCH	A,R2
 7423:	  1DCC	D1 80			ACALL	Z7R7		;OUTPUT ZEROS IF NEED TO
 7424:	  1DCE	EA			MOV	A,R2
 7425:	  1DCF	FF			MOV	R7,A
 7426:	  1DD0	C1 4B			AJMP	OUTR0
 7427:					;
 7428:					; First, force exponential output, if need to
 7429:					;
 7430:	  1DD2	EE		FREE:	MOV	A,R6		;GET THE EXPONENT
 7431:	  1DD3	70 04			JNZ	FREE1		;IF ZERO, PRINT IT
 7432:	  1DD5	D1 9A			ACALL	SOUT
 7433:	  1DD7	C1 96			AJMP	ZOUT
 7434:					;
 7435:	  1DD9	7B F0		FREE1:	MOV	R3,#0F0H	;IN CASE EXP NEEDED
 7436:	  1DDB	74 77			MOV	A,#80H-DIGIT-DIGIT-1
 7437:	  1DDD	2E			ADD	A,R6
 7438:	  1DDE	40 21			JC	EXPOUT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 135



 Line  I  Addr  Code            Source

 7439:	  1DE0	94 F7			SUBB	A,#0F7H
 7440:	  1DE2	40 1D			JC	EXPOUT
 7441:					;
 7442:					; Now, just print the number
 7443:					;
 7444:	  1DE4	D1 8B			ACALL	SINOUT		;PRINT THE SIGN OF THE NUMBER
 7445:	  1DE6	D1 67			ACALL	NUM_LT		;GET THE NUMBER LEFT OF DP
 7446:	  1DE8	B4 08 02		CJNE	A,#8,FREE4
 7447:	  1DEB	C1 4B			AJMP	OUTR0
 7448:					;
 7449:	  1DED	D1 4B		FREE4:	ACALL	OUTR0
 7450:	  1DEF	D1 5D			ACALL	ZTEST		;TEST FOR TRAILING ZEROS
 7451:	  1DF1	60 57			JZ	U_RET		;DONE IF ALL TRAILING ZEROS
 7452:	  1DF3	D1 92			ACALL	ROUT		;OUTPUT RADIX
 7453:					;
 7454:	  1DF5	7F 01		FREE2:	MOV	R7,#1		;OUTPUT ONE DIGIT
 7455:	  1DF7	D1 4B			ACALL	OUTR0
 7456:	  1DF9	70 4F			JNZ	U_RET
 7457:	  1DFB	D1 5D			ACALL	ZTEST
 7458:	  1DFD	60 4B			JZ	U_RET
 7459:	  1DFF	80 F4			SJMP	FREE2		;LOOP
 7460:					;
 7461:	  1E01	D1 8B		EXPOUT: ACALL	SINOUT		;PRINT THE SIGN
 7462:	  1E03	7F 01			MOV	R7,#1		;OUTPUT ONE CHARACTER
 7463:	  1E05	D1 4B			ACALL	OUTR0
 7464:	  1E07	D1 92			ACALL	ROUT		;OUTPUT RADIX
 7465:	  1E09	EB			MOV	A,R3		;GET FORMAT
 7466:	  1E0A	54 0F			ANL	A,#0FH		;STRIP INDICATOR
 7467:	  1E0C	60 06			JZ	EXPOTX
 7468:					;
 7469:	  1E0E	FF			MOV	R7,A		;OUTPUT THE NUMBER OF DIGITS
 7470:	  1E0F	1F			DEC	R7		;ADJUST BECAUSE ONE CHAR ALREADY OUT
 7471:	  1E10	D1 4B			ACALL	OUTR0
 7472:	  1E12	80 02			SJMP	EXPOT4
 7473:					;
 7474:	  1E14	B1 F5		EXPOTX: ACALL	FREE2		;OUTPUT UNTIL TRAILING ZEROS
 7475:					;
 7476:	  1E16	D1 9A		EXPOT4: ACALL	SOUT		;OUTPUT A SPACE
 7477:	  1E18	7D 45			MOV	R5,#'E'
 7478:	  1E1A	D1 9C			ACALL	SOUT1		;OUTPUT AN E
 7479:	  1E1C	EE			MOV	A,R6		;GET THE EXPONENT
 7480:	  1E1D	60 04			JZ	XOUT0		;EXIT IF ZERO
 7481:	  1E1F	14			DEC	A		;ADJUST FOR THE DIGIT ALREADY OUTPUT
 7482:	  1E20	B4 80 05		CJNE	A,#80H,XOUT2	;SEE WHAT IT IS
 7483:					;
 7484:	  1E23	D1 9A		XOUT0:	ACALL	SOUT
 7485:	  1E25	E4			CLR	A
 7486:	  1E26	80 0C			SJMP	XOUT4
 7487:					;
 7488:	  1E28	40 06		XOUT2:	JC	XOUT3		;NEGATIVE EXPONENT
 7489:	  1E2A	7D 2B			MOV	R5,#'+'         ;OUTPUT A PLUS SIGN
 7490:	  1E2C	D1 9C			ACALL	SOUT1
 7491:	  1E2E	80 04			SJMP	XOUT4
 7492:					;
 7493:	  1E30	D1 8E		XOUT3:	ACALL	MOUT
 7494:	  1E32	F4			CPL	A		;FLIP BITS

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 136



 Line  I  Addr  Code            Source

 7495:	  1E33	04			INC	A		;BUMP
 7496:					;
 7497:	  1E34	C2 E7		XOUT4:	CLR	ACC.7
 7498:	  1E36	F8			MOV	R0,A
 7499:	  1E37	7A 00			MOV	R2,#0
 7500:	  1E39	79 58			MOV	R1,#LOW CONVERT ;CONVERSION LOCATION
 7501:	  1E3B	7B 00			MOV	R3,#HIGH CONVERT
 7502:	  1E3D	D1 F7			ACALL	CONVERT_BINARY_TO_ASCII_STRING
 7503:	  1E3F	78 58			MOV	R0,#LOW CONVERT ;NOW, OUTPUT EXPONENT
 7504:					;
 7505:	  1E41	E2		EXPOT5: MOVX	A,@R0		;GET THE CHARACTER
 7506:	  1E42	FD			MOV	R5,A		;OUTPUT IT
 7507:	  1E43	D1 9C			ACALL	SOUT1
 7508:	  1E45	08			INC	R0		;BUMP THE POINTER
 7509:	  1E46	E8			MOV	A,R0		;GET THE POINTER
 7510:	  1E47	B5 01 F7		CJNE	A,R1B0,EXPOT5	;LOOP
 7511:					;
 7512:	  1E4A	22		U_RET:	RET			;EXIT
 7513:					;
 7514:	  1E4B			OUTR0:	; Output the characters pointed to by R0, also bias ascii
 7515:					;
 7516:	  1E4B	EF			MOV	A,R7		;GET THE COUNTER
 7517:	  1E4C	60 0E			JZ	OUTR		;EXIT IF DONE
 7518:	  1E4E	E6			MOV	A,@R0		;GET THE NUMBER
 7519:	  1E4F	44 30			ORL	A,#30H		;ASCII BIAS
 7520:	  1E51	08			INC	R0		;BUMP POINTER AND COUNTER
 7521:	  1E52	1F			DEC	R7
 7522:	  1E53	FD			MOV	R5,A		;PUT CHARACTER IN OUTPUT REGISTER
 7523:	  1E54	D1 9C			ACALL	SOUT1		;OUTPUT THE CHARACTER
 7524:	  1E56	E4			CLR	A		;JUST FOR TEST
 7525:	  1E57	B8 33 F1		CJNE	R0,#FP_NIB8+1,OUTR0
 7526:	  1E5A	74 55			MOV	A,#55H		;KNOW WHERE EXIT OCCURED
 7527:					;
 7528:	  1E5C	22		OUTR:	RET
 7529:					;
 7530:	  1E5D	A9 00		ZTEST:	MOV	R1,R0B0 	;GET POINTER REGISTER
 7531:					;
 7532:	  1E5F	E7		ZT0:	MOV	A,@R1		;GET THE VALUE
 7533:	  1E60	70 04			JNZ	ZT1
 7534:	  1E62	09			INC	R1		;BUMP POINTER
 7535:	  1E63	B9 33 F9		CJNE	R1,#FP_NIB8+1,ZT0
 7536:					;
 7537:	  1E66	22		ZT1:	RET
 7538:					;
 7539:	  1E67	EE		NUM_LT: MOV	A,R6		;GET EXPONENT
 7540:	  1E68	C3			CLR	C		;GET READY FOR SUBB
 7541:	  1E69	94 80			SUBB	A,#80H		;SUB EXPONENT BIAS
 7542:	  1E6B	50 01			JNC	NL1		;OK IF NO CARRY
 7543:	  1E6D	E4			CLR	A		;NO DIGITS LEFT
 7544:					;
 7545:	  1E6E	FF		NL1:	MOV	R7,A		;SAVE THE COUNT
 7546:	  1E6F	22			RET
 7547:					;
 7548:	  1E70	C3		NUM_RT: CLR	C		;SUBB AGAIN
 7549:	  1E71	74 80			MOV	A,#80H		;EXPONENT BIAS
 7550:	  1E73	9E			SUBB	A,R6		;GET THE BIASED EXPONENT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 137



 Line  I  Addr  Code            Source

 7551:	  1E74	50 01			JNC	NR1
 7552:	  1E76	E4			CLR	A
 7553:					;
 7554:	  1E77	22		NR1:	RET			;EXIT
 7555:					;
 7556:	  1E78	EF		SPACE7: MOV	A,R7		;GET THE NUMBER OF SPACES
 7557:	  1E79	60 FC			JZ	NR1		;EXIT IF ZERO
 7558:	  1E7B	D1 9A			ACALL	SOUT		;OUTPUT A SPACE
 7559:	  1E7D	1F			DEC	R7		;BUMP COUNTER
 7560:	  1E7E	80 F8			SJMP	SPACE7		;LOOP
 7561:					;
 7562:	  1E80	FF		Z7R7:	MOV	R7,A
 7563:					;
 7564:	  1E81	EF		ZERO7:	MOV	A,R7		;GET COUNTER
 7565:	  1E82	60 F3			JZ	NR1		;EXIT IF ZERO
 7566:	  1E84	D1 96			ACALL	ZOUT		;OUTPUT A ZERO
 7567:	  1E86	1F			DEC	R7		;BUMP COUNTER
 7568:	  1E87	80 F8			SJMP	ZERO7		;LOOP
 7569:					;
 7570:	  1E89	D1 78		SS7:	ACALL	SPACE7
 7571:					;
 7572:	  1E8B	EC		SINOUT: MOV	A,R4		;GET THE SIGN
 7573:	  1E8C	60 0C			JZ	SOUT		;OUTPUT A SPACE IF ZERO
 7574:					;
 7575:	  1E8E	7D 2D		MOUT:	MOV	R5,#'-'
 7576:	  1E90	80 0A			SJMP	SOUT1		;OUTPUT A MINUS IF NOT
 7577:					;
 7578:	  1E92	7D 2E		ROUT:	MOV	R5,#'.'         ;OUTPUT A RADIX
 7579:	  1E94	80 06			SJMP	SOUT1
 7580:					;
 7581:	  1E96	7D 30		ZOUT:	MOV	R5,#'0'         ;OUTPUT A ZERO
 7582:	  1E98	80 02			SJMP	SOUT1
 7583:					;
 7584:	  1E9A	7D 20		SOUT:	MOV	R5,#' '         ;OUTPUT A SPACE
 7585:					;
 7586:	  1E9C	21 6C		SOUT1:	AJMP	OUTPUT
 7587:					;
 7588:					;***************************************************************
 7589:					;
 7590:	  1E9E			CONVERT_ASCII_STRING_TO_BINARY:
 7591:					;
 7592:					;DPTR POINTS TO ASCII STRING
 7593:					;PUT THE BINARY NUMBER IN R2:R0, ERROR IF >64K
 7594:					;
 7595:					;***************************************************************
 7596:					;
 7597:	  1E9E	91 89		CASB:	ACALL	HEXSCAN 	;SEE IF HEX NUMBER
 7598:	  1EA0	92 23			MOV	ADD_IN,C	;IF ADD_IN IS SET, THE NUMBER IS HEX
 7599:	  1EA2	F1 EB			ACALL	GET_DIGIT_CHECK
 7600:	  1EA4	B3			CPL	C		;FLIP FOR EXIT
 7601:	  1EA5	40 28			JC	RCASB
 7602:	  1EA7	7B 00			MOV	R3,#00H 	;ZERO R3:R1 FOR LOOP
 7603:	  1EA9	79 00			MOV	R1,#00H
 7604:	  1EAB	80 15			SJMP	CASB5
 7605:					;
 7606:	  1EAD	A3		CASB2:	INC	DPTR

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 138



 Line  I  Addr  Code            Source

 7607:	  1EAE	89 00			MOV	R0B0,R1 	;SAVE THE PRESENT CONVERTED VALUE
 7608:	  1EB0	8B 02			MOV	R2B0,R3 	;IN R2:R0
 7609:	  1EB2	F1 EB			ACALL	GET_DIGIT_CHECK
 7610:	  1EB4	40 0C			JC	CASB5
 7611:	  1EB6	30 23 16		JNB	ADD_IN,RCASB	;CONVERSION COMPLETE
 7612:	  1EB9	91 A9			ACALL	HEX_CHECK	;SEE IF HEX NUMBER
 7613:	  1EBB	40 03			JC	CASB4		;PROCEED IF GOOD
 7614:	  1EBD	A3			INC	DPTR		;BUMP PAST H
 7615:	  1EBE	80 0F			SJMP	RCASB
 7616:					;
 7617:	  1EC0	24 09		CASB4:	ADD	A,#9		;ADJUST HEX ASCII BIAS
 7618:					;
 7619:	  1EC2	75 F0 0A	CASB5:	MOV	B,#10
 7620:	  1EC5	30 23 03		JNB	ADD_IN,CASB6
 7621:	  1EC8	75 F0 10		MOV	B,#16		;HEX MODE
 7622:					;
 7623:	  1ECB	D1 D6		CASB6:	ACALL	MULNUM		;ACCUMULATE THE DIGITS
 7624:	  1ECD	50 DE			JNC	CASB2		;LOOP IF NO CARRY
 7625:					;
 7626:	  1ECF	E4		RCASB:	CLR	A		;RESET ACC
 7627:	  1ED0	92 E1			MOV	ACC.OVERFLOW,C	;IF OVERFLOW, SAY SO
 7628:	  1ED2	22			RET			;EXIT
 7629:					;
 7630:	  1ED3	75 F0 0A	MULNUM10:MOV	B,#10
 7631:					;
 7632:					;***************************************************************
 7633:					;
 7634:	  1ED6			MULNUM: ; Take the next digit in the acc (masked to 0FH)
 7635:					; accumulate in R3:R1
 7636:					;
 7637:					;***************************************************************
 7638:					;
 7639:	  1ED6	C0 E0			PUSH	ACC		;SAVE ACC
 7640:	  1ED8	C0 F0			PUSH	B		;SAVE MULTIPLIER
 7641:	  1EDA	E9			MOV	A,R1		;PUT LOW ORDER BITS IN ACC
 7642:	  1EDB	A4			MUL	AB		;DO THE MULTIPLY
 7643:	  1EDC	F9			MOV	R1,A		;PUT THE RESULT BACK
 7644:	  1EDD	EB			MOV	A,R3		;GET THE HIGH ORDER BYTE
 7645:	  1EDE	AB F0			MOV	R3,B		;SAVE THE OVERFLOW
 7646:	  1EE0	D0 F0			POP	B		;GET THE MULTIPLIER
 7647:	  1EE2	A4			MUL	AB		;DO IT
 7648:	  1EE3	A2 D2			MOV	C,OV		;SAVE OVERFLOW IN F0
 7649:	  1EE5	92 D5			MOV	F0,C
 7650:	  1EE7	2B			ADD	A,R3		;ADD OVERFLOW TO HIGH RESULT
 7651:	  1EE8	FB			MOV	R3,A		;PUT IT BACK
 7652:	  1EE9	D0 E0			POP	ACC		;GET THE ORIGINAL ACC BACK
 7653:	  1EEB	72 D5			ORL	C,F0		;OR CARRY AND OVERFLOW
 7654:	  1EED	40 07			JC	MULX		;NO GOOD IF THE CARRY IS SET
 7655:					;
 7656:	  1EEF	54 0F		MUL11:	ANL	A,#0FH		;MASK OFF HIGH ORDER BITS
 7657:	  1EF1	29			ADD	A,R1		;NOW ADD THE ACC
 7658:	  1EF2	F9			MOV	R1,A		;PUT IT BACK
 7659:	  1EF3	E4			CLR	A		;PROPAGATE THE CARRY
 7660:	  1EF4	3B			ADDC	A,R3
 7661:	  1EF5	FB			MOV	R3,A		;PUT IT BACK
 7662:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 139



 Line  I  Addr  Code            Source

 7663:	  1EF6	22		MULX:	RET			;EXIT WITH OR WITHOUT CARRY
 7664:					;
 7665:	  1EF7			CONVERT_BINARY_TO_ASCII_STRING:
 7666:				;
 7667:				;*****************************************************************************
 7668:				;****** Elektor 3 Patch ******************************************************
 7669:				;****** Performance improvements *********************************************
 7670:				;
 7671:				;
 7672:				;R3:R1 contains the address of the string
 7673:				;R2:R0 contains the value to convert
 7674:				;DPTR, R7, R6, and ACC gets clobbered
 7675:				;
 7676:				;***************************************************************
 7677:				;
 7678:				;	CLR	A		;NO LEADING ZEROS
 7679:				;	MOV	DPTR,#10000	;SUBTRACT 10000
 7680:				;	ACALL	RSUB		;DO THE SUBTRACTION
 7681:				;	MOV	DPTR,#1000	;NOW 1000
 7682:				;	ACALL	RSUB
 7683:				;	MOV	DPTR,#100	;NOW 100
 7684:				;	ACALL	RSUB
 7685:				;	MOV	DPTR,#10	;NOW 10
 7686:				;	ACALL	RSUB
 7687:				;	MOV	DPTR,#1 	;NOW 1
 7688:				;	ACALL	RSUB
 7689:				;	JZ	RSUB2		;JUMP OVER RET
 7690:				;
 7691:				;RSUB_R:	RET
 7692:				;
 7693:				;RSUB:	MOV	R6,#-1		;SET UP THE COUNTER
 7694:				;
 7695:				;RSUB1: INC	R6		;BUMP THE COUNTER
 7696:				;	XCH	A,R2		;DO A FAST COMPARE
 7697:				;	CJNE	A,DPH,RSUB11
 7698:				;RSUB11: XCH	 A,R2
 7699:				;	JC	FAST_DONE
 7700:				;	XCH	A,R0		;GET LOW BYTE
 7701:				;	SUBB	A,DPL		;SUBTRACT, CARRY IS CLEARED
 7702:				;	XCH	A,R0		;PUT IT BACK
 7703:				;	XCH	A,R2		;GET THE HIGH BYTE
 7704:				;	SUBB	A,DPH		;ADD THE HIGH BYTE
 7705:				;	XCH	A,R2		;PUT IT BACK
 7706:				;	JNC	RSUB1		;LOOP UNTIL CARRY
 7707:				;
 7708:				;	XCH	A,R0
 7709:				;	ADD	A,DPL		;RESTORE R2:R0
 7710:				;	XCH	A,R0
 7711:				;	XCH	A,R2
 7712:				;	ADDC	A,DPH
 7713:				;	XCH	A,R2
 7714:				;
 7715:				;FAST_DONE:
 7716:				;
 7717:				;	ORL	A,R6		;OR THE COUNT VALUE
 7718:				;	JZ	RSUB_R		;RETURN IF ZERO

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 140



 Line  I  Addr  Code            Source

 7719:				;
 7720:				;RSUB2: MOV	A,#'0'          ;GET THE ASCII BIAS
 7721:				;	ADD	A,R6		;ADD THE COUNT
 7722:				;
 7723:				;RSUB4: MOV	P2,R3		;SET UP P2
 7724:				;	MOVX	@R1,A		;PLACE THE VALUE IN MEMORY
 7725:				;	INC	R1
 7726:				;	CJNE	R1,#00H,RSUB3	;SEE IF RAPPED AROUND
 7727:				;	INC	R3		;BUMP HIGH BYTE
 7728:				;
 7729:				;RSUB3: RET			;EXIT
 7730:				;
 7731:				;****** Faster code starts here: *********************************************
 7732:				;
 7733:	  1EF7	7D 00			mov	R5,#0
 7734:				;
 7735:	  1EF9	EA		RSUB1:	mov	A, R2
 7736:	  1EFA	75 F0 0A		mov	B,#0AH
 7737:	  1EFD	84			div	AB
 7738:	  1EFE	FA			mov	R2,A
 7739:	  1EFF	E8			mov	A,R0
 7740:	  1F00	54 F0			anl	A,#0F0H
 7741:	  1F02	45 F0			orl	A,B
 7742:	  1F04	C4			swap	A
 7743:	  1F05	75 F0 0A		mov	B,#0AH
 7744:	  1F08	84			div	AB
 7745:	  1F09	C4			swap	A
 7746:	  1F0A	FE			mov	R6,A
 7747:	  1F0B	E8			mov	A,R0
 7748:	  1F0C	54 0F			anl	A,#0FH
 7749:	  1F0E	C4			swap	A
 7750:	  1F0F	45 F0			orl	A,B
 7751:	  1F11	C4			swap	A
 7752:	  1F12	75 F0 0A		mov	B,#0AH
 7753:	  1F15	84			div	AB
 7754:	  1F16	4E			orl	A,R6
 7755:	  1F17	F8			mov	R0,A
 7756:	  1F18	E5 F0			mov	A,B
 7757:	  1F1A	24 30			add	A,#30H
 7758:	  1F1C	0D			inc	R5
 7759:	  1F1D	C0 E0			push	ACC
 7760:	  1F1F	EA			mov	A,R2
 7761:	  1F20	48			orl	A,R0
 7762:	  1F21	70 D6			jnz	RSUB1
 7763:				;
 7764:	  1F23	D0 E0		RSUB2:	pop	ACC
 7765:	  1F25	8B A0			mov	P2,R3
 7766:	  1F27	F3			movx	@R1,A
 7767:	  1F28	09			inc	R1
 7768:	  1F29	B9 00 01		cjne	R1,#0,RSUB3
 7769:	  1F2C	0B			inc	R3
 7770:				;
 7771:	  1F2D	DD F4		RSUB3:	djnz	R5,RSUB2
 7772:	  1F2F	22			ret
 7773:				;
 7774:				;****** continue with original code: *****************************************

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 141



 Line  I  Addr  Code            Source

 7775:				;
 7776:					;***************************************************************
 7777:					;
 7778:	  1F30			HEXOUT: ; Output the hex number in R3:R1, supress leading zeros, if set
 7779:					;
 7780:					;***************************************************************
 7781:					;
 7782:	  1F30	D1 9A			ACALL	SOUT		;OUTPUT A SPACE
 7783:	  1F32	A2 36			MOV	C,ZSURP 	;GET ZERO SUPPRESSION BIT
 7784:	  1F34	92 23			MOV	ADD_IN,C
 7785:	  1F36	EB			MOV	A,R3		;GET HIGH NIBBLE AND PRINT IT
 7786:	  1F37	F1 53			ACALL	HOUTHI
 7787:	  1F39	EB			MOV	A,R3
 7788:	  1F3A	F1 54			ACALL	HOUTLO
 7789:					;
 7790:	  1F3C	C2 23		HEX2X:	CLR	ADD_IN		;DON'T SUPPRESS ZEROS
 7791:	  1F3E	E9			MOV	A,R1		;GET LOW NIBBLE AND PRINT IT
 7792:	  1F3F	F1 53			ACALL	HOUTHI
 7793:	  1F41	E9			MOV	A,R1
 7794:	  1F42	F1 54			ACALL	HOUTLO
 7795:	  1F44	7D 48			MOV	R5,#'H'         ;OUTPUT H TO INDICATE HEX MODE
 7796:					;
 7797:	  1F46	C1 9C		SOUT_1: AJMP	SOUT1
 7798:					;
 7799:	  1F48	C2 23		HOUT1:	CLR	ADD_IN		;PRINTED SOMETHING, SO CLEAR ADD_IN
 7800:	  1F4A	24 90			ADD	A,#90H		;CONVERT TO ASCII
 7801:	  1F4C	D4			DA	A
 7802:	  1F4D	34 40			ADDC	A,#40H
 7803:	  1F4F	D4			DA	A		;GOT IT HERE
 7804:	  1F50	FD			MOV	R5,A		;OUTPUT THE BYTE
 7805:	  1F51	80 F3			SJMP	SOUT_1
 7806:					;
 7807:	  1F53	C4		HOUTHI: SWAP	A		;SWAP TO OUTPUT HIGH NIBBLE
 7808:					;
 7809:	  1F54	54 0F		HOUTLO: ANL	A,#0FH		;STRIP
 7810:	  1F56	70 F0			JNZ	HOUT1		;PRINT IF NOT ZERO
 7811:	  1F58	30 23 ED		JNB	ADD_IN,HOUT1	;OUTPUT A ZERO IF NOT SUPRESSED
 7812:	  1F5B	22			RET
 7813:				;
 7814:				;*****************************************************************************
 7815:				;******* New baudrate detection **********************************************
 7816:				;******* calculate r3:r1=-(Timer2 DIV 16) for serial mode ********************
 7817:				;******* Wulf 3 alteration 2 *************************************************
 7818:				;
 7819:	  1F5C	74 F0		SERCALC:mov	a,#0F0h
 7820:	  1F5E	FB			mov	r3,a
 7821:	  1F5F	A9 CD			mov	r1,TH2
 7822:	  1F61	59			anl	a,r1
 7823:	  1F62	C4			swap	a
 7824:	  1F63	F4			cpl	a
 7825:	  1F64	CB			xch	a,r3
 7826:	  1F65	55 CC			anl	a,TL2
 7827:	  1F67	C9			xch	a,r1
 7828:	  1F68	54 0F			anl	a,#00Fh
 7829:	  1F6A	49			orl	a,r1
 7830:	  1F6B	C4			swap	a

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 142



 Line  I  Addr  Code            Source

 7831:	  1F6C	F4			cpl	a
 7832:	  1F6D	A9 D8			mov	r1,ADCON	;save BSY bit
 7833:	  1F6F	75 DA 00		mov	DAPR,#0 	;start A/D for 805xx test
 7834:	  1F72	C9			xch	a,r1
 7835:	  1F73	22			ret
 7836:				;
 7837:				;*****************************************************************************
 7838:				;
 7839:		N      1F78		ORG	1F78H
 7840:					;
 7841:	  1F78	20 1A 03	CKS_I:	JB	CKS_B,CS_I
 7842:	  1F7B	02 40 1B		LJMP	401BH
 7843:					;
 7844:	  1F7E	02 20 88	CS_I:	LJMP	2088H
 7845:					;
 7846:	  1F81	4E 4F 20 44	E14X:	DB	'NO DATA"'
	  1F85	41 54 41 22
 7847:					;
 7848:	  1F89	94		E11X:	DB	128+20
 7849:	  1F8A	41 52 49 54		DB	'ARITH. OVERFLOW"'
	  1F8E	48 2E 20 4F
	  1F92	56 45 52 46
	  1F96	4C 4F 57 22
 7850:					;
 7851:	  1F9A	50 52 4F 47	E16X:	DB	'PROGRAMMING"'
	  1F9E	52 41 4D 4D
	  1FA2	49 4E 47 22
 7852:					;
 7853:	  1FA6	43 41 4E	E15X:	DB	'CAN'
 7854:	  1FA9	27			DB	27H
 7855:	  1FAA	54 20 43 4F		DB	'T CONTINUE"'
	  1FAE	4E 54 49 4E
	  1FB2	55 45 22
 7856:					;
 7857:	  1FB5	49 4E 56 41	E10X:	DB	'INVALID LINE NUMBER"'
	  1FB9	4C 49 44 20
	  1FBD	4C 49 4E 45
	  1FC1	20 4E 55 4D
	  1FC5	42 45 52 22
 7858:					;
 7859:	  1FC9	50 52 4F 4D	NOROM:	DB	'PROM MODE"'
	  1FCD	20 4D 4F 44
	  1FD1	45 22
 7860:					;
 7861:				;*****************************************************************************
 7862:				;****** Set a new version message ********************************************
 7863:				;
 7864:				;S_N:	DB	'*MCS-51(tm) BASIC V1.1*'
 7865:				;
 7866:	  1FD3	2A 4D 43 53	S_N:	DB	'*MCS-BASIC-52 V1.31*"'
	  1FD7	2D 42 41 53
	  1FDB	49 43 2D 35
	  1FDF	32 20 56 31
	  1FE3	2E 33 31 2A
	  1FE7	22
 7867:				;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 143



 Line  I  Addr  Code            Source

 7868:				;*****************************************************************************
 7869:				;
 7870:		N      1FEB		ORG	1FEBH		;FOR LINK COMPATABILITY
 7871:					;
 7872:	  1FEB			GET_DIGIT_CHECK:	; Get a character, then check for digit
 7873:					;
 7874:	  1FEB	B1 5F			ACALL	GET_DPTR_CHARACTER
 7875:					;
 7876:	  1FED			DIGIT_CHECK:	;CHECK FOR A VALID ASCII DIGIT, SET CARRY IF FOUND
 7877:					;
 7878:	  1FED	B4 3A 00		CJNE	A,#'9'+1,DC10   ;SEE IF ASCII 9 OR LESS
 7879:	  1FF0	40 01		DC10:	JC	DC1
 7880:	  1FF2	22			RET
 7881:					;
 7882:	  1FF3	B4 30 00	DC1:	CJNE	A,#'0',DC11     ;SEE IF ASCII 0 OR GREATER
 7883:	  1FF6	B3		DC11:	CPL	C
 7884:	  1FF7	22			RET
 7885:					;
 7886:		N      1FF8		ORG	1FF8H
 7887:					;
 7888:	  1FF8	45 52 52 4F	ERS:	DB	'ERROR: "'
	  1FFC	52 3A 20 22
 7889:					;
 7890:					;***************************************************************
 7891:					;
 7892:					XSEG	;External Ram
 7893:					;
 7894:					;***************************************************************
 7895:					;
 7896:	  0000	N      0004		DS	4
 7897:	  0004	N      0001	IBCNT:	DS	1		;LENGTH OF A LINE
 7898:	  0005	N      0002	IBLN:	DS	2		;THE LINE NUMBER
 7899:	  0007	N      0049	IBUF:	DS	LINLEN		;THE INPUT BUFFER
 7900:	  0050	N      000F	CONVT:	DS	15		;CONVERSION LOCATION FOR FPIN
 7901:					;
 7902:		N      0100		ORG	100H
 7903:					;
 7904:	  0100	N      0001	GTB:	DS	1		;GET LOCATION
 7905:	  0101	N      0001	ERRLOC: DS	1		;ERROR TYPE
 7906:	  0102	N      0002	ERRNUM: DS	2		;WHERE TO GO ON AN ERROR
 7907:	  0104	N      0002	VARTOP: DS	2		;TOP OF VARIABLE STORAGE
 7908:	  0106	N      0002	ST_ALL: DS	2		;STORAGE ALLOCATION
 7909:	  0108	N      0002	MT_ALL: DS	2		;MATRIX ALLOCATION
 7910:	  010A	N      0002	MEMTOP: DS	2		;TOP OF MEMORY
 7911:	  010C	N      0002	RCELL:	DS	2		;RANDOM NUMBER CELL
 7912:	  010E	N      0005		DS	FPSIZ-1
 7913:	  0113	N      0001	CXTAL:	DS	1		;CRYSTAL
 7914:	  0114	N      0005		DS	FPSIZ-1
 7915:	  0119	N      0001	FPT1:	DS	1		;FLOATINP POINT TEMP 1
 7916:	  011A	N      0005		DS	FPSIZ-1
 7917:	  011F	N      0001	FPT2:	DS	1		;FLOATING POINT TEMP 2
 7918:	  0120	N      0002	INTLOC: DS	2		;LOCATION TO GO TO ON INTERRUPT
 7919:	  0122	N      0002	STR_AL: DS	2		;STRING ALLOCATION
 7920:	  0124	N      0002	SPV:	DS	2		;SERIAL PORT BAUD RATE
 7921:	  0126	N      0002	TIV:	DS	2		;TIMER INTERRUPT NUM AND LOC
 7922:	  0128	N      0002	PROGS:	DS	2		;PROGRAM A PROM TIME OUT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 144



 Line  I  Addr  Code            Source

 7923:				;
 7924:				;*****************************************************************************
 7925:				;****** Disable Intel programming for to get room ****************************
 7926:				;****** We don't need this, but don't remark it! *****************************
 7927:				;
 7928:	  012A	N      0002	IPROGS: DS	2		;INTELLIGENT PROM PROGRAMMER TIMEOUT
 7929:				;
 7930:				;*****************************************************************************
 7931:				;
 7932:	  012C	N      0001	TM_TOP: DS	1
 7933:				;
 7934:					END
 7935:
 7936:





                     register banks used:  ---

                     no errors




ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 145





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
AABS				  CODE	    138F	4732
AADD				  CODE	    1741	5691
AANL				  CODE	    1484	5018
AATAN				  CODE	    11E0	4395
AATAN1				  CODE	    11EE	4402
AC				  BIT	      D6
AC1				  CODE	    096C	2596
ACBYTE				  CODE	    13AD	4777
ACC				  DATA	      E0
ACOS				  CODE	    116D	4292
ADBYTE				  CODE	    13B6	4789
ADCON				  NUMBER    00D8	 499
ADDLP				  CODE	    19F2	6445
ADDPTR				  CODE	    05DE	1850
ADDPTR1				  CODE	    05E6	1854
ADD_IN				  BIT	      23	6252
ADD_R				  CODE	    19F0	6443
ADIV				  CODE	    140A	4876
AEL1				  CODE	    1282	4532
AELP				  CODE	    1270	4520
AEQ				  CODE	    13DB	4838
AEQ1				  CODE	    13DD	4839
AETOX				  CODE	    1327	4653
AEXL				  CODE	    134E	4676
AEXP				  CODE	    132B	4656
AEXP1				  CODE	    133D	4667
AFREE				  CODE	    1711	5664
AGE				  CODE	    13E7	4846
AGET				  CODE	    14A9	5051
AGT				  CODE	    13C5	4820
AGT1				  CODE	    13C9	4822
AI1				  CODE	    137A	4711
AI11				  CODE	    1381	4716
AI2				  CODE	    1382	4718
AI21				  CODE	    138A	4724
AI3				  CODE	    138E	4728
AINT				  CODE	    136D	4700
AL				  CODE	    0D4F	3377
AL1				  CODE	    0D52	3378
AL2				  CODE	    0D57	3380
AL3				  CODE	    0D58	3381
ALE				  CODE	    13EB	4849
ALEN				  CODE	    1721	5673
ALN				  CODE	    12C0	4587
ALN1				  CODE	    12CD	4594
ALN11				  CODE	    12EF	4616
ALNE				  CODE	    12E5	4610
ALNL				  CODE	    12D3	4600
ALNO				  CODE	    12F8	4621
ALPAR				  CODE	    13AC	4773

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 146



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
ALT				  CODE	    13D6	4834
ALT1				  CODE	    13D8	4835
AMUL				  CODE	    11B0	4347
ANE				  CODE	    13E1	4842
ANEG				  CODE	    13A1	4761
ANOT				  CODE	    1496	5034
ANU				  CODE	    0D44	3371
AORL				  CODE	    148D	5026
AP1				  CODE	    14E5	5116
APCON				  CODE	    14E9	5119
ARCAP2				  CODE	    14DF	5108
ARG1_EXP_IS_LARGER		  CODE	    1A56	6544
ARG1_EXP_IS_LARGER1		  CODE	    1A57	6547
ARG1_EXP_IS_LARGER2		  CODE	    1A5A	6550
ARGF				  BIT	      24	 419
ARG_STACK			  NUMBER    0009	6221
ARG_STACK_PAGE			  NUMBER    0001	6222
ARND				  CODE	    13F1	4855
ASGN				  CODE	    1395	4744
ASIN				  CODE	    1171	4301
ASIN1				  CODE	    1187	4312
ASQR				  CODE	    128D	4545
ASTKA				  NUMBER    0009	 359
ASTKAH				  NUMBER    0001	 524
ASUB				  CODE	    171C	5670
AT2CON				  CODE	    14D3	5097
ATAN				  CODE	    11D0	4379
ATCON				  CODE	    14D7	5102
ATIM0				  CODE	    14C1	5081
ATIM1				  CODE	    14C7	5085
ATIM2				  CODE	    14CD	5089
ATIME				  CODE	    1729	5678
ATMOD				  CODE	    14DB	5105
ATTAB				  CODE	    112A	4194
AXBYTE				  CODE	    13BE	4800
AXBYTE1				  CODE	    13C0	4805
AXRL				  CODE	    1498	5036
AXTAL				  CODE	    0FD9	3908
AXTAL0				  CODE	    1657	5471
AXTAL1				  CODE	    165C	5474
AXTAL2				  CODE	    1679	5508
AXTAL3				  CODE	    121F	4446
A_D				  CODE	    1260	4504
A_IE				  CODE	    14B9	5075
A_IP				  CODE	    14BD	5078
B				  DATA	      F0
B4800				  NUMBER    00B2	 516
B9600				  NUMBER    00D9	 517
BABC				  NUMBER    0027	 471
BCHR				  CODE	    082F	2378
BCHR1				  CODE	    0835	2380
BCK				  CODE	    078D	2229
BD				  BIT	      DF	 466
BELL				  NUMBER    0007	 508
BG1				  CODE	    0426	1319
BG10				  CODE	    0452	1339

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 147



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
BG11				  CODE	    0455	1340
BG12				  CODE	    045A	1343
BG13				  CODE	    045D	1344
BG14				  CODE	    0446	1332
BG15				  CODE	    0464	1348
BG2				  CODE	    0461	1347
BG3				  CODE	    0467	1352
BI				  BIT	      32	 443
BO				  BIT	      2C	 437
BOFAH				  NUMBER    0013	 379
BOFAL				  NUMBER    0014	 380
BOTH_PLUS			  CODE	    1A5E	6559
BR0				  CODE	    07F1	2331
BR2				  CODE	    083E	2384
BS				  NUMBER    0008	 509
B_C				  CODE	    0AA4	2835
B_TXA				  CODE	    0F23	3768
B_TXA1				  CODE	    0F2D	3773
C0				  CODE	    0CF6	3323
C0C				  CODE	    1025	3994
C0ORX1				  BIT	      34	 452
C1				  CODE	    0CFD	3327
C1C				  CODE	    1030	4000
C2				  CODE	    0D06	3332
C2C				  CODE	    102F	3998
C2_T2				  CODE	    146C	4987
C3C				  CODE	    1035	4004
CASB				  CODE	    1E9E	7597
CASB2				  CODE	    1EAD	7606
CASB4				  CODE	    1EC0	7617
CASB5				  CODE	    1EC2	7619
CASB6				  CODE	    1ECB	7623
CBIAS				  CODE	    167B	5510
CC1				  CODE	    1844	5878
CCAL				  CODE	    051C	1610
CCAL1				  CODE	    052C	1627
CCLR3				  CODE	    068C	2030
CCONT				  CODE	    183E	5875
CERASE				  CODE	    0500	1589
CILOOP				  CODE	    080F	2358
CILOOP1				  CODE	    0811	2359
CIUB				  BIT	      1E	 411
CI_RET				  CODE	    07BE	2268
CI_RET1				  CODE	    07BF	2269
CKS_B				  BIT	      1A	 403
CKS_I				  CODE	    1F78	7841
CL1				  CODE	    106F	4042
CL2				  CODE	    1074	4045
CL3				  CODE	    1092	4061
CL6				  CODE	    1094	4063
CL7				  CODE	    109D	4067
CLIST				  CODE	    104E	4025
CLIST1				  CODE	    106B	4039
CLN_UP				  CODE	    0F17	3760
CLOOP				  CODE	    1A66	6571
CL_1				  CODE	    067D	2018

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 148



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
CL_2				  CODE	    068B	2028
CMND1				  CODE	    1787	5746
CMND11				  CODE	    17EB	5807
CMND3				  CODE	    17C4	5785
CMND31				  CODE	    17D1	5790
CMND5				  CODE	    17DD	5796
CMNDD				  CODE	    010F	 691
CMNDLK				  CODE	    0855	2397
CMNDR				  CODE	    1794	5763
CMNDSP				  NUMBER    004D	 493
CMNX				  CODE	    179B	5767
CMNX1				  CODE	    17A8	5773
CMPLK				  CODE	    1208	4423
CN0				  CODE	    0FFE	3963
CN0T				  CODE	    101C	3987
CN0T1				  CODE	    1005	3966
CN0T2				  CODE	    1010	3975
CN0T3				  CODE	    1012	3978
CN0T4				  CODE	    101B	3986
CNEW				  CODE	    065C	1983
CNEW1				  CODE	    0662	1995
CNTRLC				  NUMBER    0003	 510
CNTRLD				  NUMBER    0004	 511
CNT_S				  BIT	      35	 453
CNULL				  CODE	    0B08	2942
CNX				  CODE	    0FF9	3955
COB				  BIT	      1B	 404
CONB				  BIT	      17	 400
CONST				  CODE	    0FEF	3946
CONVERT				  NUMBER    0058	6224
CONVERT_ASCII_STRING_TO_BINARY	  CODE	    1E9E	7590
CONVERT_BINARY_TO_ASCII_STRING	  CODE	    1EF7	7665
CONVT				  XDATA	    0050	7900
COUB				  BIT	      1C	 407
CPROG				  CODE	    048A	1505
CPROG1				  CODE	    048D	1507
CPROG2				  CODE	    04B1	1525
CPS				  CODE	    0EA9	3631
CR				  NUMBER    000D	 506
CR0				  CODE	    03EA	1259
CR1				  CODE	    03FE	1279
CR11				  CODE	    0401	1280
CR2				  CODE	    040A	1285
CR20				  CODE	    0417	1291
CRAM				  CODE	    177F	5734
CRLF				  CODE	    06A5	2062
CRLF2				  CODE	    06A3	2060
CROM				  CODE	    053C	1646
CRP				  CODE	    06AD	2071
CRS				  CODE	    03DE	1253
CRS1				  CODE	    03E3	1255
CRS2				  CODE	    03E6	1256
CRST				  CODE	    038B	1181
CRST1				  CODE	    03A2	1212
CRST2				  CODE	    03A5	1215
CRUN				  CODE	    0802	2350

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 149



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
CS1				  CODE	    0B47	3011
CSC				  CODE	    0BBD	3095
CSETUP				  CODE	    0B4B	3014
CSETUP1				  CODE	    0B56	3020
CSTAKA				  CODE	    142C	4917
CSTAKA2				  CODE	    142A	4915
CSTKA				  NUMBER    0011	 374
CSTKAH				  NUMBER    0000	 525
CSTS				  CODE	    07C8	2284
CSTS1				  CODE	    07CE	2292
CSTS2				  CODE	    07D4	2294
CSY				  CODE	    0A1E	2733
CSY1				  CODE	    0A2E	2745
CSY2				  CODE	    0A3A	2753
CS_I				  CODE	    1F7E	7844
CXFER				  CODE	    1773	5720
CXTAL				  XDATA	    0113	7913
CY				  BIT	      D7
C_1				  CODE	    0F12	3757
C_2				  CODE	    0F0D	3754
C_BIT				  BIT	      2E	 439
C_EX				  CODE	    07D7	2306
C_K				  CODE	    0540	1653
C_TST				  CODE	    0EC6	3658
D1				  CODE	    05DC	1839
DACK				  BIT	      96	 457
DAPR				  NUMBER    00DA	 500
DBTWO				  CODE	    1194	4322
DC1				  CODE	    1FF3	7882
DC10				  CODE	    1FF0	7879
DC11				  CODE	    1FF6	7883
DCMPX				  CODE	    05CC	1827
DEC3210				  CODE	    158B	5268
DEC3211				  CODE	    158F	5270
DEC3212				  CODE	    1590	5271
DEC76				  CODE	    1647	5448
DEC77				  CODE	    164C	5451
DECDP				  CODE	    05C2	1809
DECDP1				  CODE	    05C8	1812
DECDP2				  CODE	    05C0	1807
DECX				  CODE	    1D42	7297
DEC_ASTKA			  CODE	    120B	4427
DEC_ASTKA1			  CODE	    1212	4434
DEC_R				  CODE	    1589	5265
DELTST				  CODE	    0EE1	3693
DELTST1				  CODE	    0EE3	3694
DIGIT				  NUMBER    0004	 534
DIGIT_CHECK			  CODE	    1FED	7876
DIRF				  BIT	      2F	 440
DIV0				  CODE	    1ABD	6681
DIV3				  CODE	    1ACA	6690
DIV4				  CODE	    1AD7	6698
DIV5				  CODE	    1ADA	6701
DIV6				  CODE	    1AE2	6706
DIV7				  CODE	    1AF9	6728
DIV8				  CODE	    1B0E	6741

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 150



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
DLD				  CODE	    062B	1931
DONE_LOAD			  BIT	      53	6256
DPH				  DATA	      83
DPL				  DATA	      82
DP_B				  CODE	    0E9B	3623
DP_T				  CODE	    0EA2	3627
DRQ				  BIT	      31	 442
DT1				  CODE	    0EE8	3698
DTEMP				  CODE	    184D	5884
DTYPE				  NUMBER    0003	 528
DUBSUB				  CODE	    0A02	2703
D_CHK				  CODE	    0DCC	3458
D_L1				  CODE	    0AF8	2920
D_UNDER				  CODE	    1AC8	6688
E10X				  CODE	    1FB5	7857
E11X				  CODE	    1F89	7848
E14X				  CODE	    1F81	7846
E15X				  CODE	    1FA6	7853
E16X				  CODE	    1F9A	7851
E1X				  CODE	    1746	5701
E1XX				  CODE	    1885	5926
E1XX1				  CODE	    1887	5927
E1XX2				  CODE	    188C	5930
E2X				  CODE	    1751	5702
E3X				  CODE	    1828	5864
E3XX				  CODE	    09BD	2654
E4XX				  CODE	    0BC1	3098
E4YY				  CODE	    121A	4442
E5X				  CODE	    1816	5862
E6X				  CODE	    1761	5705
E7X				  CODE	    1804	5859
EA				  BIT	      AF
EATC				  CODE	    0CE5	3307
EBIAS				  CODE	    1261	4512
EIG				  CODE	    036D	1173
EIGP				  CODE	    0E4E	3537
EK				  CODE	    0C0E	3161
ENDBIT				  BIT	      29	 434
EOF				  NUMBER    0001	 523
EP1				  CODE	    0F45	3810
EP2				  CODE	    0F49	3813
EP21				  CODE	    0F52	3817
EP22				  CODE	    0F5B	3821
EP3				  CODE	    0F6F	3832
EP4				  CODE	    0F71	3834
EP41				  CODE	    0F76	3837
EP42				  CODE	    0F7B	3839
EP5				  CODE	    0F82	3843
ER0				  CODE	    1874	5916
ER1				  CODE	    18B8	5963
ER2				  CODE	    18C2	5972
ER3				  CODE	    18D1	5980
ER31				  CODE	    18EE	5993
ER4				  CODE	    18FB	6000
ERA1				  CODE	    050D	1596
ERL4				  CODE	    0844	2388

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 151



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
ERPAR				  CODE	    0CE3	3305
ERRLK				  CODE	    04D6	1550
ERRLOC				  XDATA	    0101	7905
ERRNUM				  XDATA	    0102	7906
ERROR				  CODE	    188F	5942
ERROR0				  CODE	    189B	5949
ERROR01				  CODE	    18A2	5952
ERROR1				  CODE	    1890	5943
ERRS				  CODE	    18AD	5957
ERS				  CODE	    1FF8	7888
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXA				  CODE	    037B	1175
EXC				  CODE	    0383	1177
EXI				  CODE	    1836	5867
EXP1				  CODE	    17F8	5827
EXP11				  CODE	    17F2	5820
EXPONENTS_EQUAL			  CODE	    1A5B	6553
EXPOT4				  CODE	    1E16	7476
EXPOT5				  CODE	    1E41	7505
EXPOTX				  CODE	    1E14	7474
EXPOUT				  CODE	    1E01	7461
EXPRB				  CODE	    0F43	3808
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
E_FIND				  CODE	    0A93	2825
F0				  BIT	      D5
FCMP				  CODE	    1202	4419
FDT1				  CODE	    1D53	7311
FDT2				  CODE	    1D5B	7315
FDTEST				  CODE	    1D4F	7308
FINDC				  CODE	    0EEE	3711
FINDCR				  CODE	    0EEC	3709
FINISH1				  CODE	    1D14	7262
FINISH2				  CODE	    1D27	7278
FINISH_UP			  CODE	    1D28	7280
FINISH_UP1			  CODE	    1D2F	7285
FIRST_RADIX			  BIT	      52	6255
FL1				  CODE	    0AD3	2885
FL11				  CODE	    0AD7	2889
FL2				  CODE	    0AEC	2903
FL3				  CODE	    0ADC	2892
FLOATING_ADD			  CODE	    1993	6322
FLOATING_COMP			  CODE	    1A43	6519
FLOATING_DIV			  CODE	    1AB0	6666
FLOATING_MUL			  CODE	    1A73	6587
FLOATING_POINT_INPUT		  CODE	    1CC2	7206
FLOATING_POINT_OUTPUT		  CODE	    1D7A	7356
FLOATING_SUB			  CODE	    1989	6311
FMUL0				  CODE	    1A78	6596
FMUL1				  CODE	    1A7A	6600
FMUL2				  CODE	    1A8C	6624
FMUL21				  CODE	    1A8E	6625

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 152



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
FMUL3				  CODE	    1A9D	6647
FMUL_OVER			  CODE	    1A88	6610
FNDCL2				  CODE	    0EF6	3717
FNDCL3				  CODE	    0EFA	3720
FORMAT				  NUMBER    0017	 383
FOUND_RADIX			  BIT	      51	6254
FOV				  CODE	    1A8A	6614
FPC1				  CODE	    1BB5	6930
FPO1				  CODE	    1D8C	7375
FPO2				  CODE	    1D93	7382
FPO3				  CODE	    1DA6	7395
FPONE				  CODE	    16F2	5643
FPSIZ				  NUMBER    0006	 533
FPT1				  XDATA	    0119	7915
FPT2				  XDATA	    011F	7917
FPTS				  CODE	    104B	4017
FPTST				  CODE	    1038	4006
FPTST1				  CODE	    1045	4014
FP_ACC1				  NUMBER    0035	6274
FP_ACC2				  NUMBER    0036	6275
FP_ACC3				  NUMBER    0037	6276
FP_ACC4				  NUMBER    0038	6277
FP_ACC5				  NUMBER    0039	6278
FP_ACC6				  NUMBER    003A	6279
FP_ACC7				  NUMBER    003B	6280
FP_ACC8				  NUMBER    003C	6281
FP_ACCC				  NUMBER    0034	6273
FP_ACCS				  NUMBER    003D	6282
FP_ACCX				  NUMBER    0033	6272
FP_BASE				  CODE	    196F	6296
FP_BASE1			  CODE	    1971	6297
FP_BASE10			  CODE	    1983	6306
FP_BASE11			  CODE	    1985	6307
FP_BASE12			  CODE	    1987	6308
FP_BASE2			  CODE	    1973	6298
FP_BASE3			  CODE	    1975	6299
FP_BASE4			  CODE	    1977	6300
FP_BASE5			  CODE	    1979	6301
FP_BASE6			  CODE	    197B	6302
FP_BASE7			  CODE	    197D	6303
FP_BASE8			  CODE	    197F	6304
FP_BASE9			  CODE	    1981	6305
FP_CARRY			  NUMBER    002A	6251
FP_CLEAR			  CODE	    1BB2	6921
FP_DIG12			  NUMBER    002B	6257
FP_DIG34			  NUMBER    002C	6258
FP_DIG56			  NUMBER    002D	6259
FP_DIG78			  NUMBER    002E	6260
FP_EXP				  NUMBER    0030	6263
FP_NIB1				  NUMBER    002B	6264
FP_NIB2				  NUMBER    002C	6265
FP_NIB3				  NUMBER    002D	6266
FP_NIB4				  NUMBER    002E	6267
FP_NIB5				  NUMBER    002F	6268
FP_NIB6				  NUMBER    0030	6269
FP_NIB7				  NUMBER    0031	6270

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 153



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
FP_NIB8				  NUMBER    0032	6271
FP_NUMBER_SIZE			  NUMBER    0006	6233
FP_SIGN				  NUMBER    002F	6261
FP_STATUS			  NUMBER    0028	6249
FP_TEMP				  NUMBER    0029	6250
FREE				  CODE	    1DD2	7430
FREE1				  CODE	    1DD9	7435
FREE2				  CODE	    1DF5	7454
FREE4				  CODE	    1DED	7449
FRTEST				  CODE	    1D4C	7306
FS				  CODE	    13D0	4827
FSIZE				  NUMBER    0011	 538
FSTK				  CODE	    13CB	4824
FSUB10				  CODE	    1A41	6515
FSUB5				  CODE	    1A10	6475
FSUB6				  CODE	    1A1B	6486
FSUB7				  CODE	    1A1F	6489
FSUB8				  CODE	    1A2A	6497
FSUB81				  CODE	    1A2D	6498
FSUB9				  CODE	    1A30	6503
FTYPE				  NUMBER    0001	 526
FUL1				  CODE	    15B0	5322
FULL				  CODE	    15A8	5315
F_VAR				  CODE	    0619	1918
F_VAR0				  CODE	    0620	1922
F_VAR1				  CODE	    0636	1939
F_VAR2				  CODE	    0643	1950
G1				  CODE	    058F	1748
G2				  CODE	    05A2	1758
G3				  CODE	    05A6	1761
G4				  CODE	    05A9	1764
G5				  CODE	    05AC	1766
GC				  CODE	    0ECD	3670
GCI				  CODE	    0ED5	3676
GCI1				  CODE	    0ED7	3680
GCI11				  CODE	    0EDE	3684
GETEND				  CODE	    058A	1744
GETLIN				  CODE	    058C	1746
GET_DIGIT_CHECK			  CODE	    1FEB	7872
GET_DPTR_CHARACTER		  CODE	    1D5F	7329
GET_NUM				  CODE	    1957	6102
GLN				  CODE	    0AD1	2883
GT1				  CODE	    1CEA	7237
GT11				  CODE	    1CF2	7240
GT12				  CODE	    1CF5	7241
GT2				  CODE	    1D02	7250
GTB				  XDATA	    0100	7904
GTEST				  CODE	    1CDB	7230
GTRD				  BIT	      18	 401
GTX				  CODE	    1547	5194
GTX1				  CODE	    155A	5205
GTYPE				  NUMBER    0002	 527
HC1				  CODE	    1CB1	7189
HC11				  CODE	    1CB4	7190
HEX2X				  CODE	    1F3C	7790
HEXDO1				  CODE	    1CA1	7174

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 154



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
HEXDON				  CODE	    1CA0	7172
HEXOUT				  CODE	    1F30	7778
HEXSC1				  CODE	    1C8F	7161
HEXSCAN				  CODE	    1C89	7152
HEX_CHECK			  CODE	    1CA9	7181
HEX_CHECK1			  CODE	    1CAE	7185
HMODE				  BIT	      37	 455
HOUT1				  CODE	    1F48	7799
HOUTHI				  CODE	    1F53	7807
HOUTLO				  CODE	    1F54	7809
HS1				  CODE	    1CA6	7178
H_RET				  CODE	    196B	6138
I2				  CODE	    123B	4475
I21				  CODE	    1247	4482
IAN				  CODE	    00F3	 679
IAT				  CODE	    090B	2541
IAT1				  CODE	    090E	2542
IBCNT				  XDATA	    0004	7897
IBLK				  CODE	    193F	6084
IBLK1				  CODE	    194E	6090
IBLN				  XDATA	    0005	7898
IBUF				  XDATA	    0007	7899
ICLR				  CODE	    069A	2045
ICLR1				  CODE	    069F	2051
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
IFIX				  CODE	    1223	4453
IFIXL				  CODE	    0E90	3605
IGC				  CODE	    0ECB	3668
ILOOP				  CODE	    0813	2363
ILOOP1				  CODE	    081F	2367
IMOV				  CODE	    1566	5219
IN2				  CODE	    0DFD	3495
IN2A				  CODE	    0E02	3498
IN3				  CODE	    0E0F	3504
IN3A				  CODE	    0E20	3514
IN5				  CODE	    0E40	3529
IN6				  CODE	    0E49	3533
INBIT				  BIT	      1D	 410
INC3210				  CODE	    1576	5241
INC3211				  CODE	    157B	5245
INC3212				  CODE	    1580	5248
INCH1				  CODE	    07AA	2249
INCH11				  CODE	    07AF	2251
INCH12				  CODE	    07B4	2253
INCH13				  CODE	    07BB	2261
INCHAR				  CODE	    0791	2238
INCHAR1				  CODE	    0799	2241
INCHAR2				  CODE	    07A1	2244
INC_AND_GET_DPTR_CHARACTER	  CODE	    1D5E	7325
INC_ASTKA			  CODE	    124F	4489
INC_FP_EXP			  CODE	    1B72	6844
INERR				  CODE	    1D44	7299
INL0				  CODE	    06D6	2105
INL1				  CODE	    06DD	2110

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 155



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
INL11				  CODE	    06E6	2114
INL2				  CODE	    06D3	2103
INL2B				  CODE	    06EC	2119
INL2B1				  CODE	    06F2	2122
INL2B2				  CODE	    06F5	2123
INL6				  CODE	    06FE	2129
INLINE				  CODE	    06D8	2107
INLOOP				  CODE	    1CD0	7222
INLPIK				  CODE	    1CD8	7227
INLX				  CODE	    06E8	2116
INPROG				  BIT	      11	 394
INP_B				  BIT	      22	 417
INS				  CODE	    0103	 683
INSR				  CODE	    1517	5162
INSR1				  CODE	    1523	5169
INT0				  BIT	      B2
INT1				  BIT	      B3
INTBIT				  BIT	      12	 395
INTERR				  CODE	    0F30	3785
INTERR1				  CODE	    0F32	3786
INTERX				  CODE	    0938	2567
INTERX1				  CODE	    093B	2569
INTERX2				  CODE	    0941	2571
INTERX3				  CODE	    0948	2574
INTERX4				  CODE	    094D	2576
INTGER				  CODE	    0F35	3789
INTGRC				  BIT	      19	6225
INTLOC				  XDATA	    0120	7918
INTPEN				  BIT	      16	 399
INTXAH				  NUMBER    0042	 483
INTXAL				  NUMBER    0043	 484
IP				  DATA	      B8
IPROGS				  XDATA	    012A	7928
IRAMTOP				  NUMBER    00FF	 501
ISAV				  BIT	      2B	 436
ISTA0				  CODE	    0950	2578
ISTA01				  CODE	    095A	2582
ISTA1				  CODE	    095C	2584
ISTAT				  CODE	    08F8	2532
ISTAT1				  CODE	    0900	2535
ISTAX				  CODE	    091C	2550
ISTAX1				  CODE	    0921	2553
ISTAY				  CODE	    0925	2557
ISTAY1				  CODE	    0928	2558
ISTAY2				  CODE	    092D	2560
IST_CAL				  CODE	    09E7	2688
IT0				  BIT	      88
IT1				  BIT	      8A
ITRAP				  CODE	    086A	2419
ITRAP1				  CODE	    0872	2424
ITRAP2				  CODE	    087A	2429
ITRAP21				  CODE	    087D	2430
ITRAP3				  CODE	    0882	2438
ITRET				  CODE	    0F40	3795
I_DL				  CODE	    185B	5894
I_DR				  CODE	    1902	6010

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 156



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
I_L				  CODE	    0849	2391
I_PI				  CODE	    0E95	3612
I_RET				  CODE	    1871	5911
I_S				  CODE	    0933	2564
I_S1				  CODE	    0936	2565
I_T0				  BIT	      26	 421
L20DPI				  CODE	    0573	1694
L31DPI				  CODE	    05BA	1794
LCLR				  CODE	    05E7	1858
LDPTRI				  CODE	    05B0	1778
LD_A				  CODE	    0FE9	3936
LD_T				  CODE	    0582	1721
LEFT				  CODE	    1BF3	6990
LEFT1				  CODE	    1BF5	6996
LEFT2				  CODE	    1BF6	6997
LEFT3				  CODE	    1BFD	7002
LEFT5				  CODE	    1C1C	7029
LEFTL				  CODE	    1C08	7011
LEFTL1				  CODE	    1C1B	7027
LF				  NUMBER    000A	 507
LIN1				  CODE	    155C	5207
LINE				  CODE	    14F0	5135
LINE0				  CODE	    14ED	5133
LINE1				  CODE	    150B	5152
LINEB				  BIT	      15	 398
LINLEN				  NUMBER    0049	 522
LMOV				  CODE	    156D	5235
LNTAB				  CODE	    16A9	5548
LN_D				  CODE	    131B	4639
LOAD1				  CODE	    19AD	6358
LOAD2				  CODE	    19BD	6370
LOAD21				  CODE	    19C5	6377
LOAD22				  CODE	    19CA	6383
LOAD23				  CODE	    19CE	6386
LOAD25				  CODE	    19E3	6434
LOAD7				  CODE	    1B93	6876
LOADR1				  CODE	    1C7F	7141
LOADR1_MANTISSA			  CODE	    1C7B	7132
LOAD_POINTERS			  CODE	    1C5E	7087
LP				  BIT	      97	 456
LPB				  BIT	      19	 402
LTOUT1				  CODE	    074A	2192
LTX				  CODE	    1528	5175
LTX1				  CODE	    152F	5180
LTX2				  CODE	    1543	5191
L_RET				  CODE	    0EEB	3700
MDES1				  CODE	    1C6A	7109
MEMTOP				  XDATA	    010A	7910
MILLIV				  NUMBER    0047	 487
MNL0				  CODE	    1C3E	7061
MNL1				  CODE	    1C50	7073
MNLOOP				  CODE	    1C35	7053
MOUT				  CODE	    1E8E	7575
MSIGN				  BIT	      78	6262
MT1				  NUMBER    0045	 485
MT2				  NUMBER    0046	 486

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 157



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
MT_ALL				  XDATA	    0108	7909
MU1				  CODE	    136B	4692
MUL11				  CODE	    1EEF	7656
MULNUM				  CODE	    1ED6	7634
MULNUM10			  CODE	    1ED3	7630
MULX				  CODE	    1EF6	7663
MUL_DIV_EXP_AND_SIGN		  CODE	    1C68	7100
MUL_NIBBLE			  CODE	    1C2B	7039
MUL_UNDERFLOW			  BIT	      28	 430
N4				  CODE	    0BC6	3101
NL1				  CODE	    1E6E	7545
NLC				  CODE	    077A	2219
NLC1				  CODE	    077F	2221
NLC2				  CODE	    0782	2222
NLC3				  CODE	    0786	2224
NMARK_L				  CODE	    1A96	6630
NMOV				  CODE	    159D	5297
NMOV1				  CODE	    15A7	5305
NOGO				  CODE	    056E	1689
NOPASS				  CODE	    0F21	3765
NOROM				  CODE	    1FC9	7859
NO_C				  BIT	      30	 441
NR1				  CODE	    1E77	7554
NTWO				  CODE	    1161	4259
NULL				  NUMBER    0000	 512
NULLCT				  NUMBER    0015	 381
NUMC				  CODE	    0C19	3168
NUMC1				  CODE	    0C22	3173
NUM_LT				  CODE	    1E67	7539
NUM_RT				  CODE	    1E70	7548
ONE				  CODE	    0E8E	3599
ON_ERR				  BIT	      13	 396
OOPS				  CODE	    0D3A	3357
OPBOL				  CODE	    00CF	 637
OPTAB				  CODE	    0057	 561
OTI				  BIT	      14	 397
OTS				  BIT	      10	 393
OTST				  CODE	    1938	6071
OTST1				  CODE	    193E	6076
OUTPUT				  CODE	    196C	6286
OUTR				  CODE	    1E5C	7528
OUTR0				  CODE	    1E4B	7514
OV				  BIT	      D2
OVE1				  CODE	    1B98	6887
OVERFLOW			  NUMBER    0001	6235
OVERFLOW_AND_EXIT		  CODE	    1B94	6880
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PACK				  CODE	    1B11	6745
PACK0				  CODE	    1B1A	6758
PACK1				  CODE	    1B1B	6760
PACK11				  CODE	    1B23	6765
PACK2				  CODE	    1B25	6767

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 158



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PACK3				  CODE	    1B37	6781
PACK31				  CODE	    1B38	6782
PACK4				  CODE	    1B4F	6805
PAREN_INT			  CODE	    0E97	3618
PCL				  CODE	    1439	4932
PCON				  DATA	      87
PCON0				  NUMBER    0087	 494
PG1				  CODE	    04BD	1536
PG10				  CODE	    04BC	1534
PG101				  CODE	    04B5	1529
PG2				  CODE	    04C3	1540
PG31				  CODE	    04F7	1573
PG4				  CODE	    04C0	1538
PG5				  CODE	    04CB	1545
PG6				  CODE	    04D0	1548
PG7				  CODE	    04D9	1553
PG8				  CODE	    046F	1362
PGR				  CODE	    04B3	1527
PGU				  CODE	    04F8	1577
PHEAD				  NUMBER    0016	 382
PIE				  CODE	    17FE	5846
PIPI				  CODE	    147F	5009
PLNEXP				  CODE	    1430	4920
PLOOP				  CODE	    1B51	6809
PLUS_MINUS_TEST			  CODE	    1D65	7338
PMT1				  CODE	    1D79	7352
PMT11				  CODE	    1D6A	7342
PMT12				  CODE	    1D6F	7344
PMT13				  CODE	    1D74	7346
PMT2				  CODE	    1D77	7348
PMT3				  CODE	    1D78	7350
PMTOP				  CODE	    164F	5461
PMTOP1				  CODE	    1652	5462
PN0				  CODE	    06C3	2089
PN01				  CODE	    06CC	2093
PN02				  CODE	    06CD	2094
PN1				  CODE	    06B9	2080
POLY1				  CODE	    11A3	4339
POLYC				  CODE	    119B	4330
POPAS				  CODE	    0FD3	3905
POP_AND_EXIT			  CODE	    19A5	6349
POP_T1				  CODE	    1448	4947
POSNM1				  CODE	    1D24	7275
POSNUM				  CODE	    1D21	7272
POTWO				  CODE	    1192	4320
PP				  CODE	    15BA	5338
PPL				  CODE	    15CD	5349
PPL1				  CODE	    15D2	5352
PPL2				  CODE	    15D7	5357
PPL21				  CODE	    15DC	5360
PPL22				  CODE	    15E1	5362
PPL3				  CODE	    15F0	5374
PPL4				  CODE	    15F5	5380
PPL41				  CODE	    15FE	5389
PPL6				  CODE	    1622	5413
PPL61				  CODE	    162B	5418

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 159



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PPL7				  CODE	    162F	5421
PPL71				  CODE	    1630	5422
PPL9				  CODE	    1643	5434
PPL91				  CODE	    1644	5435
PPLX				  CODE	    1609	5398
PPLY				  CODE	    1616	5404
PPLY1				  CODE	    161B	5409
PPX				  CODE	    15E5	5365
PRET				  CODE	    1B71	6842
PRNTCR				  CODE	    06C1	2087
PROGS				  XDATA	    0128	7922
PS				  BIT	      BC
PSTART				  NUMBER    0200	 537
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PTIME				  CODE	    0709	2147
PUSHAS				  CODE	    0FDD	3915
PUSHC				  CODE	    1433	4928
PUSHCS				  CODE	    0BB1	3086
PUSHCS1				  CODE	    0BB6	3088
PUSHCS2				  CODE	    0BBC	3093
PUSHR2R0			  CODE	    1CB6	7193
PUSH_ONE			  CODE	    1443	4942
PUSH_T1				  CODE	    144F	4953
PUSH_T11			  CODE	    1451	4956
PUSH_T12			  CODE	    1453	4958
PX0				  BIT	      B8
PX1				  BIT	      BA
P_E				  CODE	    0CDF	3302
P_T2				  CODE	    1456	4961
P_Z				  CODE	    1375	4708
R0B0				  NUMBER    0000	 346
R1B0				  NUMBER    0001	 347
R2B0				  NUMBER    0002	 348
R3B0				  NUMBER    0003	 349
R3CK				  CODE	    09D5	2670
R4B0				  NUMBER    0004	 350
R5B0				  NUMBER    0005	 351
R6B0				  NUMBER    0006	 352
R76S				  CODE	    0DEF	3476
R7B0				  NUMBER    0007	 353
RB8				  BIT	      9A
RC1				  CODE	    066F	2003
RC2				  CODE	    0673	2006
RCAPH2				  NUMBER    00CB	 497
RCAPL2				  NUMBER    00CA	 498
RCASB				  CODE	    1ECF	7626
RCELL				  XDATA	    010C	7911
RCL				  CODE	    0885	2439
RCL1				  CODE	    088A	2447
RCL2				  CODE	    0892	2454
RCL3				  CODE	    0898	2458
RCL4				  CODE	    089E	2462
RCL5				  CODE	    08A4	2466
RCL6				  CODE	    08AA	2470

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 160



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
RCLEAR				  CODE	    0664	1997
RD				  BIT	      B7
RDYS				  CODE	    00FD	 681
RECIP				  CODE	    127C	4528
REN				  BIT	      9C
RESET				  CODE	    0000
RETBIT				  BIT	      25	 420
RET_X				  CODE	    1D46	7301
RF1				  CODE	    055E	1676
RF2				  CODE	    0565	1682
RF3				  CODE	    056B	1687
RFX				  CODE	    0564	1680
RI				  BIT	      98
RIGHT				  CODE	    1BBB	6937
RIGHT1				  CODE	    1BBD	6944
RIGHT2				  CODE	    1BBE	6945
RIGHT3				  CODE	    1BC5	6952
RIGHT5				  CODE	    1BE4	6978
RIGHTL				  CODE	    1BD1	6962
RIGHTL1				  CODE	    1BE3	6976
RL1				  CODE	    0AF4	2916
RLINE				  CODE	    0AF2	2914
RMOV				  CODE	    1581	5260
RO1				  CODE	    0543	1661
RO11				  CODE	    054E	1667
ROMADR				  NUMBER    8000	 529
ROMFD				  CODE	    055B	1674
ROM_P				  CODE	    06AF	2073
ROM_P1				  CODE	    06B7	2078
ROUT				  CODE	    1E92	7578
RROM				  CODE	    07C0	2277
RS0				  BIT	      D3
RS1				  BIT	      D4
RSUB1				  CODE	    1EF9	7735
RSUB2				  CODE	    1F23	7764
RSUB3				  CODE	    1F2D	7771
RTST				  CODE	    0AC7	2866
RTST1				  CODE	    0AD0	2874
RTXAH				  NUMBER    0012	 375
RTXAL				  NUMBER    0010	 373
RV				  CODE	    11B5	4352
RXD				  BIT	      B0
S0RELH				  NUMBER    00BA	 496
S0RELL				  NUMBER    00AA	 495
S13				  CODE	    0D3D	3359
S20DP				  CODE	    1424	4902
S31DP				  CODE	    0605	1887
S31DP2				  CODE	    0603	1885
S31L				  CODE	    170E	5662
SA				  CODE	    0D1B	3344
SA1				  CODE	    0D22	3347
SA2				  CODE	    0D26	3349
SAVE_T				  NUMBER    004A	 490
SBAUD				  CODE	    16F9	5652
SBUF				  DATA	      99
SCALL				  CODE	    0E63	3557

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 161



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
SCLOCK				  CODE	    1918	6029
SCLR				  CODE	    068F	2034
SCON				  DATA	      98
SC_R				  CODE	    192D	6049
SD0				  CODE	    0D5C	3385
SD01				  CODE	    0D59	3383
SDI				  CODE	    0DBC	3449
SDIMX				  CODE	    0D61	3388
SE0				  CODE	    0CBE	3268
SE1				  CODE	    199F	6343
SERCALC				  CODE	    1F5C	7819
SERR1				  CODE	    18B3	5960
SETREG				  CODE	    1253	4496
SETREG1				  CODE	    1254	4497
SF2				  CODE	    0A53	2773
SF21				  CODE	    0A56	2775
SF3				  CODE	    0A72	2790
SFOR				  CODE	    0A3C	2761
SGOSUB				  CODE	    0B2D	2990
SGOTO				  CODE	    0AAA	2846
SGS0				  CODE	    0B2F	2992
SGS1				  CODE	    0B35	2996
SGT1				  CODE	    0AAC	2848
SGT11				  CODE	    0AB7	2854
SGT2				  CODE	    0AB9	2856
SGT21				  CODE	    0AC1	2859
SIF				  CODE	    0A86	2818
SIF1				  CODE	    0A90	2823
SIGNS_DIFFERENT			  CODE	    1A53	6539
SIN0				  CODE	    11FC	4409
SINOUT				  CODE	    1E8B	7572
SINPUT				  CODE	    0DF5	3489
SINT				  CODE	    0023
SINTAB				  CODE	    16CE	5598
SLET				  CODE	    096E	2605
SLET0				  CODE	    09C2	2657
SLET1				  CODE	    09C6	2660
SLET2				  CODE	    09C8	2662
SM				  CODE	    0C5F	3219
SM0				  BIT	      9F
SM01				  CODE	    0C6D	3225
SM02				  CODE	    0C71	3227
SM1				  BIT	      9E
SM2				  BIT	      9D
SNEXT				  CODE	    0B5F	3031
SONERR				  CODE	    140F	4881
SONEXT				  CODE	    1419	4893
SOT				  CODE	    0E56	3543
SOUT				  CODE	    1E9A	7584
SOUT1				  CODE	    1E9C	7586
SOUT_1				  CODE	    1F46	7797
SP				  DATA	      81
SP0				  CODE	    0C3C	3197
SP1				  CODE	    0C43	3202
SP2				  CODE	    0C3F	3199
SP4				  CODE	    0C47	3205

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 162



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
SP6				  CODE	    0C52	3211
SP7				  CODE	    0C57	3214
SP8				  CODE	    0C75	3230
SP9				  CODE	    0CD7	3289
SP9A				  CODE	    0CDE	3294
SPACE7				  CODE	    1E78	7556
SPEOP				  CODE	    09D9	2673
SPEOP1				  CODE	    09DD	2675
SPH0				  CODE	    0C29	3183
SPH1				  CODE	    0C2B	3185
SPINT				  BIT	      1F	 414
SPOP				  CODE	    0A7D	2805
SPOP1				  CODE	    0A85	2810
SPRINT				  CODE	    0C2D	3187
SPRINT1				  CODE	    0C31	3189
SPRINT2				  CODE	    0C38	3194
SPSAV				  NUMBER    003E	 479
SPUSH				  CODE	    0A76	2799
SPV				  XDATA	    0124	7920
SP_H				  NUMBER    004B	 491
SP_L				  NUMBER    004C	 492
SQ				  CODE	    0C7C	3234
SQR1				  CODE	    12A3	4558
SQR2				  CODE	    12AA	4565
SQR4				  CODE	    12AD	4570
SQR41				  CODE	    12BE	4579
SQ_ERR				  CODE	    128A	4537
SR0				  CODE	    0B14	2967
SR01				  CODE	    0B24	2977
SRD				  CODE	    0BE9	3139
SRD0				  CODE	    0BE5	3136
SRD1				  CODE	    0BF2	3144
SRD2				  CODE	    0BF4	3146
SRD21				  CODE	    0BFE	3151
SRD4				  CODE	    0BFF	3153
SRD5				  CODE	    0C06	3157
SRD51				  CODE	    0C09	3158
SRD6				  CODE	    0C11	3163
SREAD				  CODE	    0BE3	3134
SRESTR				  CODE	    0BCE	3111
SRESTR1				  CODE	    0BD0	3112
SRETI				  CODE	    0B0E	2956
SRETRN				  CODE	    0B10	2964
SRT				  CODE	    1219	4440
SS				  CODE	    0D12	3339
SS7				  CODE	    1E89	7570
SSOOP				  CODE	    099D	2633
SSTOP				  CODE	    0858	2404
SSTOP0				  CODE	    0860	2408
STACKTP				  NUMBER    00FE	 502
STATD				  CODE	    0123	 716
STDIG				  CODE	    1D38	7292
STDIG1				  CODE	    1D47	7303
STEROT				  CODE	    070F	2163
STESIZ				  NUMBER    0009	 535
STJ				  CODE	    0020	 289

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 163



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
STK				  CODE	    0041	 332
STONE				  CODE	    1686	5524
STONE1				  CODE	    168B	5531
STOPBIT				  BIT	      20	 415
STORE2				  CODE	    1B69	6834
STORE_ALIGN_TEST_AND_EXIT	  CODE	    1B63	6824
STP				  CODE	    00EE	 677
STQ				  CODE	    0033	 324
STRING				  CODE	    060C	1898
STRIP				  CODE	    11DA	4385
STR_AL				  XDATA	    0122	7919
STS				  CODE	    003E	 330
STU				  CODE	    0044	 335
ST_A				  CODE	    0FE5	3926
ST_ALL				  XDATA	    0106	7908
SUBLP				  CODE	    19FB	6454
SUI				  CODE	    192E	6053
SUNTIL				  CODE	    0B01	2933
SUO				  CODE	    1933	6063
SWAP_AND_EXIT			  CODE	    199B	6336
SWAP_ASTKA			  CODE	    145A	4966
SWHILE				  CODE	    0AFC	2929
SX				  CODE	    0C81	3237
SX1				  CODE	    0C97	3246
S_0				  CODE	    0982	2616
S_1				  CODE	    09B2	2647
S_11				  CODE	    09BA	2651
S_3				  CODE	    0991	2626
S_4				  CODE	    099F	2635
S_41				  CODE	    09A6	2638
S_5				  CODE	    09AD	2644
S_C				  CODE	    0EBF	3646
S_C_1				  CODE	    0E72	3569
S_DO				  CODE	    0F05	3742
S_E				  CODE	    098C	2622
S_L				  CODE	    1461	4976
S_LEN				  NUMBER    003F	 480
S_N				  CODE	    1FD3	7866
S_ON				  CODE	    0CEB	3313
S_WU				  CODE	    0B03	2935
T0				  BIT	      B4
T1				  BIT	      B5
T2CON				  NUMBER    00C8	 186
TB				  CODE	    15B5	5325
TB8				  BIT	      9B
TBR				  CODE	    1599	5285
TBYTE				  CODE	    1596	5282
TCON				  DATA	      88
TEMP1				  NUMBER    000B	 364
TEMP2				  NUMBER    000C	 365
TEMP3				  NUMBER    000D	 366
TEMP4				  NUMBER    000E	 367
TEMP5				  NUMBER    000F	 368
TEMPD				  CODE	    1854	5888
TEMP_COMP			  CODE	    131C	4643
TEROT				  CODE	    0711	2165

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 164



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TEROT01				  CODE	    0717	2168
TEROT02				  CODE	    071E	2171
TEROT03				  CODE	    0727	2175
TEROT04				  CODE	    072F	2178
TEROT1				  CODE	    0766	2207
TEROT11				  CODE	    076C	2210
TEROT2				  CODE	    0773	2214
TEST_USER			  CODE	    17E0	5801
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TH2				  NUMBER    00CD	 188
THREE				  CODE	    0E78	3575
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TIMER_LOAD			  CODE	    052D	1631
TIMER_LOAD1			  CODE	    052F	1636
TIV				  XDATA	    0126	7921
TL0				  DATA	      8A
TL1				  DATA	      8B
TL2				  NUMBER    00CC	 187
TMOD				  DATA	      89
TMR0				  NUMBER    00C8	1066
TMR1				  NUMBER    00C9	1070
TMR2				  NUMBER    00CA	1074
TM_TOP				  XDATA	    012C	7932
TOKTAB				  CODE	    0175	 764
TR				  CODE	    1913	6019
TR0				  BIT	      8C
TR1				  BIT	      8E
TRC2				  NUMBER    00CE	1094
TT2C				  NUMBER    00CB	1082
TTC				  NUMBER    00CC	1086
TTIME				  CODE	    1167	4277
TTM				  NUMBER    00CD	1090
TVH				  NUMBER    0048	 488
TVL				  NUMBER    0049	 489
TWO				  CODE	    0E85	3588
TWOL				  CODE	    14A1	5044
TWO_EX				  CODE	    14B3	5063
TWO_EY				  CODE	    14B4	5066
TWO_R2				  CODE	    14B1	5060
TXAH				  NUMBER    000A	 360
TXAL				  NUMBER    0008	 358
TXD				  BIT	      B1
TXX				  CODE	    075F	2203
T_1				  CODE	    073A	2183
T_ADD				  NUMBER    00E3	 947
T_ASC				  NUMBER    00D1	1106
T_BIT				  BIT	      92	 465
T_BUF				  CODE	    176C	5709
T_CHR				  NUMBER    00D3	1116
T_CMND				  NUMBER    00F0	1120
T_CMP				  CODE	    07E3	2320

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 165



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
T_CR				  NUMBER    00AA	 916
T_DATA				  NUMBER    009C	 864
T_DIR				  NUMBER    0090	 828
T_DP				  CODE	    0EB8	3640
T_ELSE				  NUMBER    00A8	 908
T_EQU				  NUMBER    00EA	 969
T_F1				  CODE	    0A9E	2831
T_GOSB				  NUMBER    009F	 874
T_GOTO				  NUMBER    0083	 779
T_HH				  NUMBER    0040	 481
T_IE				  NUMBER    00C6	1058
T_IP				  NUMBER    00C7	1062
T_L				  CODE	    196C	6287
T_LAST				  NUMBER    00A4	 890
T_LL				  NUMBER    0041	 482
T_LPAR				  NUMBER    00E0	 937
T_MTOP				  NUMBER    00C4	1054
T_NEG				  NUMBER    00E9	 967
T_P1				  NUMBER    00CF	1098
T_PC				  NUMBER    00D0	1102
T_REM				  NUMBER    0096	 845
T_SPC				  NUMBER    00A9	 912
T_STEP				  NUMBER    00A7	 904
T_STOP				  NUMBER    0090	 824
T_SUB				  NUMBER    00E5	 954
T_T				  CODE	    08B0	2480
T_T01				  CODE	    08BE	2487
T_T1				  CODE	    08CE	2494
T_T2				  CODE	    08DF	2511
T_TAB				  NUMBER    00A4	 892
T_THEN				  NUMBER    00A5	 896
T_TIME				  NUMBER    00C5	1078
T_TO				  NUMBER    00A6	 900
T_TRAP				  CODE	    08E5	2517
T_ULAST				  NUMBER    00BE	1033
T_UOP				  NUMBER    00B0	 989
T_USE				  NUMBER    00D2	1110
T_XTAL				  NUMBER    00C3	1050
T_X_S				  CODE	    0B39	2999
U3				  CODE	    0C9B	3249
U4				  CODE	    0C9F	3252
U5				  CODE	    0CA9	3257
U5A				  CODE	    0CC0	3270
U6				  CODE	    0CCD	3282
U7				  CODE	    0CCF	3284
U8				  CODE	    0CC9	3279
U8A				  CODE	    0CC4	3274
U8B				  CODE	    0CC6	3276
UBIT				  BIT	      2A	 435
UE				  CODE	    1513	5157
ULOOP				  CODE	    1B82	6862
UNDERFLOW			  NUMBER    0000	6234
UNDERFLOW_AND_EXIT		  CODE	    1BA5	6899
UNDER_MD			  CODE	    1B4D	6800
UNPACK_R0			  CODE	    1B7E	6855
UOPBOL				  CODE	    00E0	 656

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 166



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
UPB				  BIT	      27	 422
UPP0				  CODE	    10AE	4098
UPP01				  CODE	    10B1	4099
UPP02				  CODE	    10BC	4105
UPP03				  CODE	    10C1	4107
UPP04				  CODE	    10C6	4109
UPP1				  CODE	    10DD	4123
UPP11				  CODE	    10E3	4126
UPP1A				  CODE	    10D9	4120
UPP2				  CODE	    10EC	4130
UPP3				  CODE	    1101	4143
UPP4				  CODE	    110D	4151
UPP41				  CODE	    1115	4155
UPP42				  CODE	    1119	4157
UPP7				  CODE	    1121	4163
UPP7A				  CODE	    111F	4161
UPP8				  CODE	    1123	4165
UPP81				  CODE	    1125	4167
UPP9				  CODE	    10CD	4113
UPP91				  CODE	    10D5	4117
UPPL				  CODE	    10A3	4078
UPPL0				  CODE	    10A0	4069
UPRNT				  CODE	    06BF	2085
UP_2				  CODE	    10F7	4137
UP_3				  CODE	    10FA	4139
UP_4				  CODE	    10FD	4140
USENT				  CODE	    0047	 542
USING0				  CODE	    1DB0	7401
USING1				  CODE	    1DB6	7406
USING2				  CODE	    1DC8	7419
USINGX				  CODE	    1DC6	7417
USINGY				  CODE	    1DC3	7414
U_ID1				  CODE	    1860	5901
U_IDL				  BIT	      21	 416
U_RET				  CODE	    1E4A	7512
V4				  CODE	    0DB4	3444
VAR				  CODE	    0D65	3391
VAR1				  CODE	    0D67	3393
VAR11				  CODE	    0D71	3398
VAR2				  CODE	    0D9A	3425
VARB				  CODE	    0A0D	2719
VARCOP				  CODE	    1472	4999
VARD				  CODE	    0A10	2721
VARTOP				  XDATA	    0104	7907
VAR_ER				  CODE	    0F01	3732
VX				  CODE	    0D80	3412
VY				  CODE	    0D74	3402
V_C				  CODE	    1474	5001
WCR				  CODE	    0EFC	3722
WE				  CODE	    0F41	3798
WR				  BIT	      B6
X3120				  CODE	    0DAD	3436
X31DP				  CODE	    0579	1707
XBILT				  CODE	    0FB8	3883
XBILT1				  CODE	    0FC2	3887
XBIT				  BIT	      2D	 438

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 167



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
XLPAR				  CODE	    0FC4	3889
XOP				  CODE	    0F86	3848
XOP1				  CODE	    0F90	3853
XOP11				  CODE	    0FA3	3864
XOP12				  CODE	    0FAD	3872
XOP2				  CODE	    0FAF	3876
XOP3				  CODE	    0FCA	3893
XOUT0				  CODE	    1E23	7484
XOUT2				  CODE	    1E28	7488
XOUT3				  CODE	    1E30	7493
XOUT4				  CODE	    1E34	7497
XPOP				  CODE	    0FD1	3897
XSIGN				  BIT	      50	6253
XTALV				  CODE	    17EC	5813
XXI				  CODE	    0B67	3036
XXI1				  CODE	    0B76	3046
XXI2				  CODE	    0BAB	3073
XXI3				  CODE	    0BAF	3075
X_TR				  CODE	    0BD6	3118
Z7R7				  CODE	    1E80	7562
ZERO				  NUMBER    0002	6236
ZERO7				  CODE	    1E81	7564
ZERO_AND_EXIT			  CODE	    1BAB	6910
ZERO_DIVIDE			  NUMBER    0003	6237
ZOUT				  CODE	    1E96	7581
ZRO				  CODE	    04E0	1559
ZSURP				  BIT	      36	 454
ZT0				  CODE	    1E5F	7532
ZT1				  CODE	    1E66	7537
ZTEST				  CODE	    1E5D	7530

